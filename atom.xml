<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://linvaux.github.io/atom.xml" rel="self"/>
  
  <link href="https://linvaux.github.io/"/>
  <updated>2024-07-26T14:49:47.622Z</updated>
  <id>https://linvaux.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中的异常处理</title>
    <link href="https://linvaux.github.io/2024/07/26/Java%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://linvaux.github.io/2024/07/26/Java%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2024-07-26T14:37:04.000Z</published>
    <updated>2024-07-26T14:49:47.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Java-中的异常分类"><a href="#1-Java-中的异常分类" class="headerlink" title="1. Java 中的异常分类"></a>1. Java 中的异常分类</h2><p>Java中的异常类均以<code>Throwable</code>为父类，而<code>Throwable</code>又派生出 <code>Error</code> 和 <code>Exception</code> 两类，区别如下</p><h3 id="1-1-Error类及其子类"><a href="#1-1-Error类及其子类" class="headerlink" title="1.1 Error类及其子类"></a>1.1 Error类及其子类</h3><p>代表了JVM自身的异常。这一类异常发生时，无法通过程序来修正。例如系统崩溃、内存溢出等。与异常不同，错误表示程序无法继续执行下去，一般不需要进行捕获或处理。错误通常是由底层系统或环境导致的，它们是不可控的，最可靠的方式就是尽快地停止JVM的运行。</p><h3 id="1-2-Exception类及其子类"><a href="#1-2-Exception类及其子类" class="headerlink" title="1.2 Exception类及其子类"></a>1.2 Exception类及其子类</h3><p>Exception又分为运行时异常(RuntimeException)和非运行时异常， 这两种异常有很大的区别，也称之为非受检异常（Unchecked Exception）和受检异常（Checked Exception），其中Error类及其子类也是非受检异常。</p><ul><li><p>受检异常：也称为“编译时异常”，编译器在编译期间检查的那些异常。由于编译器“检查”这些异常以确保它们得到处理，因此称为“检查异常”。如果抛出检查异常，那么编译器会报错，需要开发人员手动处理该异常，要么捕获，要么重新抛出。除了RuntimeException之外，所有直接继承 Exception 的异常都是检查异常。</p></li><li><p>非受检异常：也称为“运行时异常”，编译器不会检查运行时异常，在抛出运行时异常时编译器不会报错，当运行程序的时候才可能抛出该异常。Error及其子类和RuntimeException 及其子类都是非检查异常。</p></li></ul><p>Java 中异常类的关系可以使用如下 UML 类图表示</p><p><img src="/../images/RSJZr3SoDnMvxRTsYPSYUAbL.jpg" alt="iShot_2023-08-12_22.18.46.jpg"></p><p>受检异常和非受检异常是<strong>针对编译器而言</strong>的，是编译器来检查该异常是否强制开发人员处理该异常：</p><ul><li><p>受检异常导致异常在方法调用链上显式传递，而且一旦底层接口的检查异常声明发生变化，会导致整个调用链代码更改。</p></li><li><p>使用非受检异常不会影响方法签名，而且调用方可以自由决定何时何地捕获和处理异常。</p></li></ul><h3 id="1-3-受检异常举例"><a href="#1-3-受检异常举例" class="headerlink" title="1.3 受检异常举例"></a>1.3 受检异常举例</h3><p><img src="/../images/JUnWSvCKCGJaDAoEHbz7J8Dh.png" alt="image-20230813204926255.png"></p><p>编译器提示需要处理这个异常，这种异常处理有两种方式：</p><ul><li>在方法签名上抛出此异常，由方法调用方处理</li><li>使用try-catch 捕获异常，内部处理</li></ul><p><img src="/../images/4P95pTbDCLK8xM7iB8qFj18y.png" alt="image-20230813205125690.png"></p><h3 id="1-4-非受检异常异常举例"><a href="#1-4-非受检异常异常举例" class="headerlink" title="1.4 非受检异常异常举例"></a>1.4 非受检异常异常举例</h3><p>所有继承 RuntimeException 的异常都是非检查异常，直接抛出非检查异常编译器不会提示错误</p><p><img src="/../images/te9ERq1jwweWzM9thmsDLofA.png" alt="image-20230813205245428.png"></p><p>方法直接抛出 RuntimeException 时，编译器并不会要求捕获或者抛出此异常。</p><h2 id="2-try-catch"><a href="#2-try-catch" class="headerlink" title="2. try-catch"></a>2. try-catch</h2><p><code>try-catch</code> 关键字在Java 中主要用于捕获异常，并进行处理。简单示例如下：</p><p><img src="/../images/jXqNSRgto7wGUhnhMp8y2jtx.png" alt="image-20230813205659417.png"></p><p>在 try{} 代码块中，是<code>可能抛出异常的代码</code>或者<code>调用了签名上会抛出异常的方法</code>。cath{} 代码块中则是捕获异常，并处理异常。注意：catch 可以捕获多种异常，并根据异常种类不同，分开处理，但是要注意异常捕获的顺序。</p><p><img src="/../images/EGpWhJJZ3N4jdHGZP2LF7Ysi.png" alt="image-20230813210343797.png"></p><p>在上面的示例中，先捕获了 IOException，IDE 就会提示下面的 FileNotFoundException 无需再被捕获了，因为 IOException 是 FileNotFoundException 的父类，捕获到 IOException 之后，其所有子类的异常捕获代码都会失效。</p><p>下面演示如何同时捕获多个异常，并用同一个分支处理：</p><p><img src="/../images/KVcDnv2hpWYPuiBc2z7qkThn.png" alt="image-20230813210712437.png"></p><p>当我们需要对多个异常分组处理时，可以使用 catch(Exception1 | Exception2 e) 来捕获多个异常。</p><h2 id="3-try-catch-finally"><a href="#3-try-catch-finally" class="headerlink" title="3. try-catch-finally"></a>3. try-catch-finally</h2><p><code>try-catch-finally</code> 用于在处理异常时，不管是否发生异常，都要执行的操作。示例代码如下：</p><p>try 代码块中发生了异常：</p><p><img src="/../images/dUmSNsByvnVVrsaWWZziaVTg.png" alt="image-20230813211231664.png"></p><p>提问：为什么先打印了 finally 代码块中的内容，后打印了异常信息？</p><p>try 代码块未异常：</p><p><img src="/../images/V74wz11U8VaYzGQn3btdE8DY.png" alt="image-20230813211411419.png"></p><p>finally{} 一般用于资源的关闭，或者数据的清理， 但是也可以在 finally 中执行 return 命令来修改方法返回。示例代码如下：</p><p><img src="/../images/5Gbu8v6JxCjpqJFbhN1NSokh.png" alt="image-20230813211910857.png"></p><p>提问：大家觉得这个cal 方法返回值是多少？为什么？</p><p>正常情况下，finally 代码块中的代码一定是会执行的，但是也有以下几种失效情况：</p><ol><li><p>在执行 try 或 catch 块之前 JVM 被非法终止，比如程序正在运行，但是使用 pkill -9 java 命令强行停止 Java 进程。</p></li><li><p>在 try 或 catch 块中发生了 System.exit() 调用，导致 JVM 直接退出。</p></li></ol><p><img src="/../images/Emqodm5VB2TopcwNG8YeBGYm.png" alt="image-20230813212533105.png"></p><ol start="3"><li><p>在 try 或 catch 块中发生了死循环，导致程序无法继续执行。</p></li><li><p>在 try 或 catch 块中发生了栈溢出异常（StackOverflowError）或虚拟机异常（如 OutOfMemoryError），导致 JVM 崩溃。</p></li><li><p>程序所在的线程被强制中断或程序进程被操作系统杀死。</p></li><li><p>在 try 或 catch 块中使用了 System.halt() 方法，显式终止 JVM。</p></li><li><p>调用了 native 方法，而该方法中不包含 finally 块。</p></li></ol><h2 id="4-try-with-resources-用法"><a href="#4-try-with-resources-用法" class="headerlink" title="4. try-with-resources 用法"></a>4. try-with-resources 用法</h2><p><code>try-with-resources</code> 是 Java 7 引入的一个语法结构，用于更加方便地处理需要关闭的资源。它可以自动关闭实现了 <code>AutoCloseable</code> 或 <code>Closeable</code> 接口的资源，无需手动编写 finally 块来关闭资源。try-with-resources 的语法形式是在 try 关键字之后使用圆括号括起来的资源声明列表。每个资源在括号中声明并初始化。当 try 块结束时，无论是否发生异常，这些资源都将自动关闭，而不需要显式调用 <code>close()</code> 方法。以下是一个读取文件并自动关闭流的示例：</p><p><img src="/../images/si4JckeNWjgACu2Hy2zyE9v3.png" alt="image-20230813213416710.png"></p><p>FileInputStream 之所以可以自动关闭，是因为其继承了 InputStream 类，而InputStream类实现了 Closeable 接口，FileInputStream重写了 close()方法，以下是具体实现：</p><p><img src="/../images/3Jb59oFSKkxxpGfnWtjQjasr.png" alt="image-20230813213712104.png"></p><p>那如何证明使用 try-with-resources 时，close 方法真的被调用了呢？我们可以使用如下命令编译 App.java 文件，并看下生成的字节码文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-g 参数用于生成与调试相关的信息，包括调试符号和源代码行号。它允许在编译后的字节码中插入调试信息，以便在调试过程中可以精确地映射回源代码的行号和变量名</span></span><br><span class="line">javac -g App.java</span><br></pre></td></tr></table></figure><p>生成的 class 文件如下：<br><img src="/../images/evB6PifBF6JpyjircMjg6o3S.png" alt="image-20230813214358657.png"></p><p>从上面的 class 文件中我们可以清楚看到 jvm 帮我们生成了一个 catch 代码块，用来捕获外层 try 代码块可能抛出的异常，并且在 catch 代码块中显式调用了 fis 的 close() 方法进行资源关闭。这就是为什么说 <code>无论是否发生异常，这些资源都将自动关闭</code>。</p><h2 id="5-异常处理规范"><a href="#5-异常处理规范" class="headerlink" title="5. 异常处理规范"></a>5. 异常处理规范</h2><p>异常处理规范参考 《阿里巴巴代码开发规范》 中的约束。</p><p><img src="/../images/mYhf3h8HmbqPChm4u6Dnf3DT.png" alt="image-20230813215452165.png"></p><p><img src="/../images/mpcvecGWeFHyKGwkihq87fkN.png" alt="image-20230813215516364.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Java-中的异常分类&quot;&gt;&lt;a href=&quot;#1-Java-中的异常分类&quot; class=&quot;headerlink&quot; title=&quot;1. Java 中的异常分类&quot;&gt;&lt;/a&gt;1. Java 中的异常分类&lt;/h2&gt;&lt;p&gt;Java中的异常类均以&lt;code&gt;Throwab</summary>
      
    
    
    
    
    <category term="Java" scheme="https://linvaux.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Java中的序列化和反序列化</title>
    <link href="https://linvaux.github.io/2024/07/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E4%B8%AD%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://linvaux.github.io/2024/07/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E4%B8%AD%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2024-07-26T14:14:54.000Z</published>
    <updated>2024-07-26T14:36:17.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-技术背景"><a href="#1-技术背景" class="headerlink" title="1. 技术背景"></a>1. 技术背景</h2><p>​互联网的迅猛发展受益于网络通信技术的成熟和稳定。网络通信协议是机器双方共同约定的协议。在应用层看到的是结构体、对象，但是在网络协议里，机器之间传输的都是二进制流。网络编程中，需要定义应用层协议。最原始的应用层协议是字节数组，在 Java 语言里以 byte［］体现，在C语言里以 char［］体现。不管是 Java 语言还是 C 语言，开发人员都需要知道字节数组里每个字节的含义才能保证数据写入和读取的正确性。这对开发人员来说，是非常严苛且低效的。<br>如何将程序中的结构体、对象等结构化内存对象转换为扁平的二进制流？如何将二进制流还原为结构化内存对象？为了解决这些问题，序列化&#x2F;反序列化技术应运而生。</p><p><img src="/../images/1gTCneXGk1gBEGnis6FRtz5M.jpg" alt="image.jpg"></p><p>核心意义：对象状态的保存(序列化)和重建(反序列化)</p><h2 id="2-序列化协议的特性"><a href="#2-序列化协议的特性" class="headerlink" title="2. 序列化协议的特性"></a>2. 序列化协议的特性</h2><ol><li><p>通用性</p><ul><li>技术层面，序列化协议是否支持跨平台、跨语言。如果不支持，在技术层面上的通用性就大大降低了。</li><li>流行程度，社区是否成熟，是否能及时跟进Issue并解决Bug。</li></ul></li><li><p>鲁棒性</p><ul><li>成熟度不够，一个协议从制定到实施，到最后成熟往往是一个漫长的阶段。协议的强健性依赖于大量而全面的测试，对于致力于提供高质量服务的系统，采用处于测试阶段的序列化协议会带来很高的风险。</li><li>语言&#x2F;平台的不公平性。为了支持跨语言、跨平台的功能，序列化协议的制定者需要做大量的工作；但是，当所支持的语言或者平台之间存在难以调和的特性的时候，协议制定者需要做一个艰难的决定–支持更多人使用的语言&#x2F;平台，亦或支持更多的语言&#x2F;平台而放弃某个特性。当协议的制定者决定为某种语言或平台提供更多支持的时候，对于使用者而言，协议的强健性就被牺牲了。</li></ul></li><li><p>可扩展性&#x2F;兼容性</p><ul><li>扩展性表现为随着业务需求变化需要增减字段。字段变化的过程中，不会对现有系统的数据存储、数据访问造成影响，具有向后兼容性。扩展性也是序列化&#x2F;反序列化技术的核心指标之一。</li></ul></li><li><p>性能</p><ul><li>时间开销，复杂的序列化协议会导致较长的解析时间，这可能会使得序列化和反序列化阶段成为整个系统的瓶颈。</li><li>空间开销，如果序列化过程引入的额外开销过高，可能会导致过大的网络，磁盘等各方面的压力。对于海量分布式存储系统，数据量往往以TB为单位，巨大的的额外空间开销意味着高昂的成本。</li></ul></li><li><p>易用性</p><ul><li>易用性决定了开发者是不是需要花很多时间去学习，门槛是不是很高，接口是不是容易理解和使用。</li></ul></li><li><p>安全性</p><ul><li>安全性也是序列化工具选型的重要参考意见，比如广泛使用的fastjson，很多版本都存在RCE漏洞。</li></ul></li></ol><h2 id="3-序列化引擎"><a href="#3-序列化引擎" class="headerlink" title="3. 序列化引擎"></a>3. 序列化引擎</h2><p>​一般来说，序列化&#x2F;反序列化分为IDL（Interface Description Language，接口描述语言）和非IDL两类。非IDL技术方案包含 JSON、XML等，提供构造和解析的工具包即可使用，不需要做代码生成的工作。IDL技术方案包含 Thrift、Protocol Buffer、Avro 等，有比较完整的规约和框架实现。</p><p><img src="/../images/hELYzbRMotrUMeYVsRa5vr9i.jpg" alt="image.jpg"></p><p>IDL 描述文件：比如，Thrift 是以 thrift 为后缀的文件，Protocol Buffer是以 proto 为后缀的文件。<br>IDL 文件编译器：根据 IDL 文件生成具有序列化&#x2F;反序列化功能的代码文件。例如，Thrift 通过 thrift 命令行指定编程语言类型来生成代码文件，Protocol Buffer 根据 protoc 命令行生成代码文件。<br>Stub&#x2F;Skeleton 代码：在客户（Client）端，一般称为 Stub 代码。在服务器（Server）端，一般称为 Skeleton 代码。</p><h2 id="4-Java序列化方式"><a href="#4-Java序列化方式" class="headerlink" title="4. Java序列化方式"></a>4. Java序列化方式</h2><h3 id="4-1-实现Serializable接口"><a href="#4-1-实现Serializable接口" class="headerlink" title="4.1 实现Serializable接口"></a>4.1 实现Serializable接口</h3><h4 id="4-1-1-默认的序列化-反序列化"><a href="#4-1-1-默认的序列化-反序列化" class="headerlink" title="4.1.1 默认的序列化&#x2F;反序列化"></a>4.1.1 默认的序列化&#x2F;反序列化</h4><p>实现 <code>Serializable</code> 接口是最常用的序列化方式，以下是简单示例</p><ul><li>准备一个待序列化的对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wick.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行序列化操作 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wick;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wick.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;wick&quot;</span>, <span class="number">18</span>, <span class="string">&quot;beijing&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(Files.newOutputStream(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;user.out&quot;</span>).toPath())))&#123;</span><br><span class="line">            os.writeObject(user);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p> 在上面的例子中，我们使用 <code>ObjectOutputStream.writeObject(Object obj )</code> 方法来完成对象的序列化，并保存到本地文件中，我们可以使用二进制文件编辑器打开看下文件内容</p><p><img src="/../images/Y1ECwL99NPQ9CM8ivPzgBVHo.jpg" alt="iShot_2023-05-03_11.08.28.jpg"></p><p>同样的，我们也可以使用 <code>ObjectInputStream.readObject() </code> 方法来将一个对象反序列化出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ins</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(Files.newInputStream(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;user.out&quot;</span>).toPath()));</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) ins.readObject();</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// out: User(name=wick, age=18, address=beijing)</span></span><br></pre></td></tr></table></figure><p>除了使用默认的序列化机制外，对于一些特殊的类， 我们需要定制序列化和反序列化方法的时候，可以通过重写以下方法实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream out)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObjectNoData</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException;</span><br></pre></td></tr></table></figure><p>上面的三个方法，并不是 <code>Serializable</code> 接口中的方法，而是特殊名称的方法，只要实现了 <code>Serializable</code> 接口，就可以通过重写这几个方法来实现定制的序列化和反序列化需求，jdk 中的很多类都有此操作，有兴趣的可以自行查看各自的实现，此处不做展开。</p><p><img src="/../images/2VNC72QBgSZyBYvENcVCm2bq.jpg" alt="iShot_2023-05-03_11.30.00.jpg"></p><h4 id="4-1-2-自定义序列化-反序列化"><a href="#4-1-2-自定义序列化-反序列化" class="headerlink" title="4.1.2 自定义序列化&#x2F;反序列化"></a>4.1.2 自定义序列化&#x2F;反序列化</h4><ul><li>对于上面的 User 类，我们可以通过重写 <code>writeObject(java.io.ObjectOutputStream out)</code> 方法来实现自定义的序列化，代码如下所示</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wick.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line">        <span class="comment">// 追加 toString() 的内容</span></span><br><span class="line">        s.writeBytes(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot;, age: &quot;</span> + age + <span class="string">&quot;, address: &quot;</span> + address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>序列化对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSerializer</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;wick&quot;</span>, <span class="number">18</span>, <span class="string">&quot;beijing&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(Files.newOutputStream(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;user1.out&quot;</span>).toPath())))&#123;</span><br><span class="line">        os.writeObject(user);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>使用工具查看生成的二进制文件内容，可以明显看到后面追加了刚才 <code>toString()</code> 方法的内容，这样就实现了对象的自定义序列化。</p><p><img src="/../images/PyvHnp3XR3K5NXyT1MK4cr6D.png" alt="image-20230503115610143.png"></p></li><li><p>同样的，我们也可以通过重写 <code>readObject(java.io.ObjectInputStream s) </code> 方法来实现自定义的反序列化操作</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">   s.defaultReadObject();</span><br><span class="line">   <span class="comment">// 读取 toString() 的内容</span></span><br><span class="line">   <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">   <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.read(bytes);</span><br><span class="line">   String[] split = <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len).split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">  <span class="comment">// 此处，将 name 和 address 属性交换读取，不然看不出来区别</span></span><br><span class="line">   <span class="built_in">this</span>.address = split[<span class="number">0</span>].split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>].trim();</span><br><span class="line">   <span class="built_in">this</span>.age = Integer.parseInt(split[<span class="number">1</span>].split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>].trim());</span><br><span class="line">   <span class="built_in">this</span>.name = split[<span class="number">2</span>].split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>].trim();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>反序列化对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">ObjectInputStream</span> <span class="variable">ins</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(Files.newInputStream(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;user1.out&quot;</span>).toPath()));</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) ins.readObject();</span><br><span class="line">    System.out.println(user.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// out: User(name=beijing, age=18, address=wick)</span></span><br></pre></td></tr></table></figure><h3 id="4-2-实现Externalizable接口"><a href="#4-2-实现Externalizable接口" class="headerlink" title="4.2 实现Externalizable接口"></a>4.2 实现Externalizable接口</h3><p>除了实现 <code>Serializable</code> 接口完成序列化&#x2F;反序列化外，还可以通过实现 <code>Externalizable</code> 接口达到序列化&#x2F;反序列化的目的， 但是如果实现了 <code>Externalizable</code> 接口， 那就必须实现 <code>writeExternal(ObjectOutput out) </code> 和 <code>readExternal(ObjectInput in)</code> 方法。</p><ul><li>以下我们还是以简单的 Person 类来举例。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wick.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Externalizable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInput;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wick</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/5/3 12:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">// 必须要有无参构造，如果没有重写构造方法，则默认会有无参构造</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Externalizable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        out.writeObject(name);</span><br><span class="line">        out.writeInt(age);</span><br><span class="line">        out.writeObject(address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        name = (String) in.readObject();</span><br><span class="line">        age = in.readInt();</span><br><span class="line">        address = (String) in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>序列化对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;wick&quot;</span>, <span class="number">18</span>, <span class="string">&quot;nanjing&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(Files.newOutputStream(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;person.out&quot;</span>).toPath())))&#123;</span><br><span class="line">        os.writeObject(person);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用工具查看序列化后的内容</li></ul><p> <img src="/../images/ZJ9fqjsXpnfXGsH7i5P1iYw5.png" alt="image-20230503122846877.png"></p><ul><li>反序列化对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">ObjectInputStream</span> <span class="variable">ins</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(Files.newInputStream(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;person.out&quot;</span>).toPath()));</span><br><span class="line">    <span class="type">Person</span> <span class="variable">user</span> <span class="operator">=</span> (Person) ins.readObject();</span><br><span class="line">    System.out.println(user.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// out: Person(name=wick, age=18, address=nanjing)</span></span><br></pre></td></tr></table></figure><h3 id="4-3-两种序列化方式的比较"><a href="#4-3-两种序列化方式的比较" class="headerlink" title="4.3 两种序列化方式的比较"></a>4.3 两种序列化方式的比较</h3><ul><li><p>实现方式</p><ul><li><p>Serializable 接口：是 Java 语言提供的标记接口，即不需要实现任何方法，只需要在类名加上 <code>implements Serializable</code> 即可。当一个对象被序列化时，Java 的序列化机制会把对象的状态保存到一个字节序列中。而当一个对象被反序列化时，Java 的序列化机制会根据保存的字节序列来创建并初始化一个对象。</p></li><li><p>Externalizable 接口：需要实现 <code>readExternal</code> 和 <code>writeExternal</code> 两个方法，用来表示如何序列化和反序列化一个对象。可以通过这两个方法来控制对象状态的写入和读取。 <code>readExternal</code> 和 <code>writeExternal</code> 方法不是由 Java 序列化机制调用的，而是需要手动调用，因此可以进行一些额外的初始化或特殊操作。</p></li></ul></li><li><p>序列化效率</p><ul><li><p>Serializable 接口：在序列化和反序列化一个对象时，序列化机制会自动地对该对象的所有非静态成员进行序列化和反序列化操作。因为使用的是自动序列化机制，这可能会创建一些不必要的对象和字节数组，从而降低序列化的效率，尤其当某个类的父类也实现了可序列化接口时，更耗费资源。</p></li><li><p>Externalizable 接口：由于对对象的序列化和反序列化过程都是手动控制的，<code>Externalizable</code> 实现的序列化效率比 <code>Serializable</code> 高，特别是在序列化大型对象图时。但是，需要手动调用接口的方法，可能需要更多的代码开销和维护成本。</p></li></ul></li></ul><p>综上所述，<code>Serializable</code> 接口更加简单且容易实现，但是效率相比于 <code>Externalizable</code> 接口会下降；而 <code>Externalizable</code> 接口需要手动编写序列化和反序列化的方法，但是它提供了更好的控制序列化的过程并且具有更高的序列化效率。</p><h2 id="5-Java序列化核心类-接口"><a href="#5-Java序列化核心类-接口" class="headerlink" title="5 Java序列化核心类&#x2F;接口"></a>5 Java序列化核心类&#x2F;接口</h2><h3 id="5-1-Serializable"><a href="#5-1-Serializable" class="headerlink" title="5.1 Serializable"></a>5.1 Serializable</h3><p>Serializable 接口源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Serializable</code> 是一个空接口，表明了实现自该接口的子类具有序列化行为特征，所有要支持序列化的类都应该实现这个接口。在后面介绍 <code>ObjectOutputStream</code> 的<code>writeObject</code> 方法时，会解释为什么必须这么做。</p><h3 id="5-2-Externalizable"><a href="#5-2-Externalizable" class="headerlink" title="5.2 Externalizable"></a>5.2 Externalizable</h3><p><code>Externalizable</code> 接口源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Externalizable</span> <span class="keyword">extends</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此接口有两个必须要重写的方法，在上面我们已经介绍过，<code>writeExternal</code> 的参数是 <code>ObjectOutput</code>，表示输出对象的抽象，它继承自 <code>DataOutput</code>，能支持基本类型、String、数组、对象的输出。实际应用中，会使用它的实现类 <code>ObjectOutputStream</code>。 <code>readExternal</code> 的参数是 <code>ObjectInput</code>，表示输入对象的抽象，它继承自 <code>DataInput</code>，能支持基本类型、String、数组、对象的输入。实际应用中，会使用它的实现类 <code>ObjectInputStream</code>。自定义的类必须包含无参构造函数。</p><h3 id="5-3-ObjectOutputStream"><a href="#5-3-ObjectOutputStream" class="headerlink" title="5.3 ObjectOutputStream"></a>5.3 ObjectOutputStream</h3><p><code>java.io.ObjectOutputStream</code> 是实现序列化的关键类，它可以将一个对象转换成二进制流，然后通过 <code>ObjectInputStream</code> 将二进制流还原成对象。为了能更好地理解 <code>ObjectOutputStream</code>，先简要说明其内部的几个关键类：</p><h4 id="5-3-1-BlockDataOutputStream"><a href="#5-3-1-BlockDataOutputStream" class="headerlink" title="5.3.1 BlockDataOutputStream"></a>5.3.1 BlockDataOutputStream</h4><p><code>BlockDataOutputStream</code> 是Java标准库中的一个类，它是<code>DataOutputStream</code> 的子类，用于提供对数据进行块写入的功能。<code>BlockDataOutputStream </code>类主要用于为<code>ObjectOutputStream</code> 类提供支持。在对象序列化过程中，<code>ObjectOutputStream </code>会使用 <code>BlockDataOutputStream</code> 来处理原始数据的写入。</p><p>以下是<code>BlockDataOutputStream</code>的一些主要特点和功能：</p><ol><li><p>块数据写入：<code>BlockDataOutputStream</code>允许以块的形式，将原始数据按照一组字节进行写入。块数据包含了一些元信息，如块长度、类型等，以便在反序列化时进行正确的解析。</p></li><li><p>压缩：<code>BlockDataOutputStream </code>可以对数据进行压缩，以减小序列化数据的大小，提高传输效率。</p></li><li><p>写入类型：除了基本的数据类型，<code>BlockDataOutputStream</code> 还支持写入字符串、数组、特定类型对象等。</p><p><img src="/../images/qpTtpLL9DYbfFPFkSN5onUmd.jpg" alt="WeChat1fff69b0fbc7927f0b6236408eb494ae.jpg"></p></li><li><p>缓冲区管理：<code>BlockDataOutputStream</code>使用内部缓冲区（Buffer）来提高写操作的性能。缓冲区会在需要时被填满并进行刷出。</p></li></ol><p>简单来说，<code>BlockDataOutputStream</code>是用于支持对象序列化过程中的底层数据写入。它提供了块数据写入的功能，可以进行压缩以减小数据大小，同时也实现了缓冲区管理，以提高写入操作的性能。作为 <code>ObjectOutputStream</code> 内置的具有缓冲作用的输出功能类，包含阻塞和非阻塞两种工作模式。两种模式的工作流程相同，都是先把待写的数据写到缓冲区，直到缓冲区满后再执行真正的写入操作，只是在阻塞模式下，每次将缓冲区数据写入之前会写入一个阻塞标记头部（Block Data Header）。 </p><h4 id="5-3-2-HandleTable"><a href="#5-3-2-HandleTable" class="headerlink" title="5.3.2 HandleTable"></a>5.3.2 HandleTable</h4><p>管理对象引用的处理，在 Java 的序列化机制中，如果一个对象被多次引用，那么在序列化过程中会将对象序列化为多个拷贝，这样会导致序列化结果变得冗长。为了解决这个问题，Java 序列化机制使用了对象引用句柄。<code>HandleTable</code> 类的作用是维护了一张对象引用句柄表，用来管理对象的序列化和反序列化过程中的引用处理。它通过使用句柄来代替重复的对象，从而实现对象的共享和压缩。具体来说，<code>HandleTable</code> 类中的 <code>handles</code> 数组存储了对象的引用句柄，索引值作为句柄值。当序列化一个对象时，<code>ObjectOutputStream </code>会将对象写入输出流，并将其句柄（索引值）写入句柄表中。当序列化过程中遇到同一个对象的引用时，它会使用相同的句柄值来表示该对象，这样就实现了对象的共享。在反序列化过程中，<code>ObjectInputStream</code>会根据句柄值从句柄表中获取对应的对象引用。通过使用句柄表，<code>HandleTable</code> 类可以有效地减少序列化结果的大小，并提高序列化和反序列化的效率。它是Java序列化机制中的一个关键组件，帮助实现了序列化对象的共享和压缩。我们可以通过下面一张图来理解这个过程。</p><p><img src="/../images/eoWEk2V81BTRTxPzzit3BcEw.jpg" alt="HandleTable.jpg"></p><p>在上面这张简单的表示组合关系的类图中，我们可以看到 A 类是由 B 和 C 两个类来组合得到的，而 B，C 类内部都有 T 类，如果没有 <code>HandleTable</code>，那 A类的序列化过程就会变成：</p><ul><li>构造对象 B 和 C</li><li>在 B 中构造对象 T，在 C 中构造对象 T</li></ul><p>从上面这个过程我们发现，T 这个对象会分别在 B 和 C 中被构造一次，如果是更为复杂的对象，那么对于 T 来说，可能会出现非常多的拷贝对象，但是当引入 <code>HandleTable</code> 之后，事情就变得简单了，比先构造对象 B，然后发现用到了 T，则构造一次，并使用一个 <code>Object[]</code> 来缓存这个 T 对象，当构造 C 的时候发现它也用到了对象 T，则直接会从 <code>Object[]</code> 中取到这个对象的引用，避免了二次创建对象，下面是<code>HandleTable</code>类的简化示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HandlesTable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] handles; <span class="comment">// 引用句柄表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setObject</span><span class="params">(<span class="type">int</span> handle, Object obj)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置句柄对应的对象引用</span></span><br><span class="line">        handles[handle] = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="type">int</span> handle)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取句柄对应的对象引用</span></span><br><span class="line">        <span class="keyword">return</span> handles[handle];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用数组作为存储结构，<code>HandleTable</code> 能够快速通过句柄值来获取对应的对象引用。通过索引操作，可以直接访问数组的元素，无需进行遍历或搜索操作，因此具有较快的存取速度。当需要序列化和反序列化对象时，<code>HandleTable</code> 会根据需要动态扩展数组的大小，以适应不同数量的对象引用。</p><h4 id="5-3-3-ReplaceTable"><a href="#5-3-3-ReplaceTable" class="headerlink" title="5.3.3 ReplaceTable"></a>5.3.3 ReplaceTable</h4><p><code>ReplaceTable</code>类的主要作用是在序列化过程中，当遇到可以被替换的对象时，将对象替换为其他对象。这样可以更好地控制序列化的结果，实现自定义的序列化逻辑。具体来说，<code>ReplaceTable</code>类维护了一个替换表（Replacement table），它是一个<code>Map</code>数据结构，用于存储对象的替代对应关系。在序列化过程中，当要序列化一个对象时，<code>ObjectOutputStream</code>会检查该对象是否实现了<code>writeReplace()</code>方法。若实现了此方法，<code>ObjectOutputStream</code>会调用该方法获取替代对象，并将替代对象进行序列化。如果替代对象不为<code>null</code>，则将替代对象添加到替换表中。在后续的序列化过程中，如果遇到与替换表中的对象相等的对象时，<code>ObjectOutputStream</code>会将该对象替换为替代对象进行序列化。这样可以在序列化过程中实现对象替换，更好地控制序列化结果。通过使用<code>ReplaceTable</code>类，可以在序列化过程中灵活地替换对象，实现自定义的序列化行为，例如实现对象的版本控制、对象的压缩、对象的安全性检查等。</p><h4 id="5-3-4-ObjectStreamClass"><a href="#5-3-4-ObjectStreamClass" class="headerlink" title="5.3.4 ObjectStreamClass"></a>5.3.4 ObjectStreamClass</h4><p><code>ObjectStreamClass</code> 的主要作用是提供关于类的序列化和反序列化的元数据信息。它存储了与类相关的信息，并在序列化和反序列化时使用这些信息来进行匹配和操作。通过 <code>ObjectStreamClass</code> ，我们可以了解类的版本号、类的字段信息以及类的序列化支持情况等。这使得在进行序列化和反序列化过程时，能够正确地处理对象的属性和版本兼容性。以下是其核心字段及作用：</p><table><thead><tr><th align="left">字段</th><th align="left">字段意义</th></tr></thead><tbody><tr><td align="left">Class&lt;?&gt; cl</td><td align="left">序列化类的 Class 类型</td></tr><tr><td align="left">String name</td><td align="left">序列化类的完整类名</td></tr><tr><td align="left">volatile Long suid</td><td align="left">序列化 ID，使用 volatile 关键字还可以禁止编译器进行某些优化，例如重排序。这是因为在对象序列化和反序列化的过程中，与版本号相关的操作必须按照特定的顺序进行，否则可能导致不正确的结果。</td></tr><tr><td align="left">boolean isProxy</td><td align="left">是否是代理类</td></tr><tr><td align="left">boolean isEnum</td><td align="left">是否是枚举类</td></tr><tr><td align="left">boolean serializable</td><td align="left">是否实现了 Serializable 接口</td></tr><tr><td align="left">boolean externalizable</td><td align="left">是否实现了 Externalizable 接口</td></tr><tr><td align="left">boolean hasWriteObjectData</td><td align="left">是否使用自定义的 writeObject 方法写数据</td></tr><tr><td align="left">boolean hasBlockExternalData</td><td align="left">类是否包含阻塞式外部数据，阻塞式外部数据指的是在进行对象的序列化时，如果存在某些在序列化过程中需要阻塞的外部数据（比如通过网络传输），那么阻塞式外部数据就会设置为<code>true</code>。 当<code>hasBlockExternalData</code>字段为<code>true</code>时，序列化和反序列化过程中的某些步骤可能会被阻塞，直到外部数据就绪或可用。这样可以确保在序列化和反序列化过程中正确地处理外部依赖。通过这个字段，<code>ObjectStreamClass</code>类在序列化和反序列化时可以根据需要采取相应的行动，以确保阻塞式外部数据正常处理。</td></tr><tr><td align="left">ClassNotFoundException resolveEx</td><td align="left">尝试解析类时发生的异常</td></tr><tr><td align="left">ExceptionInfo deserializeEx</td><td align="left">非枚举类反序列化异常，ExceptionInfo 也是 ObjectStreamClass 的一个内部类，表示操作类时产生的异常</td></tr><tr><td align="left">ExceptionInfo serializeEx</td><td align="left">非枚举类序列化异常</td></tr><tr><td align="left">ExceptionInfo defaultSerializeEx</td><td align="left">尝试默认序列化时引发的异常</td></tr><tr><td align="left">ObjectStreamField[] fields</td><td align="left">可序列化字段</td></tr><tr><td align="left">int primDataSize</td><td align="left">基本类型的成员字段个数，不包含被 static 和 transient 修饰的字段</td></tr><tr><td align="left">int numObjFields</td><td align="left">非基本类型的成员字段个数</td></tr><tr><td align="left">FieldReflector fieldRefl</td><td align="left">缓存与类相关联的字段反射信息。它提供了一个快速访问字段的能力，避免了每次进行字段反射访问时的性能开销</td></tr><tr><td align="left">volatile ClassDataSlot[] dataLayout</td><td align="left">类的层次结构：当前类，父类，及其所有子类的类描述</td></tr><tr><td align="left">Constructor&lt;?&gt; cons</td><td align="left">适合序列化的构造函数，如果没有，则为 null</td></tr><tr><td align="left">ProtectionDomain[] domains</td><td align="left">与类相关联的保护域（<code>ProtectionDomain</code>）的数组。这些保护域定义了在序列化和反序列化过程中对类的访问权限。<code>ProtectionDomain</code>是Java安全性机制中的一个概念，它代表了一组相关代码的安全域。每个<code>ProtectionDomain</code>都由一个代码源（code source）和一组权限（permissions）组成。当一个对象被序列化时，其类信息会被存储在序列化数据中。在反序列化过程中，为了确保安全性，Java虚拟机（JVM）必须验证反序列化的类是否具有足够的权限进行访问。这个验证过程使用了类的保护域信息。通过<code>domains</code>属性，<code>ObjectStreamClass</code>可以存储和获取与类相关联的保护域信息。这些保护域将在反序列化过程中被用于验证类的访问权限。</td></tr><tr><td align="left">Method writeObjectMethod</td><td align="left">序列化方法，通过反射获取</td></tr><tr><td align="left">Method readObjectMethod</td><td align="left">反序列化方法，通过反射获取</td></tr><tr><td align="left">Method writeReplaceMethod</td><td align="left">当一个对象被序列化时，如果该对象类中定义了<code>writeReplace()</code>方法，那么在序列化过程中将调用这个方法来确定要序列化的对象。<code>writeReplace()</code>方法负责返回实际要序列化的对象。这样可以灵活地控制对象的序列化过程。</td></tr><tr><td align="left">Method readObjectNoDataMethod</td><td align="left">如果该对象类中定义了<code>readObjectNoData()</code>方法，那么在反序列化过程中将调用这个方法进行对象的初始化。<code>readObjectNoData()</code>方法用于在反序列化之后对反序列化得到的对象进行进一步处理，以确保对象的完整性和一致性</td></tr><tr><td align="left">Method readResolveMethod</td><td align="left">当一个对象被反序列化时，如果该对象类中定义了<code>readResolve()</code>方法，那么在反序列化过程中将调用这个方法来确定实际要返回的对象。<code>readResolve()</code>方法负责返回一个替代的对象，以确保在反序列化后得到的对象与原始对象保持一致。</td></tr><tr><td align="left">ObjectStreamClass localDesc</td><td align="left">当前类描述</td></tr><tr><td align="left">ObjectStreamClass superDesc</td><td align="left">父类描述</td></tr><tr><td align="left">boolean initialized</td><td align="left">对象是否已经初始化完成</td></tr></tbody></table><h3 id="5-4-ObjectInputStream"><a href="#5-4-ObjectInputStream" class="headerlink" title="5.4 ObjectInputStream"></a>5.4 ObjectInputStream</h3><p><code>java.io.ObjectInputStream</code> 是实现Java反序列化的关键类，和 <code>ObjectOutputStream</code> 是对应的，内部包含了 <code>BlockDataInputStream</code>、<code>HandleTable</code>、<code>ReplaceTable</code>、<code>ObjectStreamClass</code> 等，这里不展开描述。</p><h2 id="6-Java-序列化原理"><a href="#6-Java-序列化原理" class="headerlink" title="6. Java 序列化原理"></a>6. Java 序列化原理</h2><p>以上，我们了解到了 java 实现序列化的方式，以及序列化过程中会用到的核心类&#x2F;接口，接下来我们需要知道Java序列化的流程、原理，以及各种类型数据进行Java序列化后的格式和占用空间大小等细节，这也是序列化技术的核心所在。不同序列化方案的技术细节不尽相同，对各种数据类型处理后的格式和大小也不尽相同。</p><h3 id="6-1-基本类型数据序列化流程"><a href="#6-1-基本类型数据序列化流程" class="headerlink" title="6.1 基本类型数据序列化流程"></a>6.1 基本类型数据序列化流程</h3><p>在学习基本类型的序列化流程之前，我们先回顾两个知识点</p><ol><li>Java 中基本数据类型有几种，及其长度</li></ol><table><thead><tr><th>数据类型</th><th>字节长度</th></tr></thead><tbody><tr><td>int</td><td>4字节（-2,147,483,648 到 2,147,483,647）</td></tr><tr><td>long</td><td>8字节（-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807）</td></tr><tr><td>double</td><td>8字节（IEEE 754双精度浮点数）</td></tr><tr><td>char</td><td>2字节（无符号Unicode字符，以UTF-16编码表示，可存储一个unicode字符）</td></tr><tr><td>byte</td><td>1字节（-128 到 127）</td></tr><tr><td>boolean</td><td>1 位，只能是 true 或者 false</td></tr><tr><td>short</td><td>2字节（-32,768 到 32,767）</td></tr><tr><td>float</td><td>4字节（IEEE 754单精度浮点数）</td></tr></tbody></table><ol start="2"><li>字节的高低位</li></ol><p>在计算机中，一个字节由8个位（bit）组成。在一个字节中的每个位都有特定的位置。位可以被编号，从最右边的位（称为最低有效位）开始，往左依次递增编号，最左边的位称为最高有效位，也称为高位。其实这个很好理解，在电视上我们也见过支票，支票的金额就是从左往右写的</p><p><img src="/../images/D4zoDNdPDaHmkVdGgKk2J9Uh.jpg" alt="iShot_2023-07-30_09.06.14.jpg"></p><p>比如上面这张图，在右边的金额栏，从左往右依次是高单位到低单位，所以最左边的就是高位，最右边的就是低位。</p><p>字节的高位和低位术语通常用于表示多字节数据类型（如整数）的个别字节在内存中的存储顺序。在多字节的数据类型中，数据在内存中以连续的字节序列存储，而字节序列的顺序可以是”大端”或”小端”。</p><ul><li>大端字节序：最高有效位存储在起始地址，最低有效位存储在最后地址。</li><li>小端字节序：最低有效位存储在起始地址，最高有效位存储在最后地址。</li></ul><p>举个例子，假设一个整数值0x12345678在内存中按照大端字节序存储。将这个整数值转换为字节序列时，高位字节0x12存储在起始地址，低位字节0x78存储在最后地址。</p><p>地址:  0             1          2          3       </p><p>​     |  0x12 | 0x34 | 0x56 | 0x78 |</p><p>相反，如果按照小端字节序存储，高位字节0x78存储在起始地址，低位字节0x12存储在最后地址。</p><p>地址:  0             1           2         3       </p><p>​     |  0x78 | 0x56 | 0x34 | 0x12 |</p><p>在Java中，默认使用的是采用大端字节序（Big Endian）的内存存储模式。这意味着在多字节数据类型（如int、long、float、double等）存储在内存中时，最高有效字节存储在起始地址，按顺序向后存储。</p><p>回顾完上面两个问题，我们继续看 Java 是如何序列化基本类型数据的，Java序列化对基本类型数据的处理，严格按照其内存占用大小来进行。比如int类型占用4字节，Java 序列化按照高位到低位依次放到字节数组，再写入到序列化输出对象，真正的写入是通过调用 <code>BlockDataOutputStream</code> 的 <code>writeInt</code> 方法实现的。<code>BlockDataOutputStream</code> 内部维护了一个1024字节大小的缓冲区，如果缓冲区还可以容纳待写入的 int 类型数据，则把当前数据放入缓冲区；如果缓冲区不能容纳待写入的int类型数据，则调用 <code>DataOutputStream</code> 的 <code>writeInt</code> 方法，如以下代码所示：</p><p><img src="/../images/4Qb15TfgRvpQVzKXeovi4x6n.jpg" alt="iShot_2023-07-30_08.42.21.jpg"></p><p>接下来我们看下 <code>DataOutputStream</code> 的<code> writeInt()</code> 方法是如何写 int 类型数据的</p><p><img src="/../images/GT5b8caHzuYKzwVp3UELmE1J.jpg" alt="iShot_2023-07-30_08.46.04.jpg"></p><p>我们可以逐步看下这几段代码的含义：</p><ol><li>out.write(): 很明显这是一个写入操作，可以将内容写入文件或者套接字。</li><li>v &gt;&gt;&gt; 24: 这是一个无符号右移操作符，将v向右移动24位（int 长度 4 字节，即 32 位，从第一个字节(8位)开始向右移动24 位即可达到最低位 32 ）。右移操作是将二进制表示中的各位数值向右移动指定的位数，右边的空位用零填充。无符号右移运算符保证移位后左边空出的位总是用零填充。在这个表达式中，我们将整数v的最高8位移动到最低8位，并将其余位数清零，这样就可以提取一个 int 类型变量的最高有效字节的值，而不考虑符号位。</li><li>&amp; 0xFF: 这是一个按位与操作符，将上一步的结果与0xFF（十进制为255）进行按位与操作。0xFF的二进制表示为 00000000 00000000 00000000 11111111。这个操作可以确保结果只保留v最高的8位，将其他位数清零。</li></ol><p>从上面的代码我们可以看出，确实是按照从高到低的顺序来写入的。我们继续看 <code>out.write()</code> 做了什么(在当前流程中，out 是 BlockDataOutputStream 实例)</p><p><img src="/../images/nnhkeZR9xVtXQ4HnDPLJKW8n.jpg" alt="iShot_2023-07-30_09.19.46.jpg"></p><p><img src="/../images/SvQVRsCFmpzJeBTjx6ELCScy.jpg" alt="iShot_2023-07-30_09.21.17.jpg"></p><p>如果缓冲区能容纳当前待写入字节，则把当前字节写入缓冲区；如果缓冲区已满，则会先执行 drain 方法把缓冲区的数据输出，再把当前待写入字节放到缓冲区。通过上述流程，一个 int 类型的数据就写完了，其他类型数据流程类似，此处不做展开。</p><h3 id="6-2-对象类型数据序列化流程"><a href="#6-2-对象类型数据序列化流程" class="headerlink" title="6.2 对象类型数据序列化流程"></a>6.2 对象类型数据序列化流程</h3><p>学习完基本类型的序列化流程，我们来看下对象类型的数据是怎么被序列化的。Java序列化对非基本类型的数据处理比基本类型的数据处理更复杂，这里说的非基本类型包括Object、Enum、Array等。Java序列化对非基本类型数据的序列化操作是通过 <code>ObjectOutputStream</code> 的 <code>writeObject</code> 方法实现的，接下来将介绍其内部工作原理。</p><p>我们先看下 <code>writeObjet</code> 方法定义</p><p><img src="/../images/DPzF8Spr8Y1DeJAGaAyFxfgd.jpg" alt="iShot_2023-07-30_09.25.21.jpg"></p><p>首先检查是否启用了对象写入的重写功能。如果启用了，将调用<code>writeObjectOverride</code>方法，并立即返回。这个条件语句允许自定义的子类重写写入对象的逻辑。obj表示自定义的序列化对象或者Array、Enum类型对象。<code>writeObject0</code> 方法的第2个参数表示一个对象被多个对象共同引用时，在序列化的时候是否要共享写入。如果共享写入，被引用的对象实例只会被序列化一次，其他引用只会写入引用对象句柄。如果不共享写入，被引用的对象实例则会被序列化多次，序列化后的数据大小会增加。在 <code>writeObject</code> 方法里调用 <code>writeObject0</code>，第2个参数默认是false，表示共享写入。</p><p>我们继续看下 <code>writeObject0</code> 里面是如何处理非基本类型数据的。</p><p><img src="/../images/rGryaNJzbY1qfN2fLNPeMoU9.jpg" alt="iShot_2023-07-30_09.36.33.jpg"></p><p>代码比较简单，就是判断 obj 的类型，然后分别调用对应的处理方法，其实如果大家有翻过 String 或者 Enum 的源码，就会发现，这两个类也是实现了 <code>Serializable</code> 接口的，表示这些类都能被正常的序列化。对于Array对象，如果Array的元素是基本类型，则调用基本类型的序列化方式；如果Array的元素是Object类型，则递归调用writeObject0方法来执行序列化，又会执行到上述if分支判断。 如果是自定义的序列化类，则必须实现自Serializable。<br>总之，要能够被 <code>ObjectOutputStream</code> 的 <code>writeObject</code> 方法序列化，对象必须实现自Serializable，否则会抛NotSerializableException异常。 如果是自定义的序列化类，则会执行 <code>writeOrdinaryObject</code> 方法。</p><p>我们看下 <code>writeOrdinaryObject</code> 这个方法是如何处理我们自定义的序列化类的。</p><p><img src="/../images/zit43xT8vvpH2TSrFCk4WaJE.jpg" alt="iShot_2023-07-30_09.47.04.jpg"></p><p>如果自定义的类是 Externalizable 类型并且不是代理类，则调用writeExternalData方法；否则调用writeSerialData方法。Exernalizable继承自Serializable，并增加了writeExternal和readExternal两个接口。我们继续跟进 <code>writeSerialData</code>方法。</p><p><img src="/../images/pHupFXsgkCUmToA3Xn1ZqSaH.jpg" alt="iShot_2023-07-30_09.49.33.jpg"></p><p>首先获取 obj 对象的布局信息，<code>getClassDataLayout()</code> 表示获取当前类及继承链路上所有直接或间接实现了Serializable的祖先类对应的序列化元数据信息，返回值为ClassDataSlot类型数组，数组元素的顺序是从最根部的祖先类到当前类。ClassDataSlot包含了一个ObjectStreamClass类型的desc字段和boolean类型的hasData字段。ObjectStreamClass类前面已经提过，hasData字段表示desc对应的Java对象是否有数据被序列化。对于ClassDataSlot数组的每一个元素，如果该元素对应的类包含writeObject方法，则调用writeObjet方法。通过查看ObjectStreamClass里的invokeWriteObject方法内部实现，可以看出wirteObject方法以反射方式被调用，代码如下所示。</p><p><img src="/../images/Jaou5jiRioCwnQy7rMkzizdY.jpg" alt="iShot_2023-07-30_09.53.31.jpg"></p><p>回到writeSerialData方法内部实现，如果当前待序列化的类没有writeObject方法，则调用defaultWriteFields方法实现序列化，其内部实现如以下代码所示。</p><p><img src="/../images/xk3DXSuHLEZe6h1gWBdsZTao.jpg" alt="iShot_2023-07-30_09.55.58.jpg"></p><p>流程也比较简单，就是分开处理基本类型和对象类型的数据，其实没有 writeObject() 方法的类，但是还需要序列化的，我们很明显就知道是实现了 Serializable 接口的类，这也就是为什么你实现了这个序列化接口，但是无需实现序列化方法的原因。</p><p>回到writeOrdinaryObject方法实现，如果自定义类实现了Externalizable且不是动态代理类，则会调用writeExternalData方法实现序列化，核心代码如下所示。</p><p><img src="/../images/Eqhuh4qAQWUGvqxbxvSAN7um.jpg" alt="iShot_2023-07-30_10.00.30.jpg"></p><p>代码最终调用自定义类对象的writeExternal方法实现写入，看起来比Serializable类更简洁，原因是Externalizable接口中包含了readExternal和writeExternal方法，实现了Externalizable的子类必须覆盖readExternal和writeExternal方法。</p><h2 id="7-Java-序列化高级特性"><a href="#7-Java-序列化高级特性" class="headerlink" title="7. Java 序列化高级特性"></a>7. Java 序列化高级特性</h2><h3 id="7-1-transient-关键字"><a href="#7-1-transient-关键字" class="headerlink" title="7.1 transient 关键字"></a>7.1 transient 关键字</h3><p>Java序列化可以通过transient关键字来控制字段不被序列化。通过跟进ObjectStreamClass的getDefaultSerialFields方法内部实现，可以看到序列化字段不能为static 且不能为 transient，如以下代码所示：</p><p><img src="/../images/7J2xJTK42JMS8aEvQswTH1Ta.jpg" alt="iShot_2023-07-30_10.11.25.jpg"></p><h3 id="7-2-static-关键字"><a href="#7-2-static-关键字" class="headerlink" title="7.2 static 关键字"></a>7.2 static 关键字</h3><p>static字段属于类全局共有，不会被序列化。在反序列化得到的结果里，静态变量的值依赖类对该静态字段的初始化操作以及是否在同一个JVM进程内。比如说静态变量初始值为0，在序列化之前静态变量的值被设置为10，在同一个JVM进程内执行反序列化操作，得到的静态变量的值为10。如果在另外一个JVM进程内执行反序列化操作，得到的静态变量的值为0。这是因为类在JVM进程内只会被加载一次，相同的类在不同的JVM内都会初始化一遍。</p><h3 id="7-3-serialVersionUID"><a href="#7-3-serialVersionUID" class="headerlink" title="7.3 serialVersionUID"></a>7.3 serialVersionUID</h3><p>serialVersionUID用来实现类版本兼容，在实际开发中能满足类字段变化的需求。如果我们有一个 Person 类，实现了 Serializable 接口，但是没有定义serialVersionUID字段，对Person类增加一个double类型的字段height，再读取增加字段之前的序列化数据，反序列化会报<code>InvalidCastException</code> 异常。如果Person类定义了serialVersionUID字段，对Person类增加一个double类型的字段height，再读取增加字段之前的序列化数据，反序列化可以成功。<br> serialVersionUID字段必须是 <code>static+final</code> 类型，否则serialVersionUID字段不会被序列化，通过 <code>ObjectStreamClass</code> 的 <code>getDeclaredSUID</code> 方法实现可以得到验证:</p><p><img src="/../images/fLhYY1UfUXYaYS8Sib2GqewM.jpg" alt="iShot_2023-07-30_10.14.50.jpg"></p><p>如果不定义serialVersionUID字段，Java序列化会根据类字段和其他上下文计算一个默认值。所以，当类字段发生变化时，serialVersionUID值也会跟着变化，就会出现上述因类字段变化导致反序列化失败的问题。在Java编码规范中，应该强制自定义的序列化类包含serialVersionUID字段，各个Java IDE开发工具均能配置针对serialVersionUID的检查告警级别。</p><h3 id="7-4-序列化-反序列化hook"><a href="#7-4-序列化-反序列化hook" class="headerlink" title="7.4 序列化&#x2F;反序列化hook"></a>7.4 序列化&#x2F;反序列化hook</h3><h4 id="7-4-1-writeReplace-方法"><a href="#7-4-1-writeReplace-方法" class="headerlink" title="7.4.1 writeReplace 方法"></a>7.4.1 writeReplace 方法</h4><p>writeReplace方法用于序列化写入时拦截并替换成一个自定义的对象。这个方法也是在 ObjectStreamClass 类中被反射获取的</p><p><img src="/../images/T499tgA9fZSSP5p9PPyYbTxV.jpg" alt="iShot_2023-07-30_10.24.33.jpg"></p><p>由于writeReplace方法调用是基于反射来执行的，所以作用域限定符不受限制，可以是private、default、protected、public中的任意一种。 如果定义了wirteReplace方法，就没必要再定义writeObject方法了。即使定义了writeObject方法，该方法也不会被调用，内部会先调用writeReplace方法将当前序列化对象替换成自定义目标对象。同理，也没必要定义readObject方法，即使定义了也不会被调用。writeReplace方法的生效原理见ObjectOutputStream的writeObject0方法实现，核心代码如下所示。</p><p><img src="/../images/6LkQhoJM6ZDiYWqgZ2Ugg8Yp.jpg" alt="iShot_2023-07-30_10.28.19.jpg"></p><h4 id="7-4-2-readReplace-方法"><a href="#7-4-2-readReplace-方法" class="headerlink" title="7.4.2 readReplace 方法"></a>7.4.2 readReplace 方法</h4><p>readResolve方法用于反序列化拦截并替换成自定义的对象。但和writeReplace方法不同的是，如果定义了readResolve方法，readObject方法是允许出现的。同样的，readResolve 方法也是在 ObjectStreamClass 类中被反射获取的。</p><p>readResolve方法的工作原理为： </p><ul><li>首先调用readObject0方法得到反序列化结果。 </li><li>如果readResolve方法存在，则会调用该方法返回自定义的对象。 </li><li>将自定义的对象作为ObjectInputStream的readObject的返回值。</li></ul><p>readResolve方法用在什么场景呢？常见的一种场景是类实现的枚举类型，枚举对象在反序列化时做恢复性保护。对于类实现的枚举类型，反序列化出来的枚举对象期望是定义的枚举对象，这也体现了枚举的意义。但是从代码执行情况看，反序列化出来的的枚举对象是一个新建出来的枚举对象，虽然值和枚举值定义的一样，但不是同一个对象。因此，需要在反序列化的过程中对枚举对象进行恢复保护，readResolve方法就派上用场了。示例如下：</p><p>未使用 readResolve 方法前：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oppo.serializedemo.pojo.po;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wick</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/7/29 22:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneType</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">PhoneType</span> <span class="variable">OPPO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PhoneType</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">PhoneType</span> <span class="variable">VIVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PhoneType</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;phoneType.out&quot;</span>)));</span><br><span class="line">        os.writeObject(PhoneType.OPPO);</span><br><span class="line">        os.close();</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;phoneType.out&quot;</span>)));</span><br><span class="line">        <span class="type">PhoneType</span> <span class="variable">phoneType</span> <span class="operator">=</span> (PhoneType) is.readObject();</span><br><span class="line">        System.out.println(phoneType == PhoneType.OPPO); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加 readResolve 方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oppo.serializedemo.pojo.po;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wick</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/7/29 22:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneType</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">PhoneType</span> <span class="variable">OPPO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PhoneType</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">PhoneType</span> <span class="variable">VIVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PhoneType</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> OPPO;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> VIVO;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;phoneType.out&quot;</span>)));</span><br><span class="line">        os.writeObject(PhoneType.OPPO);</span><br><span class="line">        os.close();</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;phoneType.out&quot;</span>)));</span><br><span class="line">        <span class="type">PhoneType</span> <span class="variable">phoneType</span> <span class="operator">=</span> (PhoneType) is.readObject();</span><br><span class="line">        System.out.println(phoneType == PhoneType.OPPO); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5-数据校验"><a href="#7-5-数据校验" class="headerlink" title="7.5 数据校验"></a>7.5 数据校验</h3><p>Java序列化机制在反序列化时支持对数据进行校验。这是因为Java序列化后的数据是明文形式，有可能被修改。在反序列化过程中，为了安全起见，可以对读取到的数据进行校验。默认的Java反序列化是不会校验数据的。 使用数据校验特性，需要让自定义的序列化类实现 <code>java.io.ObjectInputValidation</code> 接口，通过调用回调函数 <code>validateObject</code> 来实现数据验证。此处给出示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oppo.serializedemo.pojo.po;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wick</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/7/30 10:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, ObjectInputValidation &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validateObject</span><span class="params">()</span> <span class="keyword">throws</span> InvalidObjectException &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(name, <span class="string">&quot;zhangSan&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;用户已经被禁用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        in.defaultReadObject(); <span class="comment">// 执行默认的反序列化操作</span></span><br><span class="line">        validateObject(); <span class="comment">// 在反序列化完成后进行对象验证</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangSan&quot;</span>);</span><br><span class="line">        os.writeObject(user);</span><br><span class="line">        os.close();</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">        <span class="comment">// 在此处就会抛出异常：java.io.InvalidObjectException: 用户已经被禁用</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> (User) is.readObject();</span><br><span class="line">        is.close();</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-选择-Serializable-还是-Externalizable"><a href="#8-选择-Serializable-还是-Externalizable" class="headerlink" title="8 选择 Serializable 还是 Externalizable"></a>8 选择 Serializable 还是 Externalizable</h2><p>在Java序列化应用方面，读者应该会困惑两种机制应选择哪种。从功能角度看，二者都是Java序列化已经支持的。从易用性方面来考虑，Serializable比Externalizable易用性好。首先，Serializable提供了默认的序列化与反序列化行为，用户不需要关注序列化的实现细节即可拿来使用；而Externalizable必须实现readExternal和writeExternal接口且要提供默认构造函数。其次，在自定义序列化行为方面，Serializable也可以通过readObject和writeObject来支持。 对于初学者或者对自己代码水平没啥自信的同学，可以优先选择Serializable。从很多JDK源码和开源代码中可以看到，序列化接口都实现自Serializable。在继承链路上，如果要终止一个子类的Serializable或者Externaizable特性，则在readObject&#x2F;writeObject方法或readExternal&#x2F;writeExternal方法接口里抛出 <code>UnsupportedOperationException</code> 异常，表示不支持序列化和反序列化功能。</p><h2 id="9-Java序列化安全"><a href="#9-Java序列化安全" class="headerlink" title="9. Java序列化安全"></a>9. Java序列化安全</h2><p>Java序列化后的数据是明文形式，而且数据的组成格式有明确的规律。当这些数据脱离Java安全体系存在磁盘中时，可以通过二进制数编辑工具查看，甚至修改。如果这些数据注入了病毒，应用程序的表现行为将无法预计。为了保障数据的安全性，引入SealedObject和SignedObject对序列化数据进行加密。</p><h3 id="9-1-SealedObject"><a href="#9-1-SealedObject" class="headerlink" title="9.1 SealedObject"></a>9.1 SealedObject</h3><p>以下演示如何使用 SealedObject 来保证序列化&#x2F;反序列化安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oppo.serializedemo.pojo.po;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SealedObject;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wick</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/7/30 10:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> KeyGenerator.getInstance(<span class="string">&quot;DESede&quot;</span>).generateKey();</span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;DESede&quot;</span>);</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangSan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">SealedObject</span> <span class="variable">sealedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SealedObject</span>(user, cipher);</span><br><span class="line">        os.writeObject(sealedObject);</span><br><span class="line">        os.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用二进制工具查看 user 文件，发现跟我们之前未加密的数据不一样，连基本字段和值都看不到了</p><p><img src="/../images/eKGGeVsFyVRtbWwq9U8874nm.jpg" alt="iShot_2023-07-30_11.16.58.jpg"></p><p>我们直接使用 ObjectInputStream 反序列化一下试试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oppo.serializedemo.pojo.po;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SealedObject;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wick</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/7/30 10:45</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> KeyGenerator.getInstance(<span class="string">&quot;DESede&quot;</span>).generateKey();</span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;DESede&quot;</span>);</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangSan&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">SealedObject</span> <span class="variable">sealedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SealedObject</span>(user, cipher);</span><br><span class="line">        os.writeObject(sealedObject);</span><br><span class="line">        os.close();</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">        <span class="type">SealedObject</span> <span class="variable">sealedObject1</span> <span class="operator">=</span> (SealedObject) is.readObject();</span><br><span class="line">        is.close();</span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> (User) sealedObject1.getObject(key);</span><br><span class="line">        System.out.println(u1); <span class="comment">// User(name=zhangSan, age=18)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们就通过一个加密&#x2F;解密的手段来保护了对象在序列化&#x2F;反序列化过程中的安全。</p><h3 id="9-2-SignedObject"><a href="#9-2-SignedObject" class="headerlink" title="9.2 SignedObject"></a>9.2 SignedObject</h3><p>SignedObject 也是通过加解密的方式来保护序列化安全的，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oppo.serializedemo.pojo.po;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPairGenerator;</span><br><span class="line"><span class="keyword">import</span> java.security.Signature;</span><br><span class="line"><span class="keyword">import</span> java.security.SignedObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: wick</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/7/30 11:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;account&quot;</span>));</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;RSA&quot;</span>).generateKeyPair();</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="string">&quot;zhangSan&quot;</span>, <span class="number">1000.0</span>);</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(account, keyPair.getPrivate(), Signature.getInstance(<span class="string">&quot;SHA256withRSA&quot;</span>));</span><br><span class="line">        os.writeObject(signedObject);</span><br><span class="line">        os.close();</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;account&quot;</span>));</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject1</span> <span class="operator">=</span> (SignedObject) is.readObject();</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account1</span> <span class="operator">=</span> (Account) signedObject1.getObject();</span><br><span class="line">        System.out.println(account1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-总结"><a href="#10-总结" class="headerlink" title="10. 总结"></a>10. 总结</h2><p>Java序列化方案成熟度高，但性能和压缩效果均一般，只适合JVM系列语言共享数据，不具备完全的跨语言能力。另外，它会带来一些数据安全性和完整性问题。在我们真正的 web 开发过程中，基本不会去使用以上的序列化方式，而是往往会选择具有跨语言能力、性能高效、压缩效果显著的方案，例如Thrift、Protocol Buffer、Json、Xml 等。但是了解 Java 的序列化&#x2F;反序列化过程，对于程序员能力的提升，还是有较大的意义。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-技术背景&quot;&gt;&lt;a href=&quot;#1-技术背景&quot; class=&quot;headerlink&quot; title=&quot;1. 技术背景&quot;&gt;&lt;/a&gt;1. 技术背景&lt;/h2&gt;&lt;p&gt;​	互联网的迅猛发展受益于网络通信技术的成熟和稳定。网络通信协议是机器双方共同约定的协议。在应用层看到的</summary>
      
    
    
    
    
    <category term="Java" scheme="https://linvaux.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter源码系列(3) - Jmeter 类详解-start方法，Jmeter 真正的启动过程</title>
    <link href="https://linvaux.github.io/2024/07/26/Jmeter%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97-3-Jmeter-%E7%B1%BB%E8%AF%A6%E8%A7%A3-start%E6%96%B9%E6%B3%95%EF%BC%8CJmeter-%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>https://linvaux.github.io/2024/07/26/Jmeter%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97-3-Jmeter-%E7%B1%BB%E8%AF%A6%E8%A7%A3-start%E6%96%B9%E6%B3%95%EF%BC%8CJmeter-%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</id>
    <published>2024-07-26T14:07:00.000Z</published>
    <updated>2024-07-26T14:13:49.599Z</updated>
    
    <content type="html"><![CDATA[<p>在开始讲 start 方法前，大家先考虑一个问题，Jmeter 启动时带不带参数有什么影响？我们可以带着这个问题往下看。</p><h2 id="Jmeter启动参数是如何传递的？"><a href="#Jmeter启动参数是如何传递的？" class="headerlink" title="Jmeter启动参数是如何传递的？"></a>Jmeter启动参数是如何传递的？</h2><p>在前面两篇文章中，已经跟大家非常详细的介绍了 Jmeter 启动时会做什么，回顾一下就是：</p><ol><li>调用 NewDriver.main(String[] args) 方法，此方法会反射调用 Jmeter.start(String[] args) 方法。</li><li>在执行 Jmeter.start(String[] args) 方法前，Jmeter 类现需要实例化，这个类中包含了非常多的静态常量，绝大多数都是跟启动参数相关，这些参数会在类实例化时也被初始化掉。</li></ol><p>那么这些参数是从哪来的呢？其实入口就是 NewDriver.main(String[] args) ，这个方法的参数列表可以从 Jmeter 的启动脚本获取，也可以通过执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ApacheJMeter.jar xxx 来启动</span><br></pre></td></tr></table></figure><p>后面的 xxx 表示的就是启动参数，跟执行以下命令效果一样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmeter xxx</span><br></pre></td></tr></table></figure><p>我们可以通过查看 Jmeter &#x2F;bin 目录下的 jmeter 脚本来验证这个过程，以下内容是 JMeter 在 mac 下的启动脚本，其中只保留了最后几行内容，其他系统下的脚本内容也是类似，就不在此处展开解释。<br><img src="/../images/hvUygdpNKPX9BwJzn3NiMk7v.png" alt="image.png"><br>这段脚本其实很简单，就是判断 JMETER_COMPLETE_ARGS 这个变量是不是为空，用来控制 ARGS 参数值，最后一行就是很普通的 java 应用启动命令，后面的 “$@” 是一个特殊变量，用于表示所有向脚本传递的位置参数（命令行参数）。具体来说，$@ 会将所有的位置参数作为一个单独的字符串列表返回。每个位置参数会被当作一个独立的字符串，在使用时可以通过遍历 $@ 获取每个参数。需要注意的是，”$@” 使用双引号括起来时，会将每个位置参数作为独立的字符串处理，保留参数中的空格和特殊字符。这样可以确保传递参数时的正确性，在处理包含空格或特殊字符的参数时非常有用。</p><p>顺便提一句，上面判断了 JMETER_COMPLETE_ARGS 是为了给 Java9 单独设置一些启动参数，因为在 Java 9 之前的版本中，可以使用标准的 JAVA_OPTS 环境变量来设置 Java 虚拟机的选项。然而，从 Java 9 开始，Oracle 官方建议使用 JAVA_TOOL_OPTIONS 环境变量来设置 Java 应用程序的选项，以便与新的模块化系统和命令行标志兼容。为了确保 JMeter 在不同版本的 Java 中都能正常运行，并且可以方便地配置 Java 9 相关的选项，此处单独处理了 Java 9 的选项设置。通过使用 JAVA9_OPTS 环境变量存储 Java 9 相关的选项，并将其与其他选项拼接到 ARGS 字符串中，以便将这些选项传递给 JMeter 启动脚本。这种单独处理 Java 9 的选项，能够更好地适应不同版本的 Java，并确保在升级或切换 Java 版本时不会影响到 JMeter 的启动脚本和选项设置。这样做的目的是为了提高 JMeter 的兼容性和可移植性。</p><p>ok，那现在我们知道了，NewDeriver.main(String[] args) 会接受命令行参数，然后 main 方法再反射调用 Jmeter.start(String[] args) 时，也会把参数传递下去，代码如图所示：<br><img src="/../images/EexSxwSzkJsBEGauLE2kJANm.png" alt="image.png"><br>invoke 方法第二个参数 args 就是 main 方法接收到的参数，这就完成了参数从命令行传递给 Jmeter 的过程，在实例化 Jmeter 时，这些参数又被 CLOptionDescriptor 类处理了一次，从一堆字符串变成了一个对象，方便 Jmeter 更好的处理参数，那接下来我们迎来了本文章的重点：Jmeter.start(String[] args) 方法到底做了什么？</p><h2 id="Jmeter-是如何启动的？"><a href="#Jmeter-是如何启动的？" class="headerlink" title="Jmeter 是如何启动的？"></a>Jmeter 是如何启动的？</h2><p>在解释代码之前，大家有没有发现一个现象：</p><p>当我们什么启动参数都不带时，Jmeter 会直接以 GUI 模式启动，我们可以写脚本调试，甚至直接开始测试，也可以不跑测试，写个脚本就把它关掉。但是当我们使用 cli 时，就可以直接传递一个 jmx 脚本给 Jmeter，这时 Jmeter 就会直接开始测试。这两种方式是如何实现的呢？</p><p>如果大家有观察过这个现象，那接下来的内容会非常容易理解，因为这涉及到了 Jmeter 的 2 种启动模式：</p><ol><li>startGui</li><li>startNonGui</li></ol><p>但是这个时候大家会疑惑，之前不是说 Jmeter 有三种启动模式么，分别是：GUI，NON-GUI, SERVER，为啥到这边又成了 2 种了？</p><p>其实，这前后并没有矛盾，因为 SERVER 和 NON-GUI 模式都是属于 NON-GUI 的方式启动，我们此处只是讨论 Jmeter 在启动时的宏观表现，即有没有图形界面。</p><p>接下来，我们就开始从代码出发，看下 Jmeter 真正的启动过程。</p><h3 id="1-命令行参数校验"><a href="#1-命令行参数校验" class="headerlink" title="1.命令行参数校验"></a>1.命令行参数校验</h3><p><img src="/../images/Yor8kSTZiyTNFWsoY66cWa99.png" alt="image.png"><br>在进入 start 方法后，会先对命令行参数的组合进行判断，如果参数组合不支持，则生成一个 error 信息，然后判断 error 是否为 null，如果有错误信息，则停止启动，并在控制台输出错误信息。</p><h3 id="2-初始化运行环境"><a href="#2-初始化运行环境" class="headerlink" title="2.初始化运行环境"></a>2.初始化运行环境</h3><p>参数校验通过之后，Jmeter 会进行运行环境初始化，虽然 NewDriver 已经初始化过一次(主要做类加载)，但是 Jmeter 会做更细致的初始化动作，以下是 Jmeter 初始化内容<br><img src="/../images/qdEYUhWxbfUiPnBbEFXKR3g2.png" alt="image.png"></p><ol><li>初始化 Properties：实现方法为 Jmeter.initializeProperties(CLArgsParser parser) 方法。首先检查用户是否通过 -p 参数设置了 property 文件，如果没有设置，则直接使用 bin&#x2F;jmeter.properties 文件。其次设置 Jmeter 语言环境，设置 JmeterHome，还有就是读取 user.properties，system.properties 以及用户通过命令行参数自己指定的 property 文件，最后设置下日志等级。</li><li>添加安全提供程序：根据给定的 Properties 对象，筛选匹配特定模式的键值对，并按照键的顺序逐个调用 addSecurityProvider 方法，作用是：(1)扩展功能：通过添加安全提供程序，可以扩展 Java 程序的加密、签名、哈希等安全功能，使其支持更多的算法和标准。这样，程序就可以使用更多安全服务来满足特定的需求。(2)第三方库或协议支持：有些第三方库或协议可能需要特定的加密、签名或认证机制。通过添加相应安全提供程序，可以为这些库或协议提供所需的支持，确保程序能够与它们进行兼容性的交互。(3)安全策略和规范：在某些情况下，出于安全策略和规范的考虑，需要使用特定的安全提供程序来确保符合特定的安全要求。通过添加这些提供程序，可以实施和遵循特定的安全标准。</li><li>设置默认的未捕获异常处理器：当发生未捕获异常时，使用注册的异常处理器进行处理，即在控制台输出异常信息。</li><li>设置代理：因为用户可以通过命令行参数设置代理服务器，代码比较简单，就不展开讲解了，知道是做什么就行了。</li><li>更新加载的类：又去把一堆类加载进来，核心还是调用 NewDriver.addURL(path); 方法。此处不展开讲解。</li><li>设置几个属性：设置开始时间，开始日期，以及开始的时分秒，但是感觉没啥鸟用，连注释都写了：Set some (hopefully!) useful properties，意思就是希望这几个参数你能用得上。</li></ol><h3 id="3-Jmeter-真正的启动"><a href="#3-Jmeter-真正的启动" class="headerlink" title="3.Jmeter 真正的启动"></a>3.Jmeter 真正的启动</h3><p><img src="/../images/CQMWP4PUfdmWPP8qz3jxtYP2.png" alt="image.png"></p><ol><li>首先，判断用户有没有使用 -s 参数，如果用了这个参数，则使用 Server 模式启动。下面还有个 startOptionalServers(); 方法，其实不管是哪种启动方式，都会执行这个方法，它的作用就是根据配置启动可选的 Beanshell 服务器和 Mirror 服务器。Beanshell 服务器提供了自定义逻辑的执行能力，而 Mirror 服务器则用于模拟外部服务器行为。通过这些服务器，用户可以在测试期间执行自定义逻辑和模拟环境，以满足特定的测试需求。<br><img src="/../images/zYmVN7Z9JPQ3sJtPKT6pcsUy.png" alt="image.png"></li><li>接下来判断是否使用了 -t 和 -g 两个参数，-t 用来指定 jmx 文件，-g 用来生成报告。注意，此时并没有真的把 jmx 文件加载进 Jmeter，更没有生成报告，只是做了参数的赋值操作。<br><img src="/../images/5rybjpANSZ2HLT95ww7XHXYU.png" alt="image.png"></li><li>继续判断是否使用了 -n 参数，如果没有使用这个参数，则会启动图形界面。在启动图形界面前，会先调用PluginManager.install(this, true);方法来加载插件，还记得之前讲过Jmeter 实现了JMeterPlugin 接口么？作用就在此处体现了，要去加载 Jmeter 的图标和其他的资源文件。然后就会真正的启动 GUI 了，同时会在控制台打印一段熟悉的内容<br><img src="/../images/2dgPAadi6mePAaC53Yc2YGnd.png" alt="image.png"><br>此时，Jmeter 通过图形界面真正的启动了，当然如果你在启动前指定了 jmx 文件，那么 Jmeter 打开之后，就会默认加载这个文件，否则就是默认新建 TestPlan 的页面。</li><li>如果用户使用了 -n 参数，则说明要使用 NON-GUI 启动。启动流程也很简单，先检查下几个文件夹能不能正常写入，比如通过 -o 参数指定的报告文件夹，Jmeter 默认的报告输出文件夹等。然后就是检查是否通过 -R 指定了远程执行的机器，通过 -t 生成 jtl 文件，再检查使用了 -e 参数之后，-t 参数是不是为 null，如果没有指定要生成 jtl 文件，但是要求生成报告的话，则会抛异常，因为 Jmeter 的报告就是通过解析 jtl 文件得到的，具体是怎么生成的，会在后面的章节中跟大家探讨。最后调用 startNonGui()方法来启动无界面模式的 Jmeter。<br><img src="/../images/jbcBHRdNqJKxcFiKjzdndZVZ.png" alt="image.png"></li></ol><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><p>至此，让我们通过一张图来了解下 Jmeter 的启动过程</p><p><img src="/../images/fAzxzWRan2TnVisiiFA3HQMY.png" alt="image.png"></p><p>此时，Jmeter 算是真正的启动起来了，因为 GUI 模式启动涉及到大量关于 Java Swing 的内容，不在本文章讨论范围内，我会主要从 NON-GUI 模式来跟大家讲解 Jmeter 的运行原理，因为两种模式本质上都是通过 Jmeter 执行引擎来实现测试的。下一章开始，我们将继续深入了解使用无界面模式启动后，Jmeter 是如何开始测试的…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在开始讲 start 方法前，大家先考虑一个问题，Jmeter 启动时带不带参数有什么影响？我们可以带着这个问题往下看。&lt;/p&gt;
&lt;h2 id=&quot;Jmeter启动参数是如何传递的？&quot;&gt;&lt;a href=&quot;#Jmeter启动参数是如何传递的？&quot; class=&quot;headerlin</summary>
      
    
    
    
    
    <category term="Jmeter源码系列" scheme="https://linvaux.github.io/tags/Jmeter%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter源码系列(2) - Jmeter 类详解-命令行参数处理CLOptionDescriptor</title>
    <link href="https://linvaux.github.io/2024/07/26/Jmeter%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97-2-Jmeter-%E7%B1%BB%E8%AF%A6%E8%A7%A3-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86CLOptionDescriptor/"/>
    <id>https://linvaux.github.io/2024/07/26/Jmeter%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97-2-Jmeter-%E7%B1%BB%E8%AF%A6%E8%A7%A3-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86CLOptionDescriptor/</id>
    <published>2024-07-26T14:06:03.000Z</published>
    <updated>2024-07-26T14:06:19.576Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇我们详细了解了 Jmeter 的启动类 NewDriver，知道了 NewDriver 会通过反射调用 Jmeter.start(String[] args)方法来启动 Jmeter，今天我们来分析下，Jmeter这个类内部到底做了什么。本篇章不会直接开始讲 start 方法，而是会先讲一下 Jmeter 类里面设置的 static 变量，因为这些变量会影响 jmeter 启动时的一些行为。</p><h2 id="Jmeter-类的作用"><a href="#Jmeter-类的作用" class="headerlink" title="Jmeter 类的作用"></a>Jmeter 类的作用</h2><p><a href="https://github.com/apache/jmeter/blob/master/src/core/src/main/java/org/apache/jmeter/JMeter.java">Jmeter</a>类位于 org.apache.jmeter 包下，通过类注释可以了解到它的作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Main JMeter class; processes options and starts the GUI, non-GUI or server as appropriate.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>Jmeter.class 是 Jmeter 的主要类，是为了让 Jmeter 通过 GUI，NON-GUI 或者server模式启动。通过我们使用 Jmeter 工具也能发现，Jmeter 正常情况下启动会有用户界面，方便我们编写 jmx 脚本或者调试 jmx 脚本。但是也可以通过 jmeter -n 模式来启动命令行模式(此处应该是无界面模式更合适)执行 jmx 脚本，并且在 Jmeter 启动时，console 里面也会打印如下内容：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">================================================================================</span><br><span class="line">Don&#x27;t use GUI mode for load testing !, only for Test creation and Test debugging.</span><br><span class="line">For load testing, use CLI Mode (was NON GUI):</span><br><span class="line">   jmeter -n -t [jmx file] -l [results file] -e -o [Path to web report folder]</span><br><span class="line">&amp; increase Java Heap to meet your test requirements:</span><br><span class="line">   Modify current env variable HEAP=&quot;-Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m&quot; in the jmeter batch file</span><br><span class="line">Check : https://jmeter.apache.org/usermanual/best-practices.html</span><br><span class="line">================================================================================</span><br></pre></td></tr></table></figure><p>这段内容其实包含 2 个关键内容：</p><ol><li>调试 jmx 脚本的时候可以使用有界面模式，如果要进行测试的话，建议我们使用CLI模式，即无界面模式。</li><li>告诉用户如何配置 Jmeter 的堆内存，因为 Jmeter 本身是基于 Java 开发，也是运行在 JVM 虚拟机上的，所以如果我们进行性能测试前，可以适当调整堆内存，来防止测试过程中发生 OOM 等异常。</li></ol><p>除了有界面和无界面两种启动模式，Jmeter 还有一种server模式，即集群模式。Jmeter 本身是支持分布式压测的，当单机的并发能力存在瓶颈的时候，可以通过配置 slave 节点来实现分布式压测，这个时候，Jmeter 就是以 server 模式启动的。</p><h2 id="Jmeter-中的-CLOptionDescriptor"><a href="#Jmeter-中的-CLOptionDescriptor" class="headerlink" title="Jmeter 中的 CLOptionDescriptor"></a>Jmeter 中的 CLOptionDescriptor</h2><p>打开 org.apache.jmeter.Jmeter.java 源码，我们会发现，这个类内部定义了几十个静态变量，而且这个类还实现了一个 JMeterPlugin 接口。我们先看JMeterPlugin接口，此接口内部只有两个方法</p><ul><li>String[][] getIconMappings();</li><li>String[][] getResourceBundles();</li></ul><p>第一个 getIconMappings() 方法用于获取插件中的图标映射信息。返回一个二维字符串数组，每个数组元素包含两个字符串：图标名称和图标文件的路径。这些图标文件可以用于在 JMeter 用户界面中显示插件的图标。通过实现 getIconMappings() 方法并返回相应的图标映射，插件可以将自定义的图标与插件相关联，并在 JMeter 中展示出来，以提供更好的用户体验和可视化效果。我们使用 Jmeter 的时候就能发现，每个组件前面都会带个小图标，就是通过这个方法来去加载这些图标的。</p><p>第二个 getResourceBundles() 其实更容易理解，如果大家开发过 web 项目，知道 resourceBundles 是啥，没错，就是用来做国际化的。这个方法用于获取插件中的资源绑定信息。返回一个二维字符串数组，每个数组元素包含两个字符串：资源包的基本名称和资源包的位置。资源包是包含本地化文本消息、错误消息、标签等的文件集合，用于国际化和本地化插件的用户界面。通过实现 getResourceBundles() 方法并返回相应的资源绑定信息，插件可以实现多语言支持，并根据用户的语言环境动态加载适当的本地化资源。</p><p>接下来，我们看下 Jmeter 中定义了这么多变量有啥用，当然，我不会把每个变量都解释一遍，只会对关键部分做解释说明。在这些变量中，有很多变量是类似于以下这种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">REMOTE_OPT_PARAM</span> <span class="operator">=</span> <span class="string">&#x27;R&#x27;</span>;</span><br></pre></td></tr></table></figure><p>大家要注意，这个变量类型是 int，并不是 char，因为这个变量其实是代表了’R’的 ASCII 编码值（十进制数）也就是：82。这种做法是为了提高代码的可读性和可维护性。通过使用命名的常量，代码的其他部分可以直接使用 REMOTE_OPT_PARAM 来表示这个特定的值，而不是使用硬编码的字符 ‘R’ 或数字 82。这样，如果将来需要更改这个值，只需修改常量的定义即可，而不需要对代码中所有引用到这个值的地方进行修改。</p><p>这种定义的变量，会被一个叫 CLOptionDescriptor 的类解析，我们先看下这个类它的作用是什么，其实第一眼看到这个类名的时候，就能大概猜出来，这是用来解析命令行参数的。它其实是 Apache Commons CLI 库中的一个类，作用就是解析命令行参数，提供了定义选项的名称、别名、描述、参数属性和行为的方法。这个类具体的作用如下：</p><ul><li>描述选项的名称和别名：CLOptionDescriptor 允许您定义选项的名称、短名称和长名称等标识符。通过这些标识符，您可以在命令行中识别并指定特定的选项。</li><li>指定选项的描述信息：CLOptionDescriptor 允许您为选项提供文本描述或帮助信息，以帮助用户理解该选项的作用和用法。</li><li>指定选项的参数属性：CLOptionDescriptor 可以定义选项是否需要参数以及参数的类型。它支持定义选项是否需要参数、参数的最少和最多出现次数、参数的默认值等属性。</li><li>配置选项的行为：CLOptionDescriptor 提供了一些方法来配置选项的行为。例如，您可以定义选项是否为必需选项、是否允许多次使用、是否支持可变参数数量等。</li></ul><p>所以，这个类的作用，就是在 CLI 模式下，解析参数用的。比如当我们使用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmeter -h</span><br></pre></td></tr></table></figure><p>就可以看到以下输出：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">    _    ____   _    ____ _   _ _____       _ __  __ _____ _____ _____ ____</span><br><span class="line">   / \  |  _ \ / \  / ___| | | | ____|     | |  \/  | ____|_   _| ____|  _ \</span><br><span class="line">  / _ \ | |_) / _ \| |   | |_| |  _|    _  | | |\/| |  _|   | | |  _| | |_) |</span><br><span class="line"> / ___ \|  __/ ___ \ |___|  _  | |___  | |_| | |  | | |___  | | | |___|  _ &lt;</span><br><span class="line">/_/   \_\_| /_/   \_\____|_| |_|_____|  \___/|_|  |_|_____| |_| |_____|_| \_\ 5.4.1</span><br><span class="line"></span><br><span class="line">Copyright (c) 1999-2021 The Apache Software Foundation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">To list all command line options, open a command prompt and type:</span><br><span class="line"></span><br><span class="line">jmeter.bat(Windows)/jmeter.sh(Linux) -?</span><br><span class="line"></span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">To run Apache JMeter in GUI mode, open a command prompt and type:</span><br><span class="line"></span><br><span class="line">jmeter.bat(Windows)/jmeter.sh(Linux) [-p property-file]</span><br><span class="line"></span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">To run Apache JMeter in NON_GUI mode:</span><br><span class="line">Open a command prompt (or Unix shell) and type:</span><br><span class="line"></span><br><span class="line">jmeter.bat(Windows)/jmeter.sh(Linux) -n -t test-file [-p property-file] [-l results-file] [-j log-file]</span><br><span class="line"></span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">To run Apache JMeter in NON_GUI mode and generate a report at end :</span><br><span class="line">Open a command prompt (or Unix shell) and type:</span><br><span class="line"></span><br><span class="line">jmeter.bat(Windows)/jmeter.sh(Linux) -n -t test-file [-p property-file] [-l results-file] [-j log-file] -e -o [Path to output folder]</span><br><span class="line"></span><br><span class="line">--------------------------------------------------</span><br><span class="line">To generate a Report from existing CSV file:</span><br><span class="line">Open a command prompt (or Unix shell) and type:</span><br><span class="line"></span><br><span class="line">jmeter.bat(Windows)/jmeter.sh(Linux) -g [csv results file] -o [path to output folder (empty or not existing)]</span><br><span class="line"></span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">To tell Apache JMeter to use a proxy server:</span><br><span class="line">Open a command prompt and type:</span><br><span class="line"></span><br><span class="line">jmeter.bat(Windows)/jmeter.sh(Linux) -H [your.proxy.server] -P [your proxy server port]</span><br><span class="line"></span><br><span class="line">---------------------------------------------------</span><br><span class="line"></span><br><span class="line">To run Apache JMeter in server mode:</span><br><span class="line">Open a command prompt and type:</span><br><span class="line"></span><br><span class="line">jmeter-server.bat(Windows)/jmeter-server(Linux)</span><br><span class="line"></span><br><span class="line">---------------------------------------------------</span><br></pre></td></tr></table></figure><p>那么这些输出是哪里来的呢？很明显不是 CLOptionDescriptor 打印的，因为这个类的作用就是解析长短参数，还有参数提示，并不会给出命令执行的结果，我们翻一下代码就能看到，其实这个命令的结果是被 Jmeter 处理之后返回的<br><img src="/attachments/LatLdz57irNLe8Bn2p6BnDiR/image.png" alt="image.png"><br>这段代码就在 Jmeter.start(String[] args) 方法中，判断了参数列表是不是包含 ‘h’,然后打印了 org&#x2F;apache&#x2F;jmeter&#x2F;help.txt 这个文件的内容，我们也可以打开这个文件，看下内容是不是一样的<br><img src="/attachments/8xrrb6e3CD9LVvyTnnKSjEUV/image.png" alt="image.png"><br>我们可以看到，打印内容基本一致，但是少了一个 banner 图，那是因为 banner 图是在上面的 displayAsciiArt()方法中打印的，我们也可以顺便看下这段打印 banner 的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">displayAsciiArt</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> JMeter.class.getResourceAsStream(<span class="string">&quot;jmeter_as_ascii_art.txt&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> IOUtils.toString(inputStream, StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(text);<span class="comment">//NOSONAR</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e1) &#123; <span class="comment">//NOSONAR No logging here</span></span><br><span class="line">            System.out.println(JMeterUtils.getJMeterCopyright());<span class="comment">//NOSONAR</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Version &quot;</span> + JMeterUtils.getJMeterVersion());<span class="comment">//NOSONAR</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码其实很简单，就是读了一个文件，然后输出到控制台，仅此而已。所以，综上所述，Jmeter 这个类，内部的静态变量其实就是在解析命令行参数，最后这些参数会被存储在 CLOptionDescriptor[] options 对象中，这个 option 对象非常重要，因为在 jmeter 真正启动前，会从 option 中获取好几个参数，来决定使用何种启动方式。</p><h2 id="Jmeter-支持的命令行参数"><a href="#Jmeter-支持的命令行参数" class="headerlink" title="Jmeter 支持的命令行参数"></a>Jmeter 支持的命令行参数</h2><table><thead><tr><th>短命令</th><th>长命令</th><th>说明</th></tr></thead><tbody><tr><td><code>-h</code></td><td><code>--help</code></td><td>显示帮助信息。</td></tr><tr><td><code>-v</code></td><td><code>--version</code></td><td>显示 JMeter 版本信息。</td></tr><tr><td><code>-n</code></td><td><code>--nongui</code></td><td>以非 GUI （无界面）模式运行 JMeter。</td></tr><tr><td><code>-t &lt;文件名&gt;</code></td><td><code>--testfile &lt;文件名&gt;</code></td><td>指定要执行的 JMX 测试计划文件。</td></tr><tr><td><code>-l &lt;文件名&gt;</code></td><td><code>--logfile &lt;文件名&gt;</code></td><td>指定测试结果的日志文件名。</td></tr><tr><td><code>-j &lt;文件名&gt;</code></td><td><code>--jmeterlogfile &lt;文件名&gt;</code></td><td>指定 JMeter 的日志文件名。</td></tr><tr><td><code>-r</code></td><td><code>--runremote</code></td><td>以远程方式运行测试计划，用于分布式测试。</td></tr><tr><td><code>-R &lt;远程主机列表&gt;</code></td><td><code>--remotestart &lt;远程主机列表&gt;</code></td><td>通过指定远程主机列表，以分布式方式运行测试计划。</td></tr><tr><td><code>-G &lt;属性文件&gt;</code></td><td><code>--globalproperties &lt;属性文件&gt;</code></td><td>指定全局属性文件。</td></tr><tr><td><code>-D &lt;name&gt;=&lt;value&gt;</code></td><td><code>--systemproperty &lt;name&gt;=&lt;value&gt;</code></td><td>设置额外的系统属性。</td></tr><tr><td><code>-S</code></td><td><code>--systemPropertiesFile &lt;文件名&gt;</code></td><td>指定系统属性文件。</td></tr><tr><td><code>-P &lt;name&gt;=&lt;value&gt;</code></td><td><code>--jmeterproperty &lt;name&gt;=&lt;value&gt;</code></td><td>设置 JMeter 属性值。此处参数是小写</td></tr><tr><td><code>-H &lt;代理主机&gt;</code></td><td><code>--proxyHost &lt;代理主机&gt;</code></td><td>指定代理服务器的主机名。</td></tr><tr><td><code>-P &lt;代理端口&gt;</code></td><td><code>--proxyPort &lt;代理端口&gt;</code></td><td>指定代理服务器的端口号。此处参数是大写</td></tr><tr><td><code>-N &lt;非代理的主机列表&gt;</code></td><td><code>--nonProxyHosts &lt;非代理的主机列表&gt;</code></td><td>指定不需要代理的主机。</td></tr><tr><td><code>-X</code></td><td><code>--remoteexit</code></td><td>告知远程服务器在测试结束后退出。</td></tr><tr><td><code>-H</code></td><td><code>--help-report</code></td><td>显示关于报告生成的帮助信息。</td></tr><tr><td><code>-L</code></td><td><code>--loglevel</code></td><td>指定 JMeter 日志的级别。</td></tr><tr><td><code>-q &lt;属性文件&gt;</code></td><td><code>--addprop &lt;属性文件&gt;</code></td><td>指定要加载的其他 JMeter 属性文件。</td></tr><tr><td><code>-s</code></td><td><code>--server</code></td><td>以服务器模式运行 JMeter 使用 JMeter 远程实例。</td></tr><tr><td><code>-f</code></td><td><code>--forceDeleteResultFile</code></td><td>在运行之前强制删除已存在的测试结果文件。</td></tr><tr><td><code>-i</code></td><td><code>--ignorelineendings</code></td><td>忽略测试计划文件中的行结束标记。</td></tr><tr><td><code>-H</code></td><td><code>--useSystemProxy</code></td><td>使用系统代理设置。</td></tr></tbody></table><p>后面一章正式讲解 Jmeter.start(String[] args) 方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上一篇我们详细了解了 Jmeter 的启动类 NewDriver，知道了 NewDriver 会通过反射调用 Jmeter.start(String[] args)方法来启动 Jmeter，今天我们来分析下，Jmeter这个类内部到底做了什么。本篇章不会直接开始讲 star</summary>
      
    
    
    
    
    <category term="Jmeter源码系列" scheme="https://linvaux.github.io/tags/Jmeter%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Jmeter源码系列(1)-NewDriver类详解-Jmeter 的启动器</title>
    <link href="https://linvaux.github.io/2024/07/26/Jmeter%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97-1-NewDriver%E7%B1%BB%E8%AF%A6%E8%A7%A3-Jmeter-%E7%9A%84%E5%90%AF%E5%8A%A8%E5%99%A8/"/>
    <id>https://linvaux.github.io/2024/07/26/Jmeter%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97-1-NewDriver%E7%B1%BB%E8%AF%A6%E8%A7%A3-Jmeter-%E7%9A%84%E5%90%AF%E5%8A%A8%E5%99%A8/</id>
    <published>2024-07-26T14:04:18.000Z</published>
    <updated>2024-07-26T14:05:12.166Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p><a href="https://jmeter.apache.org/">Jmeter</a> 全称（Apache JMeter）是一个开源的、功能强大的性能测试工具，用于对各种应用程序和协议进行功能、负载、压力和性能测试。它被广泛应用于软件开发和计划阶段，以确保应用程序在各种负载情况下的稳定性和可靠性。<br>本系列将从 Jmeter 代码层面陆续剖析其实现原理，包括但不限于 Jmeter 设计思路，Jmeter 核心对象&#x2F;接口&#x2F;方法。如有错误，敬请指正！</p><h2 id="NewDriver"><a href="#NewDriver" class="headerlink" title="NewDriver"></a>NewDriver</h2><p>NewDriver 是 org.apache.jmeter 包下的一个类，如下是 NewDriver 源码中的类说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Main class for JMeter - sets up initial classpath and the loader.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>从这个说明中，我们可以知道，这个类提供了 2 个主要功能：</p><ul><li>初始化 classpath</li><li>初始化一个 loader, 这个 loader 其实就是一个动态类加载器</li></ul><p>以下内容摘抄自 NewDriver 源码，在源码中会使用注释来说明关键代码的作用，最后也会做总结，让我们开始吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">NewDriver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一堆常量，会在 static 代码块中使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLASSPATH_SEPARATOR</span> <span class="operator">=</span> File.pathSeparator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">OS_NAME</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">OS_NAME_LC</span> <span class="operator">=</span> OS_NAME.toLowerCase(java.util.Locale.ENGLISH);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JAVA_CLASS_PATH</span> <span class="operator">=</span> <span class="string">&quot;java.class.path&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JMETER_LOGFILE_SYSTEM_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;jmeter.logfile&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HEADLESS_MODE_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;java.awt.headless&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态类加载器，继承自 URLClassLoader，提供了一个静态方法 updateLoader(URL [] urls) 实现了动态加载 jar</span></span><br><span class="line"><span class="comment">     * 的功能。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DynamicClassLoader loader;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JMETER_INSTALLATION_DIRECTORY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Exception&gt; EXCEPTIONS_IN_INIT = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;URL&gt; jars = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 启动时从 jvm 获取 classpath</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">initiaClasspath</span> <span class="operator">=</span> System.getProperty(JAVA_CLASS_PATH);</span><br><span class="line">        String tmpDir;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 按照指定标记符来分割给定的字符串，但是 StringTokenizer 是一个遗留类，出于兼容性原因而保留，建议使用 String 的拆分方法或 java.util.regex 包。</span></span><br><span class="line"><span class="comment">         * 顺便说一下，Jmeter 源码中会包含非常多的过时的方法或者写法，有些是因为 Jmeter 本身开发较早，当时的 jdk 版本没有我们常用的新方法，</span></span><br><span class="line"><span class="comment">         * 有些则是因为当时 jdk 早期版本存在 bug，jmeter 会使用另一种写法来规避这些 bug，当然，现在这些 bug 可能已经修复了，不过 jmeter 的源码中</span></span><br><span class="line"><span class="comment">         * 任然会保留这部分注释</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">StringTokenizer</span> <span class="variable">tok</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(initiaClasspath, File.pathSeparator);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 对 mac 系统做了单独的判断，我也没有深究为啥要单独处理，不晓得现在还需不需要这么写</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (tok.countTokens() == <span class="number">1</span>|| (tok.countTokens()  == <span class="number">2</span> &amp;&amp; OS_NAME_LC.startsWith(<span class="string">&quot;mac os x&quot;</span>))) &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">jar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(tok.nextToken());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                tmpDir = jar.getCanonicalFile().getParentFile().getParent();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                tmpDir = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 从 jvm 获取 jmeter.home 属性，没有的话就默认从环境变量 JMETER_HOME 取值，当然这个值也不一定有，因为不是所有人都会配置 JMETER_HOME 这个环境变量</span></span><br><span class="line"><span class="comment">             * 其实从这边开始，大家就会发现，Jmeter 会经常使用 System.getProperty 来获取一些属性，在后面的代码中我们也会经常见到这样的代码</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            tmpDir = System.getProperty(<span class="string">&quot;jmeter.home&quot;</span>, System.getenv(<span class="string">&quot;JMETER_HOME&quot;</span>));</span><br><span class="line">            <span class="keyword">if</span> (tmpDir == <span class="literal">null</span> || tmpDir.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">File</span> <span class="variable">userDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(System.getProperty(<span class="string">&quot;user.dir&quot;</span>));</span><br><span class="line">                tmpDir = userDir.getAbsoluteFile().getParent();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tmpDir == <span class="literal">null</span>) &#123;</span><br><span class="line">            tmpDir = System.getenv(<span class="string">&quot;JMETER_HOME&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        JMETER_INSTALLATION_DIRECTORY = tmpDir;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">usesUNC</span> <span class="operator">=</span> OS_NAME_LC.startsWith(<span class="string">&quot;windows&quot;</span>);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">classpath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 下面的几个目录大家就很眼熟了，就是 Jmeter 解压后，主目录下的文件夹，里面都是 Jmeter 可能用到的一些 jar 包</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        File[] libDirs = <span class="keyword">new</span> <span class="title class_">File</span>[] &#123; <span class="keyword">new</span> <span class="title class_">File</span>(JMETER_INSTALLATION_DIRECTORY + File.separator + <span class="string">&quot;lib&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">File</span>(JMETER_INSTALLATION_DIRECTORY + File.separator + <span class="string">&quot;lib&quot;</span> + File.separator + <span class="string">&quot;ext&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">File</span>(JMETER_INSTALLATION_DIRECTORY + File.separator + <span class="string">&quot;lib&quot;</span> + File.separator + <span class="string">&quot;junit&quot;</span>)&#125;;</span><br><span class="line">        <span class="keyword">for</span> (File libDir : libDirs) &#123;</span><br><span class="line">            File[] libJars = libDir.listFiles((dir, name) -&gt; name.endsWith(<span class="string">&quot;.jar&quot;</span>));</span><br><span class="line">            <span class="keyword">if</span> (libJars == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Throwable</span>(<span class="string">&quot;Could not access &quot;</span> + libDir).printStackTrace();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 不晓得为啥要排个序</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Arrays.sort(libJars);</span><br><span class="line">            <span class="keyword">for</span> (File libJar : libJars) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> libJar.getPath();</span><br><span class="line">                    <span class="keyword">if</span> (usesUNC) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (s.startsWith(<span class="string">&quot;\\\\&quot;</span>) &amp;&amp; !s.startsWith(<span class="string">&quot;\\\\\\&quot;</span>)) &#123;</span><br><span class="line">                            s = <span class="string">&quot;\\\\&quot;</span> + s;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.startsWith(<span class="string">&quot;//&quot;</span>) &amp;&amp; !s.startsWith(<span class="string">&quot;///&quot;</span>)) &#123;</span><br><span class="line">                            s = <span class="string">&quot;//&quot;</span> + s;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    jars.add(<span class="keyword">new</span> <span class="title class_">File</span>(s).toURI().toURL());</span><br><span class="line">                    classpath.append(CLASSPATH_SEPARATOR);</span><br><span class="line">                    classpath.append(s);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">                    EXCEPTIONS_IN_INIT.add(<span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;Error adding jar:&quot;</span>+libJar.getAbsolutePath(), e));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.setProperty(JAVA_CLASS_PATH, initiaClasspath + classpath.toString());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 类加载器会加载扫描到的这些 jar 包，为 Jmeter 真正启动做好准备</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        loader = AccessController.doPrivileged(</span><br><span class="line">                (PrivilegedAction&lt;DynamicClassLoader&gt;) () -&gt;</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">DynamicClassLoader</span>(jars.toArray(<span class="keyword">new</span> <span class="title class_">URL</span>[jars.size()]))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中，我们可以看到，NewDriver 在实例化时，会执行一个静态代码块，主要作用就是加载 Jmeter 安装目录下的 jar 包。</p><h2 id="Main方法介绍"><a href="#Main方法介绍" class="headerlink" title="Main方法介绍"></a>Main方法介绍</h2><p>下面介绍 NewDriver 的 main 方法，这个方法就是整个 Jmeter 启动的入口方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 检查初始化是不是报错了</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(!EXCEPTIONS_IN_INIT.isEmpty()) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Configuration error during init, see exceptions:&quot;</span>+exceptionsToString(EXCEPTIONS_IN_INIT));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 设置当前线程的类加载器，也就是 Jmeter 自己写的那个动态类加载器</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Thread.currentThread().setContextClassLoader(loader);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 配置一些日志属性，不重要</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            setLoggingProperties(args);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 判断要不要用 GUI 模式启动，默认 true，也可以通过 Jmeter 命令行参数 -n 来指定使用非 GUI 模式启动</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span>(System.getProperty(HEADLESS_MODE_PROPERTY) == <span class="literal">null</span> &amp;&amp; shouldBeHeadless(args)) &#123;</span><br><span class="line">                    System.setProperty(HEADLESS_MODE_PROPERTY, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 获取 Jmeter 类，作用类似于 Class.forName(String clazzName)</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                Class&lt;?&gt; initialClass = loader.loadClass(<span class="string">&quot;org.apache.jmeter.JMeter&quot;</span>);</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 获取 Jmeter 实例</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> initialClass.getDeclaredConstructor().newInstance();</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 获取 Jmeter.start方法，并调用</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="type">Method</span> <span class="variable">startup</span> <span class="operator">=</span> initialClass.getMethod(<span class="string">&quot;start&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>].getClass() &#125;);</span><br><span class="line">                startup.invoke(instance, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; args &#125;);</span><br><span class="line">            &#125; <span class="keyword">catch</span>(Throwable e)&#123; </span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                System.err.println(<span class="string">&quot;JMeter home directory was detected as: &quot;</span>+JMETER_INSTALLATION_DIRECTORY);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>main 方法其实很简单直接，就是看下是不是要启动 GUI，然后就是通过反射调用 Jmeter 的 start 方法，来开始测试。<br>综上，NewDriver 其实就是一个启动器，正如其所在源码模块 launcher 一样，他的作用就是为 Jmeter 真正启动做好准备。<br>好了，NewDriver 就介绍完了，下一章将介绍 Jmeter 这个核心类，以及调用其 start(String[] args) 之后会发生什么…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://jmeter.apache.org/&quot;&gt;Jmeter&lt;/a&gt; 全称（Apa</summary>
      
    
    
    
    
    <category term="Jmeter源码系列" scheme="https://linvaux.github.io/tags/Jmeter%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Jdk11获取系统信息</title>
    <link href="https://linvaux.github.io/2024/07/26/Jdk11%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/"/>
    <id>https://linvaux.github.io/2024/07/26/Jdk11%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/</id>
    <published>2024-07-26T14:01:20.000Z</published>
    <updated>2024-07-26T14:02:01.734Z</updated>
    
    <content type="html"><![CDATA[<p>下面用到的 api 仅在 jdk11 上测试通过，其他 jdk 版本没试过</p><h2 id="工具类-SystemInfoUtils-java"><a href="#工具类-SystemInfoUtils-java" class="headerlink" title="工具类 SystemInfoUtils.java"></a>工具类 SystemInfoUtils.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo.constant.SystemInfoConstant;</span><br><span class="line"><span class="keyword">import</span> com.sun.management.OperatingSystemMXBean;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.NetworkInterface;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.*;</span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 系统信息工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemInfoUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取本地IP地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 本机 ip，过滤了回环地址和 localhost</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getLocalIP</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; ipList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取本地所有网络接口</span></span><br><span class="line">            Enumeration&lt;NetworkInterface&gt; networkInterfaces = NetworkInterface.getNetworkInterfaces();</span><br><span class="line">            <span class="keyword">while</span> (networkInterfaces.hasMoreElements()) &#123;</span><br><span class="line">                <span class="type">NetworkInterface</span> <span class="variable">networkInterface</span> <span class="operator">=</span> networkInterfaces.nextElement();</span><br><span class="line">                <span class="comment">// 排除虚拟接口和未启用的接口</span></span><br><span class="line">                <span class="keyword">if</span> (networkInterface.isVirtual() || !networkInterface.isUp()) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Enumeration&lt;InetAddress&gt; inetAddresses = networkInterface.getInetAddresses();</span><br><span class="line">                <span class="keyword">while</span> (inetAddresses.hasMoreElements()) &#123;</span><br><span class="line">                    <span class="type">InetAddress</span> <span class="variable">inetAddress</span> <span class="operator">=</span> inetAddresses.nextElement();</span><br><span class="line">                    <span class="keyword">if</span> (!inetAddress.isLinkLocalAddress()) &#123;</span><br><span class="line">                        ipList.add(inetAddress.getHostAddress());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;本机 IP 获取失败, 异常详情: &quot;</span> + ExceptionUtil.getErrorMessage(e));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ipList.stream().filter(e -&gt; !SystemInfoConstant.INVALID_IP_LIST.contains(e)).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取CPU数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 逻辑处理器数量，物理核数 * 2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getCpuCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 此处有坑，OperatingSystemMXBean 存在于两个包：java.lang.management.OperatingSystemMXBean 和 com.sun.management.OperatingSystemMXBean</span></span><br><span class="line">        <span class="comment">// 一定要找对包，不然有些方法找不到，太特么坑了</span></span><br><span class="line">        java.lang.management.<span class="type">OperatingSystemMXBean</span> <span class="variable">operatingSystemMXBean</span> <span class="operator">=</span> ManagementFactory.getOperatingSystemMXBean();</span><br><span class="line">        <span class="keyword">return</span> operatingSystemMXBean.getAvailableProcessors();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取总内存大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 物理内存大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getTotalPhysicalMemory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">OperatingSystemMXBean</span> <span class="variable">osBean</span> <span class="operator">=</span> ManagementFactory.getPlatformMXBean(OperatingSystemMXBean.class);</span><br><span class="line">        <span class="type">long</span> <span class="variable">physicalMemorySize</span> <span class="operator">=</span> osBean.getTotalPhysicalMemorySize();</span><br><span class="line">        <span class="type">double</span> <span class="variable">physicalMemoryGB</span> <span class="operator">=</span> (<span class="type">double</span>) physicalMemorySize / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line">        <span class="type">DecimalFormat</span> <span class="variable">decimalFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;#.##&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> decimalFormat.format(physicalMemoryGB) + <span class="string">&quot;GB&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取磁盘总大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 磁盘总量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDiskSizeTotal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">diskSize</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Path</span> <span class="variable">rootDir</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">            <span class="type">FileStore</span> <span class="variable">store</span> <span class="operator">=</span> Files.getFileStore(rootDir);</span><br><span class="line">            <span class="type">long</span> <span class="variable">totalSpace</span> <span class="operator">=</span> store.getTotalSpace();</span><br><span class="line">            <span class="type">double</span> <span class="variable">totalGB</span> <span class="operator">=</span> (<span class="type">double</span>) totalSpace / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line">            <span class="type">DecimalFormat</span> <span class="variable">decimalFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;#.##&quot;</span>);</span><br><span class="line">            diskSize = decimalFormat.format(totalGB + <span class="string">&quot;GB&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;磁盘信息获取失败, 异常详情: &#123;&#125;&quot;</span>, ExceptionUtil.getErrorMessage(e));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> diskSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取已使用磁盘大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 磁盘已使用量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDiskSizeUsed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">diskSize</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Path</span> <span class="variable">rootDir</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">            <span class="type">FileStore</span> <span class="variable">store</span> <span class="operator">=</span> Files.getFileStore(rootDir);</span><br><span class="line">            <span class="type">long</span> <span class="variable">usableSpace</span> <span class="operator">=</span> store.getUsableSpace();</span><br><span class="line">            <span class="type">double</span> <span class="variable">usableGB</span> <span class="operator">=</span> (<span class="type">double</span>) usableSpace / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line">            <span class="type">DecimalFormat</span> <span class="variable">decimalFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;#.##&quot;</span>);</span><br><span class="line">            diskSize = decimalFormat.format(usableGB + <span class="string">&quot;GB&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;磁盘信息获取失败, 异常详情: &#123;&#125;&quot;</span>, ExceptionUtil.getErrorMessage(e));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> diskSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取可用磁盘大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 磁盘可使用量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDiskSizeFree</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">diskSize</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Path</span> <span class="variable">rootDir</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">            <span class="type">FileStore</span> <span class="variable">store</span> <span class="operator">=</span> Files.getFileStore(rootDir);</span><br><span class="line">            <span class="type">long</span> <span class="variable">freeSpace</span> <span class="operator">=</span> store.getUnallocatedSpace();</span><br><span class="line">            <span class="type">double</span> <span class="variable">freeGB</span> <span class="operator">=</span> (<span class="type">double</span>) freeSpace / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line">            <span class="type">DecimalFormat</span> <span class="variable">decimalFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;#.##&quot;</span>);</span><br><span class="line">            diskSize = decimalFormat.format(freeGB + <span class="string">&quot;GB&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;磁盘信息获取失败, 异常详情: &#123;&#125;&quot;</span>, ExceptionUtil.getErrorMessage(e));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> diskSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="常量类-SystemInfoConstant-java"><a href="#常量类-SystemInfoConstant-java" class="headerlink" title="常量类 SystemInfoConstant.java"></a>常量类 SystemInfoConstant.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 系统信息常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemInfoConstant</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ipv4 回环地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IPV4_LOOP_ADDRESS</span> <span class="operator">=</span> <span class="string">&quot;0.0.1.1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ipv6 回环地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IPV6_LOOP_ADDRESS</span> <span class="operator">=</span> <span class="string">&quot;0:0:0:0:0:0:0:1%lo0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本机 IP</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCAL_HOST</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无效的 ip 地址列表，需要排除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; INVALID_IP_LIST = List.of(IPV4_LOOP_ADDRESS, IPV6_LOOP_ADDRESS, LOCAL_HOST);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="异常信息获取工具类-ExceptionUtil-java"><a href="#异常信息获取工具类-ExceptionUtil-java" class="headerlink" title="异常信息获取工具类 ExceptionUtil.java"></a>异常信息获取工具类 ExceptionUtil.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 异常工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常信息允许的最大长度，超过这个长度会被截取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">ERROR_MSG_MAX_LENGTH</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取异常的堆栈信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 堆栈信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getErrorMessage</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(e.getMessage())) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringWriter</span> <span class="variable">sw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line">        e.printStackTrace(<span class="keyword">new</span> <span class="title class_">PrintWriter</span>(sw, Boolean.TRUE));</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> sw.toString();</span><br><span class="line">        <span class="keyword">return</span> message.length() &gt; ERROR_MSG_MAX_LENGTH ? message.substring(<span class="number">0</span>, ERROR_MSG_MAX_LENGTH) : message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下面用到的 api 仅在 jdk11 上测试通过，其他 jdk 版本没试过&lt;/p&gt;
&lt;h2 id=&quot;工具类-SystemInfoUtils-java&quot;&gt;&lt;a href=&quot;#工具类-SystemInfoUtils-java&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="Java" scheme="https://linvaux.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>IDEA高效使用指南(一)</title>
    <link href="https://linvaux.github.io/2024/07/26/IDEA%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://linvaux.github.io/2024/07/26/IDEA%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2024-07-26T13:48:42.000Z</published>
    <updated>2024-07-26T13:49:51.460Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置全局-JDK"><a href="#设置全局-JDK" class="headerlink" title="设置全局 JDK"></a>设置全局 JDK</h2><blockquote><p>File -&gt; New Projects Setup -&gt; Structure…</p></blockquote><p><img src="/../images/TBdebShUg5j9uqXoGuWsCDUd.png" alt="image.png"><br><img src="/../images/BavFvPU62j788uDuBM3LXwPJ.png" alt="image.png"></p><h2 id="Maven-配置"><a href="#Maven-配置" class="headerlink" title="Maven 配置"></a>Maven 配置</h2><blockquote><p>Perferences -&gt; Build,Execution,Deployment -&gt; Build Tools -&gt; Maven</p></blockquote><p><img src="/../images/26SMM42qFYidXc5p9NviwA4y.png" alt="image.png"></p><h2 id="自动导包-删除无用包"><a href="#自动导包-删除无用包" class="headerlink" title="自动导包&#x2F;删除无用包"></a>自动导包&#x2F;删除无用包</h2><blockquote><p>Perferences -&gt; Editor -&gt; General -&gt; Auto Import</p></blockquote><p><img src="/../images/xkNSjKsbfXT2nwarorw6ChRx.png" alt="image.png"></p><h2 id="注释模板"><a href="#注释模板" class="headerlink" title="注释模板"></a>注释模板</h2><blockquote><p>Perferences -&gt; Editor -&gt; File and Code Templates</p></blockquote><p><img src="/../images/w7kRgFWxWKPpfbkqysKqPKzH.png" alt="image.png"><br>class 注释模板示例</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != &quot;&quot;)package $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line">#parse(&quot;File Header.java&quot;)</span><br><span class="line">/**  </span><br><span class="line"> * @author: $&#123;USER&#125;</span><br><span class="line"> * @date: $&#123;DATE&#125; $&#123;TIME&#125;</span><br><span class="line"> * @description: </span><br><span class="line"> */</span><br><span class="line">public class $&#123;NAME&#125; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示方法分割线"><a href="#显示方法分割线" class="headerlink" title="显示方法分割线"></a>显示方法分割线</h2><blockquote><p>Perferences -&gt; Editor -&gt; General -&gt; Appearance</p></blockquote><p><img src="/../images/icXHF1EX4Xg3Qx24fTiDypUg.png" alt="image.png"></p><h2 id="代码自动补全"><a href="#代码自动补全" class="headerlink" title="代码自动补全"></a>代码自动补全</h2><blockquote><p>Perferences -&gt; Editor -&gt; General -&gt; Code Completion</p></blockquote><p><img src="/../images/4Lkkem9rm8M8FTrubg5PU5HP.png" alt="image.png"></p><h2 id="设置每行代码最大长度"><a href="#设置每行代码最大长度" class="headerlink" title="设置每行代码最大长度"></a>设置每行代码最大长度</h2><blockquote><p>Perferences -&gt; Editor -&gt; Code Style</p></blockquote><blockquote><p>阿里巴巴的 Java 开发规范推荐每行长度不要超过 120，但是我习惯用 200</p></blockquote><p><img src="/../images/zvhD4qmyWkMLhXHtASGitDWP.png" alt="image.png"></p><h2 id="修改注释颜色"><a href="#修改注释颜色" class="headerlink" title="修改注释颜色"></a>修改注释颜色</h2><blockquote><p>Perferences -&gt; Editor -&gt; Color Scheme -&gt; Java</p></blockquote><blockquote><p>去掉Inherit values from 前面的√，选中 Foreground 自己设置个喜欢的颜色</p></blockquote><blockquote><p>这是我现在的配置 Line comment: FFB704, Text: 02FA15</p></blockquote><p><img src="/../images/bhm5KnJH1CaU48zokiyQS23z.png" alt="image.png"><br><img src="/../images/a9PmPRUXW6Vtf35sV72ZqoWZ.png" alt="image.png"></p><h2 id="禁止-IDEA-启动时，自动打开上一个项目"><a href="#禁止-IDEA-启动时，自动打开上一个项目" class="headerlink" title="禁止 IDEA 启动时，自动打开上一个项目"></a>禁止 IDEA 启动时，自动打开上一个项目</h2><blockquote><p>Perperences -&gt; Appearance &amp; Behavior -&gt; System Settings</p></blockquote><p><img src="/../images/7zhkSUh6vz4irhHqKvTDLCRz.png" alt="image.png"></p><h2 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h2><blockquote><p>Perferences -&gt; Editor -&gt; Font</p></blockquote><blockquote><p>我习惯使用 Consolas 字体，但是 mac 上默认没有这个字体，需要自行安装: <a href="http://www.fontpalace.com/font-details/Consolas/">http://www.fontpalace.com/font-details/Consolas/</a></p></blockquote><p><img src="/../images/CaLeXrjC82cMMY5p9aRNkoiC.png" alt="image.png"></p><h2 id="修改文件编码"><a href="#修改文件编码" class="headerlink" title="修改文件编码"></a>修改文件编码</h2><blockquote><p>Perferences -&gt; Editor -&gt; File Encodings</p></blockquote><blockquote><p>直接使用 UTF-8 编码即可，如果出现乱码，记得勾选下面的 Transparent native-to-ascii conversion </p></blockquote><p><img src="/../images/1Pe9GChSD4mQYNrTBCcXJnHQ.png" alt="image.png"></p><h2 id="修改-IDEA-的-JVM-堆配置"><a href="#修改-IDEA-的-JVM-堆配置" class="headerlink" title="修改 IDEA 的 JVM 堆配置"></a>修改 IDEA 的 JVM 堆配置</h2><blockquote><p>IDEA 默认的堆配置貌似是 750MB，启动一个大型项目时，这点内存不大够用，可以自己通过如下配置修改</p></blockquote><blockquote><p>help -&gt; Edit custom VM options</p></blockquote><blockquote><p>修改配置 -Xmx8192m, 按照自己电脑内存大小配置 </p></blockquote><p><img src="/../images/MpKzgoQVG1tKzaiHGAFfuEPW.png" alt="image.png"></p><h2 id="窗口多标签换行显示"><a href="#窗口多标签换行显示" class="headerlink" title="窗口多标签换行显示"></a>窗口多标签换行显示</h2><blockquote><p>Perferences -&gt; Editor -&gt; General -&gt; Editor Tabs</p></blockquote><p><img src="/../images/L4MEbkBerxeU4eeGsaTrM1zk.png" alt="image.png"><br><img src="/../images/1EaPuTQNRQjzgduEEyDiGH6Z.png" alt="image.png"></p><h2 id="标识修改过的文件"><a href="#标识修改过的文件" class="headerlink" title="标识修改过的文件"></a>标识修改过的文件</h2><blockquote><p>Perferences -&gt; Editor -&gt; General -&gt; Editor Tabs</p></blockquote><p><img src="/../images/ZUEdRrJxcawphjC1ihaNn8ef.png" alt="image.png"><br><img src="/../images/YLJ2tR7htEHb1anxHWEAaL1i.png" alt="image.png"></p><h2 id="实现-Serializable-接口时，提示生成-SerialVersionUID"><a href="#实现-Serializable-接口时，提示生成-SerialVersionUID" class="headerlink" title="实现 Serializable 接口时，提示生成 SerialVersionUID"></a>实现 Serializable 接口时，提示生成 SerialVersionUID</h2><blockquote><p>Perferences -&gt; Editor -&gt; Inspections</p></blockquote><blockquote><p>在实现了 Serializable 接口的类上使用快捷键 alt+enter,就会提示生成 SerialVersionUID<br><img src="/../images/sRxKbUJi6iKdrzTQnXg5VPx2.png" alt="image.png"><br><img src="/../images/iwxTcpwLk9cKfw8gSXC7WtiT.png" alt="image.png"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设置全局-JDK&quot;&gt;&lt;a href=&quot;#设置全局-JDK&quot; class=&quot;headerlink&quot; title=&quot;设置全局 JDK&quot;&gt;&lt;/a&gt;设置全局 JDK&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;File -&amp;gt; New Projects Setup -&amp;g</summary>
      
    
    
    
    
    <category term="IDEA" scheme="https://linvaux.github.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Centos使用Tomcat安装Jenkins</title>
    <link href="https://linvaux.github.io/2024/07/26/Centos%E4%BD%BF%E7%94%A8Tomcat%E5%AE%89%E8%A3%85Jenkins/"/>
    <id>https://linvaux.github.io/2024/07/26/Centos%E4%BD%BF%E7%94%A8Tomcat%E5%AE%89%E8%A3%85Jenkins/</id>
    <published>2024-07-26T13:47:23.000Z</published>
    <updated>2024-07-26T13:47:37.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="安装JDK1-8"><a href="#安装JDK1-8" class="headerlink" title="安装JDK1.8"></a>安装JDK1.8</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum makecache</span><br><span class="line">yum install -y java-1.8.0-openjdk.x86_64</span><br></pre></td></tr></table></figure><h3 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载tomcat9.0</span></span><br><span class="line">wget https://mirrors.bfsu.edu.cn/apache/tomcat/tomcat-9/v9.0.36/bin/apache-tomcat-9.0.36.tar.gz &amp;&amp; tar -xvf apache-tomcat-9.0.36.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除webapps下面的项目</span></span><br><span class="line">cd apache-tomcat-9.0.36/webapps/ &amp;&amp; rm -rf *</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载jenkins.war并重命名为ROOT.war</span></span><br><span class="line">wget https://mirrors.huaweicloud.com/jenkins/war/2.240/jenkins.war -O ROOT.war</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改Tomcat启动脚本，支持Jenkins跨域"><a href="#修改Tomcat启动脚本，支持Jenkins跨域" class="headerlink" title="修改Tomcat启动脚本，支持Jenkins跨域"></a>修改Tomcat启动脚本，支持Jenkins跨域</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改bin/catalina.sh,在首行添加如下参数</span></span><br><span class="line">export CATALINA_OPTS=&quot;-Djava.awt.headless=true&quot;</span><br><span class="line">export JAVA_OPTS=&quot;-Dhudson.model.DirectoryBrowserSupport.CSP= &quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动tomcat</span></span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><h3 id="访问jenkins"><a href="#访问jenkins" class="headerlink" title="访问jenkins"></a>访问jenkins</h3><ul><li>tomcat默认监听端口是8080，访问 192.168.1.2:8080</li><li>如果jenkins启动页面可以正常打开，此时，停止tomcat，并修改jenkins配置。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;tomcat安装目录&gt;/bin/shutdown.sh</span><br><span class="line">cd ~/.jenkins/</span><br></pre></td></tr></table></figure><ul><li>找到<strong>hudson.model.UpdateCenter.xml</strong>文件，修改为如下内容</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.1&#x27; encoding=&#x27;UTF-8&#x27;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sites</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">site</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>default<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">site</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sites</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动tomcat</li><li>jenkins启动后，需要输入初始化密码，根据页面提示填写密码后，进入插件安装页面，此时，需要再次停止tomcat，然后执行以下命令，更换jenkins更新源之后，再次启动tomcat。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.jenkins/updates;</span><br><span class="line">sed -i &#x27;s/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&#x27; default.json &amp;&amp; sed -i &#x27;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&#x27; default.json;</span><br><span class="line">bash &lt;tomcat安装目录&gt;/bin/startup.sh</span><br></pre></td></tr></table></figure><ul><li>此时，jenkins会要求重新输入初始化密码，然后选择安装建议的插件，等待安装完成。</li><li>插件安装完成后，需要设置管理员信息，之后进入jenkins工作页面。</li></ul><h3 id="jenkins常用插件"><a href="#jenkins常用插件" class="headerlink" title="jenkins常用插件"></a>jenkins常用插件</h3><ul><li>chinese （汉化）</li><li>locale（汉化）</li><li>blue ocean（流水线工具）</li><li>Allure Jenkins Plugin (allure报告)</li><li>Extended Choice Parameter Plug-In (参数化构建扩展)</li><li>AnsiColor （日志彩色输出）</li><li>Git Parameter Plug-In（代码分支选择）</li><li>build failure analyzer (构建失败分析)</li><li>multijob（组织多job构建）</li><li>multiple SCMs （设置多个git）</li><li>simple theme（jenkins主题 <a href="http://afonsof.com/jenkins-material-theme/">http://afonsof.com/jenkins-material-theme/</a>）</li><li>merge request event (gitlab 代码门禁)</li><li>SLOCCount Plug-in（clco代码量统计结果展示）</li><li>Warnings Next Generation Plugin（代码静态扫描结果展示 <a href="https://github.com/jenkinsci/warnings-ng-plugin/blob/master/SUPPORTED-FORMATS.md">https://github.com/jenkinsci/warnings-ng-plugin/blob/master/SUPPORTED-FORMATS.md</a>）</li><li>Jacoco（java代码覆盖率报告）</li><li>Html publisher（生成html报告）</li><li>backup（备份&#x2F;恢复jenkins）</li><li>Gitlab（gitlab支持插件）</li><li>Gitee（gitee支持插件）</li><li>Role-based Authorization Strategy (角色权限控制)</li><li>Active Choices (根据所选参数，自动调出对应参数所依赖的后续参数)</li><li>Job Configuration History (配置记录管理，支持配置回滚)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h2&gt;&lt;h3 id=&quot;安装JDK1-8&quot;&gt;&lt;a href=&quot;#安装JDK1-8&quot; class=&quot;headerlink&quot; title=&quot;安</summary>
      
    
    
    
    
    <category term="Jenkins" scheme="https://linvaux.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Springboot业务信息国际化</title>
    <link href="https://linvaux.github.io/2024/07/26/Springboot%E4%B8%9A%E5%8A%A1%E4%BF%A1%E6%81%AF%E5%9B%BD%E9%99%85%E5%8C%96/"/>
    <id>https://linvaux.github.io/2024/07/26/Springboot%E4%B8%9A%E5%8A%A1%E4%BF%A1%E6%81%AF%E5%9B%BD%E9%99%85%E5%8C%96/</id>
    <published>2024-07-26T13:43:49.000Z</published>
    <updated>2024-07-26T13:46:30.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h2><p>用户上传一个 excel 文件，要对 excel 内容做校验，然后返回校验结果。校验通过之后，在执行导入。但是现在平台要做国际化，支持中英双语，目前校验结果是直接中文返回，为了完成国际化需求，需要根据请求头中的 Accept-language 来决定返回何种语言的内容。</p><h2 id="当前处理方式"><a href="#当前处理方式" class="headerlink" title="当前处理方式"></a>当前处理方式</h2><p><img src="/../images/Uzu4SwXBUhPj7H3b4yK293ta.png" alt="image.png"></p><h2 id="国际化方案"><a href="#国际化方案" class="headerlink" title="国际化方案"></a>国际化方案</h2><h3 id="使用工具类获取国际化内容"><a href="#使用工具类获取国际化内容" class="headerlink" title="使用工具类获取国际化内容"></a>使用工具类获取国际化内容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.MessageSourceAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.MessageSourceAccessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">I18nMessageUtil</span> <span class="keyword">implements</span> <span class="title class_">MessageSourceAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MessageSourceAccessor accessor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取i18n文件中对应的国际化信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code   i18n文件中code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> locale 地区信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args   参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 国际化信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMessage</span><span class="params">(String code, Locale locale, Object... args)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (locale == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> accessor.getMessage(code, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> accessor.getMessage(code, args, locale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取i18n文件中对应的国际化信息,如果不传locale信息，则从当前request获取，如果还是没有，则使用默认locale</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code i18n文件中code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 国际化信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMessage</span><span class="params">(String code, Object... args)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accessor.getMessage(code, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessageSource</span><span class="params">(MessageSource messageSource)</span> &#123;</span><br><span class="line">        I18nMessageUtil.accessor = <span class="keyword">new</span> <span class="title class_">MessageSourceAccessor</span>(messageSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置国际化文件"><a href="#配置国际化文件" class="headerlink" title="配置国际化文件"></a>配置国际化文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ResourceBundleMessageSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">I18nConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageSource <span class="title function_">messageSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ResourceBundleMessageSource</span> <span class="variable">messageSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceBundleMessageSource</span>();</span><br><span class="line">        Set&lt;String&gt; i18nFolder = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// excel 校验的国际化文件</span></span><br><span class="line">        i18nFolder.add(<span class="string">&quot;i18n.excelValidation&quot;</span>);</span><br><span class="line">        <span class="comment">// 默认的国际化文件</span></span><br><span class="line">        i18nFolder.add(<span class="string">&quot;i18n.messages&quot;</span>);</span><br><span class="line">        messageSource.setBasenames(i18nFolder.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line">        messageSource.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        messageSource.setUseCodeAsDefaultMessage(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> messageSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写国际化异常信息"><a href="#编写国际化异常信息" class="headerlink" title="编写国际化异常信息"></a>编写国际化异常信息</h3><p><img src="/../images/qYr23PrcxsWHBDDQ95HTEo74.png" alt="image.png"></p><h3 id="替换校验异常信息"><a href="#替换校验异常信息" class="headerlink" title="替换校验异常信息"></a>替换校验异常信息</h3><p><img src="/../images/13e8KW1e331Gaw3P3K6HcCVP.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;业务背景&quot;&gt;&lt;a href=&quot;#业务背景&quot; class=&quot;headerlink&quot; title=&quot;业务背景&quot;&gt;&lt;/a&gt;业务背景&lt;/h2&gt;&lt;p&gt;用户上传一个 excel 文件，要对 excel 内容做校验，然后返回校验结果。校验通过之后，在执行导入。但是现在平台要做国</summary>
      
    
    
    
    
    <category term="SpringBoot" scheme="https://linvaux.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>FileBeat+LogStash实现MySQL慢查询日志解析</title>
    <link href="https://linvaux.github.io/2024/07/26/FileBeat-LogStash%E5%AE%9E%E7%8E%B0MySQL%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E8%A7%A3%E6%9E%90/"/>
    <id>https://linvaux.github.io/2024/07/26/FileBeat-LogStash%E5%AE%9E%E7%8E%B0MySQL%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E8%A7%A3%E6%9E%90/</id>
    <published>2024-07-26T13:42:18.000Z</published>
    <updated>2024-07-26T13:43:16.162Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>背景是一个大型营销系统经常出现mysql的慢查询，导致线上服务频繁出现故障，为了查看是哪些sql有问题，并且要支持各种维度的统计查询，所以使用FileBeat+LogStash+ElasticSearch+Kibana实现此需求。本文仅描述如何配置FileBeath和LogStash实现MySQL慢查询日志解析。</p></blockquote><h1 id="FileBeat配置"><a href="#FileBeat配置" class="headerlink" title="FileBeat配置"></a>FileBeat配置</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 忽略在指定的时间跨度之前被修改的文件</span></span><br><span class="line">  <span class="attr">ignore_older:</span> <span class="string">30000h</span></span><br><span class="line">  <span class="comment"># mysql慢查询日志目录，支持*通配符匹配多级目录</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/opt/slow-sql/*.log</span></span><br><span class="line">  <span class="comment"># 文档类型是mysqlslow，这是filebeat内置的一套规则</span></span><br><span class="line">  <span class="attr">document_type:</span> <span class="string">mysqlslow</span></span><br><span class="line">  <span class="attr">multiline:</span></span><br><span class="line">    <span class="attr">pattern:</span> <span class="string">&quot;^# User@Host: &quot;</span></span><br><span class="line">    <span class="attr">negate:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">match:</span> <span class="string">after</span></span><br><span class="line">  <span class="attr">tail_files:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output.logstash:</span></span><br><span class="line">  <span class="comment"># logstash的地址，我是部署在同一台机器上的</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;127.0.0.1:5044&quot;</span>]</span><br></pre></td></tr></table></figure><h1 id="LogStash配置"><a href="#LogStash配置" class="headerlink" title="LogStash配置"></a>LogStash配置</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  # 使用filebeat推送日志</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">    host =&gt; &quot;0.0.0.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line">    # 有数据库名，有schema</span><br><span class="line">    match =&gt; &#123;&quot;message&quot; =&gt; &quot;(?m)^# User@Host: %&#123;USER:user&#125;\[[^\]]+\]\s@\s*\[%&#123;IP:clientip&#125;\]\s*([\s\S]*)#\s+Schema: (?&lt;schema&gt;\w+)([\s\S]*)\s+#\s+Query_time:\s+%&#123;NUMBER:query_time:float&#125;\s+Lock_time: %&#123;NUMBER:lock_time:float&#125;\s+Rows_sent: %&#123;NUMBER:rows_sent:int&#125;\s+Rows_examined: %&#123;NUMBER:rows_examined:int&#125;\s*([\s\S]*)use\s(?&lt;dbname&gt;\w+);([\s\S]*)SET timestamp=%&#123;NUMBER:sql_time:int&#125;&quot;&#125;</span><br><span class="line">    # 无数据库名,有schema</span><br><span class="line">    match =&gt; &#123;&quot;message&quot; =&gt; &quot;(?m)^# User@Host: %&#123;USER:user&#125;\[[^\]]+\]\s@\s*\[%&#123;IP:clientip&#125;\]\s*([\s\S]*)#\s+Schema: (?&lt;schema&gt;\w+)([\s\S]*)\s+#\s+Query_time:\s+%&#123;NUMBER:query_time:float&#125;\s+Lock_time: %&#123;NUMBER:lock_time:float&#125;\s+Rows_sent: %&#123;NUMBER:rows_sent:int&#125;\s+Rows_examined: %&#123;NUMBER:rows_examined:int&#125;\s*([\s\S]*)SET timestamp=%&#123;NUMBER:sql_time:int&#125;&quot;&#125;</span><br><span class="line">    # 有数据库名，无schema</span><br><span class="line">    match =&gt; &#123;&quot;message&quot; =&gt; &quot;(?m)^# User@Host: %&#123;USER:user&#125;\[[^\]]+\]\s@\s*\[%&#123;IP:clientip&#125;\]\s*([\s\S]*)#\s+Query_time:\s+%&#123;NUMBER:query_time:float&#125;\s+Lock_time: %&#123;NUMBER:lock_time:float&#125;\s+Rows_sent: %&#123;NUMBER:rows_sent:int&#125;\s+Rows_examined: %&#123;NUMBER:rows_examined:int&#125;\s*([\s\S]*)use\s(?&lt;dbname&gt;\w+);([\s\S]*)SET timestamp=%&#123;NUMBER:sql_time:int&#125;&quot;&#125;</span><br><span class="line">    # 无数据库名,无schema</span><br><span class="line">    match =&gt; &#123;&quot;message&quot; =&gt; &quot;(?m)^# User@Host: %&#123;USER:user&#125;\[[^\]]+\]\s@\s*\[%&#123;IP:clientip&#125;\]\s*([\s\S]*)#\s+Query_time:\s+%&#123;NUMBER:query_time:float&#125;\s+Lock_time: %&#123;NUMBER:lock_time:float&#125;\s+Rows_sent: %&#123;NUMBER:rows_sent:int&#125;\s+Rows_examined: %&#123;NUMBER:rows_examined:int&#125;\s*([\s\S]*)SET timestamp=%&#123;NUMBER:sql_time:int&#125;&quot;&#125;</span><br><span class="line">    overwrite =&gt; [&quot;message&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  grok&#123;</span><br><span class="line">      # 匹配 source中的ip</span><br><span class="line">    match =&gt; &#123;&quot;source&quot; =&gt; &quot;(?m)\s*%&#123;IP:server_ip&#125;&quot;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # 时间戳格式化并只保留日期</span><br><span class="line">  ruby &#123;</span><br><span class="line">    code =&gt; &quot;</span><br><span class="line">      require &#x27;time&#x27;</span><br><span class="line">      event.set(&#x27;date_tag&#x27;, Time.at(event.get(&#x27;sql_time&#x27;)).to_date.to_s.delete!(&#x27;-&#x27;))</span><br><span class="line">    &quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # 索引时间戳使用sql生成的时间，不再使用当前时间</span><br><span class="line">  date &#123;</span><br><span class="line">      match =&gt; [&quot;sql_time&quot;, &quot;yyyy-MM-dd HH:mm:ss&quot;, &quot;UNIX&quot;]</span><br><span class="line">      target =&gt; &quot;@timestamp&quot;</span><br><span class="line">      locale =&gt; &quot;cn&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  # 调试时使用，在控制台打印日志分割结果</span><br><span class="line">  stdout &#123;</span><br><span class="line">    codec =&gt; rubydebug &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  # es配置</span><br><span class="line"> elasticsearch &#123; </span><br><span class="line">    hosts =&gt; &quot;localhost:9200&quot; </span><br><span class="line">    # 索引名称</span><br><span class="line">    index =&gt; &quot;slow-sql-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="一键安装ELFK"><a href="#一键安装ELFK" class="headerlink" title="一键安装ELFK"></a>一键安装ELFK</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-----------------------------------------</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">@Author: linvaux</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">@Email: linvaux@outlook.com</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">@Desc: Auto install ELFK</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">----------------------------------------</span></span><br><span class="line">&quot;</span><br><span class="line">INFO()</span><br><span class="line">&#123;</span><br><span class="line">    echo -e &quot;\033[0;32m[INFO] $* \033[0m&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ERROR()</span><br><span class="line">&#123;</span><br><span class="line">    echo -e &quot;\033[0;31m[ERROR] $* \033[0m&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">WARN()</span><br><span class="line">&#123;</span><br><span class="line">    echo -e &quot;\033[0;33m[WARN] $* \033[0m&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">booster the docker-hub</span></span><br><span class="line">booster()</span><br><span class="line">&#123;   </span><br><span class="line">    daemon=&quot;/etc/docker/daemon.json&quot;</span><br><span class="line">    if [[ -e $&#123;daemon&#125; ]];then</span><br><span class="line">        INFO Backup $&#123;daemon&#125; success!</span><br><span class="line">        mv $&#123;daemon&#125; $&#123;daemon&#125;.bak</span><br><span class="line">        echo &quot;&#123;\&quot;registry-mirrors\&quot; : [\&quot;https://hub-mirror.c.163.com\&quot;]&#125;&quot; &gt; $&#123;daemon&#125;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;&#123;\&quot;registry-mirrors\&quot; : [\&quot;https://hub-mirror.c.163.com\&quot;]&#125;&quot; &gt; $&#123;daemon&#125;</span><br><span class="line">    fi</span><br><span class="line">    INFO Config docker-hub booster success!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">check_env()</span><br><span class="line">&#123;</span><br><span class="line">    if [[ -z &quot;$(which docker)&quot; ]]</span><br><span class="line">    then</span><br><span class="line">        WARN  No docker were found,try to install! </span><br><span class="line">        INFO  Start to install docker </span><br><span class="line">        source /etc/os-release</span><br><span class="line">        if [[ &quot;$ID&quot; == &quot;ubuntu&quot; ]] || [[ &quot;$ID&quot; == &quot;debain&quot; ]]</span><br><span class="line">        then</span><br><span class="line">            apt update</span><br><span class="line">            apt install curl wget -y</span><br><span class="line">            curl -fsSL https://get.docker.com | sh</span><br><span class="line">            booster</span><br><span class="line">            systemctl daemon-reload</span><br><span class="line">            systemctl restart docker</span><br><span class="line">            if [[ -z &quot;$(which java)&quot; ]];then</span><br><span class="line">                apt install openjdk-8-jdk -y</span><br><span class="line">            fi</span><br><span class="line">        elif [[ &quot;$ID&quot; == &quot;centos&quot; ]]</span><br><span class="line">        then</span><br><span class="line">            yum update -y</span><br><span class="line">            yum install  wget curl net-tools -y</span><br><span class="line">            curl -fsSL https://get.docker.com | sh</span><br><span class="line">            booster</span><br><span class="line">            systemctl daemon-reload</span><br><span class="line">            systemctl restart docker</span><br><span class="line">            if [[ -z &quot;$(which java)&quot; ]];then</span><br><span class="line">                yum install java-1.8.0-openjdk -y</span><br><span class="line">            fi</span><br><span class="line">        else</span><br><span class="line">            ERROR  Could not support $ID platform! </span><br><span class="line">            exit 1</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_elasticsearch()</span><br><span class="line">&#123;</span><br><span class="line">    INFO Start to install elasticsearch</span><br><span class="line">echo &quot;vm.max_map_count=655360&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line">    docker pull docker.elastic.co/elasticsearch/elasticsearch:6.5.4</span><br><span class="line">    docker run -d --restart=always -p 9200:9200 -p 9300:9300 --name es -h es -e cluster.name=kiki -e node.name=node1 -e http.cors.enabled=true -e http.cors.allow-origin=&quot;*&quot; -e xpack.security.enabled=false docker.elastic.co/elasticsearch/elasticsearch:6.5.4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_kibana()</span><br><span class="line">&#123;</span><br><span class="line">    INFO Start to install kibana</span><br><span class="line">    docker pull kibana:6.5.4;</span><br><span class="line">    docker run --restart=always -p 5601:5601 --name kibana -e ELASTICSEARCH_URL=http://127.0.0.1:9200 --network=host  -d kibana:6.5.4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_filebeat_and_logstash()</span><br><span class="line">&#123;</span><br><span class="line">INFO Start to install filebeat and logstash</span><br><span class="line">    source /etc/os-release</span><br><span class="line">    if [[ &quot;$ID&quot; == &quot;ubuntu&quot; ]] || [[ &quot;$ID&quot; == &quot;debain&quot; ]]</span><br><span class="line">    then</span><br><span class="line">wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -</span><br><span class="line">apt-get install apt-transport-https -y</span><br><span class="line">echo &quot;deb https://artifacts.elastic.co/packages/6.x/apt stable main&quot; | sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list</span><br><span class="line">apt-get update &amp;&amp; apt install filebeat logstash -y</span><br><span class="line">if [[ $? -ne 0 ]]</span><br><span class="line">then</span><br><span class="line">       ERROR  Install filebeat and logstash failed! </span><br><span class="line">            exit 1</span><br><span class="line">fi</span><br><span class="line">    elif [[ &quot;$ID&quot; == &quot;centos&quot; ]]</span><br><span class="line">    then</span><br><span class="line">        rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">echo -e &#x27;</span><br><span class="line">[elastic-6.x]</span><br><span class="line">name=Elastic repository for 6.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/6.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br><span class="line">&#x27; &gt; /etc/yum.repos.d/elastic.io.repo</span><br><span class="line">yum makecache &amp;&amp; yum install filebeat logstash -y</span><br><span class="line">if [[ $? -ne 0 ]]</span><br><span class="line">        then</span><br><span class="line">            ERROR  Install filebeat and logstash failed! </span><br><span class="line">            exit 1</span><br><span class="line">        fi</span><br><span class="line">    else</span><br><span class="line">        ERROR  Could not support $ID platform! </span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start_filebeat()</span><br><span class="line">&#123;</span><br><span class="line">    INFO Start to call filebeat</span><br><span class="line">    filebeat_yaml=&quot;/etc/filebeat/filebeat.yml&quot;</span><br><span class="line">    if [[ -f $&#123;filebeat_yaml&#125; ]];then</span><br><span class="line">        mv $&#123;filebeat_yaml&#125; $&#123;filebeat_yaml&#125;.bak</span><br><span class="line">        cp ./filebeat.yml $&#123;filebeat_yaml&#125;</span><br><span class="line">        systemctl restart filebeat</span><br><span class="line">        if [[ $? -ne 0 ]]</span><br><span class="line">        then</span><br><span class="line">            ERROR  Start filebeat failed! </span><br><span class="line">            exit 1</span><br><span class="line">        fi</span><br><span class="line">    else</span><br><span class="line">        ERROR $&#123;filebeat_yaml&#125; not found, please check!</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start_logstash()</span><br><span class="line">&#123;</span><br><span class="line">    INFO Start to call logstash</span><br><span class="line">    logstash_conf_dir=&quot;/etc/logstash/conf.d/&quot;</span><br><span class="line">    if [[ -e $&#123;logstash_conf_dir&#125; ]];then</span><br><span class="line">        cp ./slow_sql_by_query.conf $&#123;logstash_conf_dir&#125;</span><br><span class="line">        systemctl restart logstash</span><br><span class="line">        if [[ $? -ne 0 ]]</span><br><span class="line">        then</span><br><span class="line">            ERROR  Start logstash failed! </span><br><span class="line">            exit 1</span><br><span class="line">        fi</span><br><span class="line">    else</span><br><span class="line">        ERROR $&#123;logstash_conf_dir&#125; not found, please check!</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run()</span><br><span class="line">&#123;</span><br><span class="line">if [[ &quot;root&quot; == $(whoami) ]]</span><br><span class="line">then</span><br><span class="line">INFO Start to run...</span><br><span class="line">check_env</span><br><span class="line">install_elasticsearch</span><br><span class="line">install_kibana</span><br><span class="line">install_filebeat_and_logstash</span><br><span class="line">        # download_log</span><br><span class="line">        start_logstash</span><br><span class="line">        start_filebeat</span><br><span class="line">        # check_index</span><br><span class="line">        INFO Run success!</span><br><span class="line">else</span><br><span class="line">ERROR Run as root please!</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;背景是一个大型营销系统经常出现mysql的慢查询，导致线上服务频繁出现故障，为了查看是哪些sql有问题，并且要支持各种维度的统计查询，所以使用FileBeat+LogStash+ElasticSearch+Kibana实现此需求。本文仅描述如何配置</summary>
      
    
    
    
    
    <category term="LogStash" scheme="https://linvaux.github.io/tags/LogStash/"/>
    
  </entry>
  
  <entry>
    <title>EasyExcel解决自定义样式太多导致的 The maximum number of Cell Styles was exceeded 异常</title>
    <link href="https://linvaux.github.io/2024/07/26/EasyExcel%E8%A7%A3%E5%86%B3%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F%E5%A4%AA%E5%A4%9A%E5%AF%BC%E8%87%B4%E7%9A%84-The-maximum-number-of-Cell-Styles-was-exceeded-%E5%BC%82%E5%B8%B8/"/>
    <id>https://linvaux.github.io/2024/07/26/EasyExcel%E8%A7%A3%E5%86%B3%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F%E5%A4%AA%E5%A4%9A%E5%AF%BC%E8%87%B4%E7%9A%84-The-maximum-number-of-Cell-Styles-was-exceeded-%E5%BC%82%E5%B8%B8/</id>
    <published>2024-07-26T13:38:50.000Z</published>
    <updated>2024-07-26T13:41:07.071Z</updated>
    
    <content type="html"><![CDATA[<p>之前使用自定义样式解决了导出excel时，对不同单元格使用不同样式的需求，但是最近发现，导出大量数据时，就会产生如下异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: The maximum number of Cell Styles was exceeded. You can define up to <span class="number">64000</span> style in a .xlsx Workbook</span><br></pre></td></tr></table></figure><p>通过查看easyexcel在github上的<a href="https://github.com/alibaba/easyexcel/issues?q=The+maximum+number+of+Cell+Styles+was+exceeded.">issue</a>可以发现，有很多人都出现了类似问题，原因是EasyExcel最多支持创建64000个样式对象。但是我写入的数据远远超过了64000，每次写入数据都会去创建一次样式对象，导致生成excel失败。错误的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomCellWriteHandler</span> <span class="keyword">implements</span> <span class="title class_">CellWriteHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置拦截器顺序，需要 &gt; 50000</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 拦截器顺序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">order</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">60000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellDispose</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> context.getCell();</span><br><span class="line">        <span class="keyword">if</span> (BooleanUtils.isNotTrue(context.getHead())) &#123;</span><br><span class="line">            <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> context.getWriteWorkbookHolder().getWorkbook();</span><br><span class="line">            <span class="comment">// 此处代码有问题，每次进入条件，都会重复创建一个XSSFCellStyle对象</span></span><br><span class="line">            <span class="type">XSSFCellStyle</span> <span class="variable">cellStyle</span> <span class="operator">=</span> (XSSFCellStyle) workbook.createCellStyle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决此问题方法也比较简单，直接使用成员变量，不再重复创建对象。改造后的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomCellWriteHandler</span> <span class="keyword">implements</span> <span class="title class_">CellWriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    XSSFCellStyle cellStyle;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置拦截器顺序，需要 &gt; 50000</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 拦截器顺序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">order</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">60000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellDispose</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> context.getCell();</span><br><span class="line">        <span class="keyword">if</span> (BooleanUtils.isNotTrue(context.getHead())) &#123;</span><br><span class="line">            <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> context.getWriteWorkbookHolder().getWorkbook();</span><br><span class="line">            <span class="keyword">if</span> (cellStyle == <span class="literal">null</span>) &#123;</span><br><span class="line">                cellStyle = (XSSFCellStyle) workbook.createCellStyle();</span><br><span class="line">            &#125;</span><br><span class="line">            cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在创建新样式之前，判断下是不是已经有这个样式了，没有的话再创建，这样就避免了重复创建样式对象导致的异常。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前使用自定义样式解决了导出excel时，对不同单元格使用不同样式的需求，但是最近发现，导出大量数据时，就会产生如下异常&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span </summary>
      
    
    
    
    
    <category term="Java, EasyExcel" scheme="https://linvaux.github.io/tags/Java-EasyExcel/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件整理(一)</title>
    <link href="https://linvaux.github.io/2024/07/25/IDEA%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://linvaux.github.io/2024/07/25/IDEA%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2024-07-25T15:24:54.000Z</published>
    <updated>2024-07-25T15:38:47.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Atom-Material-Icons"><a href="#Atom-Material-Icons" class="headerlink" title="Atom Material Icons"></a>Atom Material Icons</h2><blockquote><p>material风格图标库，装完之后页面就花里胡哨的，挺好看</p></blockquote><p><img src="/../images/4o5karobikm85LEMxj4DfxUr.png" alt="image.png"></p><h2 id="Material-Theme-UI"><a href="#Material-Theme-UI" class="headerlink" title="Material Theme UI"></a>Material Theme UI</h2><blockquote><p>material风格主题，还是挺好看的</p></blockquote><p><img src="/../images/2WeZMft79yVRxEunemT7onp8.png" alt="image.png"></p><h2 id="One-Dark-Theme"><a href="#One-Dark-Theme" class="headerlink" title="One Dark Theme"></a>One Dark Theme</h2><blockquote><p>暗黑风格主题（推荐），主要是免费</p></blockquote><p><img src="/../images/QGwGDsi745gNenshZD9k68st.png" alt="image.png"></p><h2 id="Rainbow-Brackets"><a href="#Rainbow-Brackets" class="headerlink" title="Rainbow Brackets"></a>Rainbow Brackets</h2><blockquote><p>彩虹括号</p></blockquote><p><img src="/../images/mpmkLHVZCyKwPTgDWo2ajNQN.png" alt="image.png"></p><h2 id="ignore"><a href="#ignore" class="headerlink" title=".ignore"></a>.ignore</h2><blockquote><p>生成各类.ignore文件，在创建git仓库的时候使用此插件格外方便</p></blockquote><p><img src="/../images/f7764ovtWyVzqJFDgWC5cAzY.png" alt="image.png"></p><h2 id="CodeGlance"><a href="#CodeGlance" class="headerlink" title="CodeGlance"></a>CodeGlance</h2><blockquote><p>代码缩略图，方便定位代码</p></blockquote><p><img src="/../images/xvXgEmtNUAuahcuZtoY5sHuT.png" alt="image.png"></p><h2 id="Java-Bean-to-Json"><a href="#Java-Bean-to-Json" class="headerlink" title="Java Bean to Json"></a>Java Bean to Json</h2><blockquote><p>在bean上右键，即可将此bean复制为json格式，在构造请求时比较方便</p></blockquote><h2 id="maven-search"><a href="#maven-search" class="headerlink" title="maven-search"></a>maven-search</h2><blockquote><p>maven&#x2F;gradle坐标搜索插件，贼好用，支持模糊搜索</p></blockquote><p><img src="/../images/brhT5YKKHNsTncGjpV5cCdA4.png" alt="image.png"></p><h2 id="Maven-Helper"><a href="#Maven-Helper" class="headerlink" title="Maven Helper"></a>Maven Helper</h2><blockquote><p>依赖冲突查看神器，也可以树状展示依赖关系</p></blockquote><p><img src="/../images/Xt34QvHpHA8i3jjAjiKNwbSg.png" alt="image.png"></p><h2 id="Mybatisx"><a href="#Mybatisx" class="headerlink" title="Mybatisx"></a>Mybatisx</h2><blockquote><p>mybatis-plus团队出品的插件，支持从数据库表直接生成代码，包含基本CRUD功能，很方便</p></blockquote><h2 id="MyBatisCodeHelperPro"><a href="#MyBatisCodeHelperPro" class="headerlink" title="MyBatisCodeHelperPro"></a>MyBatisCodeHelperPro</h2><blockquote><p>怎么说呢，就是很厉害，基本不用自己写代码了，但是收费</p><ul><li>演示视频：<a href="https://www.bilibili.com/video/av50632948">https://www.bilibili.com/video/av50632948</a></li><li>使用文档：<a href="https://gejun123456.github.io/MyBatisCodeHelper-Pro/#/">https://gejun123456.github.io/MyBatisCodeHelper-Pro/#/</a></li></ul></blockquote><h2 id="MyBatis-Log-EasyPlus"><a href="#MyBatis-Log-EasyPlus" class="headerlink" title="MyBatis Log EasyPlus"></a>MyBatis Log EasyPlus</h2><blockquote><p>格式化mybatis日志，很好用</p></blockquote><p><img src="/../images/E3TYbUkbjRPj1m6uZiVt1k6p.png" alt="image.png"></p><h2 id="SequenceDiagram"><a href="#SequenceDiagram" class="headerlink" title="SequenceDiagram"></a>SequenceDiagram</h2><blockquote><p>生成方法的时序图，非常有用<br>官方文档：<a href="https://vanco.github.io/SequencePlugin/">https://vanco.github.io/SequencePlugin/</a></p></blockquote><p><img src="/../images/LER7ybg174LhKcQL3HaZShkv.png" alt="image.png"></p><h2 id="PlantUML"><a href="#PlantUML" class="headerlink" title="PlantUML"></a>PlantUML</h2><blockquote><p>时序图，类图绘制插件</p></blockquote><p><img src="/../images/HsoHEk1YjMgf8QEqmFxPasDD.png" alt="image.png"></p><h2 id="Grep-Console"><a href="#Grep-Console" class="headerlink" title="Grep Console"></a>Grep Console</h2><blockquote><p>由于Intellij idea不支持显示ascii颜色，grep-console插件能很好的解决这个问题，下面就以开发JavaEE项目中，结合Log4j配置多颜色日志输出功能。</p></blockquote><p><img src="/../images/DdDMTYcUyz5Zt87Duy1U6D4D.png" alt="image.png"><br><img src="/../images/6aPcSTCmJXVjy9VZyejdF1it.png" alt="image.png"></p><h2 id="GitToolBox"><a href="#GitToolBox" class="headerlink" title="GitToolBox"></a>GitToolBox</h2><blockquote><p>git工具箱，可以显示当前代码分支和每一行代码提交人以及commit log</p></blockquote><p><img src="/../images/zdGJ2NS6vj6XhRT1CbkkDNdq.png" alt="image.png"></p><h2 id="Translation"><a href="#Translation" class="headerlink" title="Translation"></a>Translation</h2><blockquote><p>翻译插件，再也不用去百度翻译了</p></blockquote><h2 id="RestfulToolkit"><a href="#RestfulToolkit" class="headerlink" title="RestfulToolkit"></a>RestfulToolkit</h2><blockquote><p>根据url直接跳转到对应的controller，比较好用，尤其是url多的时候，直接搜索url就可以了<br><img src="/../images/7Sdd5MxGWthLR63qgUp5hQMt.png" alt="image.png"></p></blockquote><h2 id="Key-promoter-X"><a href="#Key-promoter-X" class="headerlink" title="Key promoter X"></a>Key promoter X</h2><blockquote><p>记性不好的可以试试，时间长了就能记住快捷键了</p></blockquote><h2 id="Statistic"><a href="#Statistic" class="headerlink" title="Statistic"></a>Statistic</h2><blockquote><p>项目信息统计</p></blockquote><p><img src="/../images/Gw7PUVv9a1H8ERJBtKfZdcgj.png" alt="image.png"></p><h2 id="Git-Commit-Message-Helper"><a href="#Git-Commit-Message-Helper" class="headerlink" title="Git Commit Message Helper"></a>Git Commit Message Helper</h2><blockquote><p>帮助生成commit message<br><img src="/../images/T4QM3G1XVVKLiZk8AYdVgPSq.png" alt="image.png"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Atom-Material-Icons&quot;&gt;&lt;a href=&quot;#Atom-Material-Icons&quot; class=&quot;headerlink&quot; title=&quot;Atom Material Icons&quot;&gt;&lt;/a&gt;Atom Material Icons&lt;/h2&gt;&lt;bloc</summary>
      
    
    
    
    <category term="工具分享" scheme="https://linvaux.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Java, IDEA" scheme="https://linvaux.github.io/tags/Java-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>EasyExcel自定义字段导入</title>
    <link href="https://linvaux.github.io/2024/07/25/EasyExcel%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E6%AE%B5%E5%AF%BC%E5%85%A5/"/>
    <id>https://linvaux.github.io/2024/07/25/EasyExcel%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E6%AE%B5%E5%AF%BC%E5%85%A5/</id>
    <published>2024-07-25T15:10:00.000Z</published>
    <updated>2024-07-25T15:10:32.847Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h2><p>原先的导入功能只支持使用固定模板导入，模板格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCaseExcelData</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;所属功能模块&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用例编号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;必填项不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;*用例名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;必填项不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;*优先级&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String caseLevel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;必填项不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;*用例类型&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String caseType;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用例标签&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String tags;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;前置条件&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String preSteps;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;必填项不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;*操作步骤/场景描述&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String stepDesc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;必填项不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;*预期结果&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String expectResult;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;关联需求类型&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String requirementType;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;关联需求ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String requirementId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用例版本&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String caseVersion;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EasyExcel 导入监听器直接使用AnalysisEventListener<TestCaseExcelData> 即可实现导入校验，校验规则较为复杂，不在此处展开。<br>现在要求用户配置了自定义字段之后，还可以导入自定义字段，同时保留对固定字段的校验逻辑。因此原有的适用对象的监听器不再适用，需要使用无对象的方式做数据校验。</p><h2 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h2><ul><li>EasyExcel 无对象方式的监听器是继承AnalysisEventListener&lt;Map&lt;Integer, String&gt;&gt;类，在重写了invoke() 方法后发现，入参是 Map&lt;Integer, String&gt; data，这就导致我无法对每一行数据按照原有的方式校验。</li><li>用户导入的模板列顺序是不固定的，因此也没法遍历 data 进行原有规则的校验。</li></ul><h2 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3.解决方案"></a>3.解决方案</h2><h3 id="3-1-解决思路"><a href="#3-1-解决思路" class="headerlink" title="3.1 解决思路"></a>3.1 解决思路</h3><ul><li>既然 invoke() 方法入参是 Map&lt;Integer, String&gt; data 这种数据结构，那能不能把这个 Map 中固定的字段转为一个 TestCaseExcelData 对象来处理？</li><li>如果要转为一个对象，那怎么把 Map 中的数据跟对象的字段做映射？</li></ul><h3 id="3-2-Map-转对象"><a href="#3-2-Map-转对象" class="headerlink" title="3.2 Map 转对象"></a>3.2 Map 转对象</h3><ul><li>Map&lt;Integer, String&gt; 是当前行的数据，其中 key 是当前行的列索引，value 是当前单元格的值，如果要转对象，首先得知道这个单元格对应的表头是什么，获取表头的方式很简单，直接在 listener 中定义一个 Map&lt;Integer, String&gt; headMap ,然后重写 invokeHeadMap(Map&lt;Integer, String&gt; headMap, AnalysisContext context) 方法，即可获取到表头。</li><li>取到表头之后，就可以在 invoke(Map&lt;Integer, String&gt; data, AnalysisContext context)方法中遍历data，根据此 map 的 key 来获取到当前单元格表头信息。代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Map&lt;Integer, String&gt; data, AnalysisContext context)</span> &#123;</span><br><span class="line">        data.forEach((index, value) -&gt; &#123;</span><br><span class="line">            <span class="comment">// 获取表头</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">headName</span> <span class="operator">=</span> headMap.get(index);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>取到了当前单元格的对应的表头之后，发现这个表头就是 TestCaseExcelData 类中属性上加的 @ExcelProperty(value &#x3D; “用例版本”) 注解中 value 属性的值，那就简单了，直接通过反射获取这个类所有表头和对应的属性，然后存到一个 Map&lt;Stirng, Field&gt; fieldStringMap 中就好了，这样就能通过表头获取到这个表头字段对应的类属性，为我们后面创建对象奠定了基础。代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Field[] fields = TestCaseExcelData.class.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">    <span class="keyword">if</span> (field.isAnnotationPresent(ExcelProperty.class)) &#123;</span><br><span class="line">        <span class="type">ExcelProperty</span> <span class="variable">declaredAnnotation</span> <span class="operator">=</span> field.getDeclaredAnnotation(ExcelProperty.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">headValue</span> <span class="operator">=</span> declaredAnnotation.value()[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">this</span>.fieldStringMap.put(headValue, field);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>经过上面的几步操作，我们已经得到了如下的几个Map<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前行的数据 &lt;列索引, 单元格值&gt;</span></span><br><span class="line">Map&lt;Integer, String&gt; data;</span><br><span class="line"><span class="comment">// 表头的数据 &lt;列索引, 单元格值&gt;</span></span><br><span class="line">Map&lt;Integer, String&gt; headMap;</span><br><span class="line"><span class="comment">// 实体对象表头和对应字段的数据 &lt;表头名称, 表头对应的属性&gt;</span></span><br><span class="line">Map&lt;Stirng, Field&gt; fieldStringMap;</span><br></pre></td></tr></table></figure></li><li>后面的思路经很清晰了，遍历行数据Map&lt;Integer, String&gt; data ，通过 key 来确定<br>当前单元格对应的表头，然后通过表头来获取实体类对应的属性，再通过反射来给这个属性赋值。代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Map&lt;Integer, String&gt; data, AnalysisContext context)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建实体对象</span></span><br><span class="line">        <span class="type">TestCaseExcelData</span> <span class="variable">rawData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestCaseExcelData</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            data.forEach((index, value) -&gt; &#123;</span><br><span class="line">                <span class="comment">// 获取到当前单元格的表头</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">headName</span> <span class="operator">=</span> headMap.get(index);</span><br><span class="line">                <span class="comment">// 根据表头获取实体类的属性</span></span><br><span class="line">                <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> fieldStringMap.get(headName);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 判断实体类是否有此属性</span></span><br><span class="line">                    <span class="keyword">if</span> (field != <span class="literal">null</span>) &#123;</span><br><span class="line">                        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        <span class="comment">// 通过反射直接赋值</span></span><br><span class="line">                        field.set(rawData, value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 解析自定义字段，只有系统配置的字段才会被缓存</span></span><br><span class="line">                List&lt;CustomFieldPO&gt; customFieldPOS = systemCustomFieldMap.get(headName);</span><br><span class="line">                <span class="keyword">if</span> (CollectionUtils.isNotEmpty(customFieldPOS)) &#123;</span><br><span class="line">                    customFieldMap.put(customFieldPOS.get(<span class="number">0</span>).getFieldKey(), value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 固定字段校验</span></span><br><span class="line">            ExcelValidateHelper.validateEntity(rawData);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>经过以上操作，我们成功的把一个 Map 转为了一个已知的对象，这样就跟通过对象导入一样了，后面校验的代码也无需再重复编写。</li></ul><h2 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h2><p>最后，附上自定义模板校验表头的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeHeadMap</span><span class="params">(Map&lt;Integer, String&gt; headMap, AnalysisContext context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.invokeHeadMap(headMap, context);</span><br><span class="line">        <span class="comment">// 限制文件行数不超过5000行</span></span><br><span class="line">        <span class="keyword">if</span> (context.readSheetHolder().getApproximateTotalRowNumber() &gt; <span class="number">5000</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(CommonException.EXCEL_ROW_EXCEEDED);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 校验excel模版是否正确</span></span><br><span class="line">        ExcelImportUtil.validateHeadLoosely(headMap, <span class="built_in">this</span>.dynamicCaseHeader.get(<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">this</span>.headMap = headMap;</span><br><span class="line">        Field[] fields = TestCaseExcelData.class.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="keyword">if</span> (field.isAnnotationPresent(ExcelProperty.class)) &#123;</span><br><span class="line">                <span class="type">ExcelProperty</span> <span class="variable">declaredAnnotation</span> <span class="operator">=</span> field.getDeclaredAnnotation(ExcelProperty.class);</span><br><span class="line">                <span class="type">String</span> <span class="variable">headValue</span> <span class="operator">=</span> declaredAnnotation.value()[<span class="number">0</span>];</span><br><span class="line">                <span class="built_in">this</span>.fieldStringMap.put(headValue, field);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表头宽松校验</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;只校验表头是否存在模板中的字段&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;不允许存在重复的表头&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;导入文件中可以包含多余的列名&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headMap              实际读到的表头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expectedHeadMapFiled 期望的表头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">validateHeadLoosely</span><span class="params">(Map&lt;Integer, String&gt; headMap, List&lt;String&gt; expectedHeadMapFiled)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isEmpty(expectedHeadMapFiled) || MapUtils.isEmpty(headMap)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(CommonException.EXCEL_TEMPLATE_IS_NOT_CORRECT);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 移除没有内容的表头</span></span><br><span class="line">            headMap.entrySet().removeIf(entry -&gt; entry.getValue() == <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 判断是否存在重复列</span></span><br><span class="line">            Collection&lt;String&gt; headValues = headMap.values();</span><br><span class="line">            Set&lt;String&gt; headValuesSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(headValues);</span><br><span class="line">            <span class="keyword">if</span> (headValues.size() != headValuesSet.size()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(CommonException.EXCEL_HEADS_DUPLICATED);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断模板字段是否都包含在表头里</span></span><br><span class="line">            <span class="keyword">for</span> (String value : expectedHeadMapFiled) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!headMap.containsValue(value)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(CommonException.EXCEL_TEMPLATE_IS_NOT_CORRECT);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(<span class="string">&quot;Excel表头校验失败，异常详情：&quot;</span> + ExceptionUtil.getErrorMessage(e));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1.背景&quot;&gt;&lt;/a&gt;1.背景&lt;/h2&gt;&lt;p&gt;原先的导入功能只支持使用固定模板导入，模板格式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;</summary>
      
    
    
    
    
    <category term="Java, EasyExcel" scheme="https://linvaux.github.io/tags/Java-EasyExcel/"/>
    
  </entry>
  
  <entry>
    <title>EasyExcel自定义单元格样式</title>
    <link href="https://linvaux.github.io/2024/07/25/EasyExcel%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%95%E5%85%83%E6%A0%BC%E6%A0%B7%E5%BC%8F/"/>
    <id>https://linvaux.github.io/2024/07/25/EasyExcel%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%95%E5%85%83%E6%A0%BC%E6%A0%B7%E5%BC%8F/</id>
    <published>2024-07-25T15:09:03.000Z</published>
    <updated>2024-07-25T15:11:30.742Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前在开发系统的导出功能时需要对单元格增加不同的样式，过程有点曲折，记录一下以备后续用到</p></blockquote><ul><li>创建java项目，引入以下依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>excel 导出代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> EasyExcel.write(filePath).build()) &#123;</span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="string">&quot;自定义样式&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置表头</span></span><br><span class="line">                .head(ExportHeaderDTO.class)</span><br><span class="line">                <span class="comment">// 不使用默认样式</span></span><br><span class="line">                .useDefaultStyle(Boolean.FALSE)</span><br><span class="line">                <span class="comment">// 添加自定义单元格样式</span></span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">CustomCellWriteHandler</span>())</span><br><span class="line">                <span class="comment">// 添加单元格边框样式</span></span><br><span class="line">                .registerWriteHandler(CustomHorizontalCellStyleStrategy.cellBorder())</span><br><span class="line">                .build();</span><br><span class="line">        excelWriter.write(collect, sheet);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>自定义样式 CustomCellWriteHandler.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomCellWriteHandler</span> <span class="keyword">implements</span> <span class="title class_">CellWriteHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置拦截器顺序，需要 &gt; 50000</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 拦截器顺序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">order</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">60000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellDispose</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> context.getCell();</span><br><span class="line">        <span class="keyword">if</span> (BooleanUtils.isNotTrue(context.getHead())) &#123;</span><br><span class="line">            <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> context.getWriteWorkbookHolder().getWorkbook();</span><br><span class="line">            <span class="type">XSSFCellStyle</span> <span class="variable">cellStyle</span> <span class="operator">=</span> (XSSFCellStyle) workbook.createCellStyle();</span><br><span class="line">            cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">            <span class="comment">// 设置边框粗细</span></span><br><span class="line">            cellStyle.setBorderRight(BorderStyle.THIN);</span><br><span class="line">            cellStyle.setBorderTop(BorderStyle.THIN);</span><br><span class="line">            cellStyle.setBorderRight(BorderStyle.THIN);</span><br><span class="line">            cellStyle.setBorderBottom(BorderStyle.THIN);</span><br><span class="line">            <span class="comment">// 设置边框颜色</span></span><br><span class="line">            cellStyle.setTopBorderColor(IndexedColors.BLACK.index);</span><br><span class="line">            cellStyle.setBottomBorderColor(IndexedColors.BLACK.index);</span><br><span class="line">            cellStyle.setLeftBorderColor(IndexedColors.BLACK.index);</span><br><span class="line">            cellStyle.setRightBorderColor(IndexedColors.BLACK.index);</span><br><span class="line">            cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">            <span class="comment">// 水平居中</span></span><br><span class="line">            cellStyle.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">            <span class="comment">// 垂直居中</span></span><br><span class="line">            cellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">            <span class="type">Font</span> <span class="variable">font</span> <span class="operator">=</span> workbook.createFont();</span><br><span class="line">            <span class="keyword">if</span> (cell.getColumnIndex() == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 设置字体颜色</span></span><br><span class="line">                font.setColor(IndexedColors.DARK_TEAL.index);</span><br><span class="line">                cellStyle.setFont(font);</span><br><span class="line">                <span class="comment">// 设置单元格颜色</span></span><br><span class="line">                cellStyle.setFillForegroundColor(<span class="keyword">new</span> <span class="title class_">XSSFColor</span>(ColorConstant.CustomColor.PINK, CustomIndexedColorMap.fromColors(CTColors.Factory.newInstance())));</span><br><span class="line">                cell.setCellStyle(cellStyle);</span><br><span class="line">                <span class="comment">// 这里要把 WriteCellData的样式清空， 不然后面还有一个拦截器 FillStyleCellWriteHandler 默认会将 WriteCellStyle 设置到cell里面去 会导致自己设置的不一样（很关键）</span></span><br><span class="line">                context.getFirstCellData().setWriteCellStyle(<span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>边框样式 CustomHorizontalCellStyleStrategy.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomHorizontalCellStyleStrategy</span> <span class="keyword">extends</span> <span class="title class_">HorizontalCellStyleStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">order</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">6500</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单元格边框</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 样式策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HorizontalCellStyleStrategy <span class="title function_">cellBorder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WriteCellStyle</span> <span class="variable">headWriteCellStyle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteCellStyle</span>();</span><br><span class="line">        headWriteCellStyle.setTopBorderColor(IndexedColors.BLACK.index);</span><br><span class="line">        headWriteCellStyle.setBottomBorderColor(IndexedColors.BLACK.index);</span><br><span class="line">        headWriteCellStyle.setLeftBorderColor(IndexedColors.BLACK.index);</span><br><span class="line">        headWriteCellStyle.setRightBorderColor(IndexedColors.BLACK.index);</span><br><span class="line">        headWriteCellStyle.setFillPatternType(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">        <span class="type">WriteCellStyle</span> <span class="variable">contentWriteCellStyle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteCellStyle</span>();</span><br><span class="line">        contentWriteCellStyle.setBorderRight(BorderStyle.THIN);</span><br><span class="line">        contentWriteCellStyle.setBorderTop(BorderStyle.THIN);</span><br><span class="line">        contentWriteCellStyle.setBorderRight(BorderStyle.THIN);</span><br><span class="line">        contentWriteCellStyle.setBorderBottom(BorderStyle.THIN);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HorizontalCellStyleStrategy</span>(headWriteCellStyle, contentWriteCellStyle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;之前在开发系统的导出功能时需要对单元格增加不同的样式，过程有点曲折，记录一下以备后续用到&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;创建java项目，引入以下依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight </summary>
      
    
    
    
    
    <category term="Java, EasyExcel" scheme="https://linvaux.github.io/tags/Java-EasyExcel/"/>
    
  </entry>
  
  <entry>
    <title>基于Centos7的UI自动化环境Dockerfile</title>
    <link href="https://linvaux.github.io/2024/07/25/%E5%9F%BA%E4%BA%8ECentos7%E7%9A%84UI%E8%87%AA%E5%8A%A8%E5%8C%96%E7%8E%AF%E5%A2%83Dockerfile/"/>
    <id>https://linvaux.github.io/2024/07/25/%E5%9F%BA%E4%BA%8ECentos7%E7%9A%84UI%E8%87%AA%E5%8A%A8%E5%8C%96%E7%8E%AF%E5%A2%83Dockerfile/</id>
    <published>2024-07-25T15:08:06.000Z</published>
    <updated>2024-07-25T15:08:31.205Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line"></span><br><span class="line">MAINTAINER linvaux &lt;linvaux@outlook.com&gt;</span><br><span class="line"></span><br><span class="line">WORKDIR /opt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改源，安装依赖</span></span><br><span class="line">RUN sed -i <span class="string">&quot;s/#baseurl/baseurl/g&quot;</span> /etc/yum.repos.d/CentOS-Base.repo &amp;&amp; \</span><br><span class="line">    sed -i <span class="string">&quot;s/mirrorlist=http/#mirrorlist=http/g&quot;</span> /etc/yum.repos.d/CentOS-Base.repo &amp;&amp; \</span><br><span class="line">    sed -i <span class="string">&quot;s@http://mirror.centos.org@https://repo.huaweicloud.com@g&quot;</span> /etc/yum.repos.d/CentOS-Base.repo &amp;&amp; \</span><br><span class="line">    yum clean all &amp;&amp; \</span><br><span class="line">    yum makecache &amp;&amp; \</span><br><span class="line">    yum update -y &amp;&amp; \</span><br><span class="line">    yum install -y wget git zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel libffi-devel gcc make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装JDK1.8</span></span><br><span class="line">RUN wget http://10.177.248.111:8089/ftp/dev_tools/jdk-8u271-linux-x64.tar.gz &amp;&amp; \</span><br><span class="line">    tar -vxf jdk-8u271-linux-x64.tar.gz &amp;&amp; \</span><br><span class="line">    <span class="built_in">mv</span> jdk1.8.0_271/ /usr/local/ &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;export JAVA_HOME=/usr/local/jdk1.8.0_271&#x27;</span> &gt;&gt; /etc/profile &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;export JRE_HOME=$&#123;JAVA_HOME&#125;/jre&#x27;</span> &gt;&gt; /etc/profile &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib&#x27;</span> &gt;&gt; /etc/profile &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line">    <span class="built_in">echo</span> `java -version`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装python3.7</span></span><br><span class="line">RUN wget https://mirrors.huaweicloud.com/python/3.7.8/Python-3.7.8.tgz &amp;&amp; \ </span><br><span class="line">    tar -vxf Python-3.7.8.tgz &amp;&amp; \</span><br><span class="line">    <span class="built_in">mv</span> Python-3.7.8 /usr/local/python378 &amp;&amp; \</span><br><span class="line">    <span class="built_in">cd</span> /usr/local/python378 &amp;&amp; \</span><br><span class="line">    ./configure --prefix=/usr/local/python378 --enable-loadable-sqlite-extensions --with-ssl &amp;&amp;\</span><br><span class="line">    make -j$(<span class="built_in">nproc</span>) &amp;&amp; \</span><br><span class="line">    make install -j$(<span class="built_in">nproc</span>) &amp;&amp; \</span><br><span class="line">    <span class="built_in">ln</span> -s /usr/local/python378/bin/python3.7 /usr/bin/python3 &amp;&amp; \</span><br><span class="line">    <span class="built_in">ln</span> -s /usr/local/python378/bin/pip3 /usr/bin/pip3 &amp;&amp; \</span><br><span class="line">    <span class="built_in">mkdir</span> /root/.pip &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[global]&quot;</span> &gt; /root/.pip/pip.conf &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;index-url=https://pypi.douban.com/simple/&quot;</span> &gt;&gt; /root/.pip/pip.conf &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[install]&quot;</span> &gt;&gt; /root/.pip/pip.conf &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;trusted-host=pypi.douban.com&quot;</span> &gt;&gt; /root/.pip/pip.conf</span><br><span class="line">    <span class="built_in">echo</span> `python3 -V`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装chrome</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&#x27;[google-chrome]&#x27;</span> &gt; /etc/yum.repos.d/google-chrome.repo &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;name=google-chrome&#x27;</span> &gt;&gt; /etc/yum.repos.d/google-chrome.repo &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;baseurl=http://dl.google.com/linux/chrome/rpm/stable/$basearch&#x27;</span> &gt;&gt; /etc/yum.repos.d/google-chrome.repo &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;enabled=1&#x27;</span> &gt;&gt; /etc/yum.repos.d/google-chrome.repo &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;gpgcheck=1&#x27;</span> &gt;&gt; /etc/yum.repos.d/google-chrome.repo &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub&#x27;</span> &gt;&gt; /etc/yum.repos.d/google-chrome.repo &amp;&amp; \</span><br><span class="line">    yum -y install google-chrome-stable --nogpgcheck &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> `google-chrome --version`</span><br><span class="line"><span class="comment"># 安装chromedriver驱动</span></span><br><span class="line"><span class="comment"># 安装allure</span></span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">rm</span> -rf jdk-8u271-linux-x64.tar.gz &amp;&amp; \</span><br><span class="line"><span class="built_in">rm</span> -rf Python-3.7.8.tgz &amp;&amp; \</span><br><span class="line">    yum clean all</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
    <category term="Docker, 自动化测试" scheme="https://linvaux.github.io/tags/Docker-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>基于Centos7的Python3.7镜像构建</title>
    <link href="https://linvaux.github.io/2024/07/25/%E5%9F%BA%E4%BA%8ECentos7%E7%9A%84Python3-7%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/"/>
    <id>https://linvaux.github.io/2024/07/25/%E5%9F%BA%E4%BA%8ECentos7%E7%9A%84Python3-7%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/</id>
    <published>2024-07-25T15:07:16.000Z</published>
    <updated>2024-07-25T15:07:40.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line"></span><br><span class="line">MAINTAINER linvaux &lt;linvaux@outlook.com&gt;</span><br><span class="line"></span><br><span class="line">WORKDIR /opt</span><br><span class="line"></span><br><span class="line">RUN sed -i <span class="string">&quot;s/#baseurl/baseurl/g&quot;</span> /etc/yum.repos.d/CentOS-Base.repo &amp;&amp; \</span><br><span class="line">    sed -i <span class="string">&quot;s/mirrorlist=http/#mirrorlist=http/g&quot;</span> /etc/yum.repos.d/CentOS-Base.repo &amp;&amp; \</span><br><span class="line">    sed -i <span class="string">&quot;s@http://mirror.centos.org@https://repo.huaweicloud.com@g&quot;</span> /etc/yum.repos.d/CentOS-Base.repo &amp;&amp; \</span><br><span class="line">yum clean all &amp;&amp; \</span><br><span class="line">    yum makecache &amp;&amp; \</span><br><span class="line">    yum update -y</span><br><span class="line"></span><br><span class="line">RUN yum install -y wget zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel libffi-devel gcc make</span><br><span class="line"></span><br><span class="line">RUN wget https://mirrors.huaweicloud.com/python/3.7.8/Python-3.7.8.tgz &amp;&amp; \ </span><br><span class="line">    tar -vxf Python-3.7.8.tgz &amp;&amp; \</span><br><span class="line">    <span class="built_in">mv</span> Python-3.7.8 /usr/local/python378 &amp;&amp; \</span><br><span class="line">    <span class="built_in">cd</span> /usr/local/python378 &amp;&amp; \</span><br><span class="line">    ./configure --prefix=/usr/local/python378 --enable-loadable-sqlite-extensions --with-ssl &amp;&amp;\</span><br><span class="line">    make -j$(<span class="built_in">nproc</span>) &amp;&amp; \</span><br><span class="line">    make install -j$(<span class="built_in">nproc</span>) &amp;&amp; \</span><br><span class="line">    <span class="built_in">ln</span> -s /usr/local/python378/bin/python3.7 /usr/bin/python3 &amp;&amp; \</span><br><span class="line">  <span class="built_in">ln</span> -s /usr/local/python378/bin/pip3 /usr/bin/pip3 &amp;&amp; \</span><br><span class="line">    <span class="built_in">mkdir</span> /root/.pip &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[global]&quot;</span> &gt; /root/.pip/pip.conf &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;index-url=https://pypi.douban.com/simple/&quot;</span> &gt;&gt; /root/.pip/pip.conf &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[install]&quot;</span> &gt;&gt; /root/.pip/pip.conf &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;trusted-host=pypi.douban.com&quot;</span> &gt;&gt; /root/.pip/pip.conf</span><br><span class="line">RUN <span class="built_in">rm</span> -rf Python-3.7.8.tgz</span><br></pre></td></tr></table></figure><h1 id="构建命令"><a href="#构建命令" class="headerlink" title="构建命令"></a>构建命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t centos-python378 .</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dockerfile&quot;&gt;&lt;a href=&quot;#Dockerfile&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile&quot;&gt;&lt;/a&gt;Dockerfile&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://linvaux.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>基于Ubuntu16.04的Python3.7镜像构建</title>
    <link href="https://linvaux.github.io/2024/07/25/%E5%9F%BA%E4%BA%8EUbuntu16-04%E7%9A%84Python3-7%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/"/>
    <id>https://linvaux.github.io/2024/07/25/%E5%9F%BA%E4%BA%8EUbuntu16-04%E7%9A%84Python3-7%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/</id>
    <published>2024-07-25T15:06:21.000Z</published>
    <updated>2024-07-25T15:06:40.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:16.04</span><br><span class="line"></span><br><span class="line">MAINTAINER linvaux &lt;linvaux@outlook.com&gt;</span><br><span class="line"></span><br><span class="line">WORKDIR /opt</span><br><span class="line"></span><br><span class="line">RUN sed -i &quot;s@http://.*archive.ubuntu.com@http://repo.huaweicloud.com@g&quot; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    sed -i &quot;s@http://.*security.ubuntu.com@http://repo.huaweicloud.com@g&quot; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    apt-get update &amp;&amp; \</span><br><span class="line">    apt-get upgrade -y</span><br><span class="line"></span><br><span class="line">RUN apt-get install -y gcc make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev</span><br><span class="line"></span><br><span class="line">RUN wget https://mirrors.huaweicloud.com/python/3.7.8/Python-3.7.8.tgz &amp;&amp; \ </span><br><span class="line">    tar -vxf Python-3.7.8.tgz &amp;&amp; \</span><br><span class="line">    mv Python-3.7.8 /usr/local/python378 &amp;&amp; \</span><br><span class="line">    cd /usr/local/python378 &amp;&amp; \</span><br><span class="line">    ./configure --prefix=/usr/local/python378 --enable-loadable-sqlite-extensions --with-ssl &amp;&amp;\</span><br><span class="line">    make -j$(nproc) &amp;&amp; \</span><br><span class="line">    make install -j$(nproc) &amp;&amp; \</span><br><span class="line">    ln -s /usr/local/python378/bin/python3.7 /usr/bin/python3 &amp;&amp; \</span><br><span class="line">  ln -s /usr/local/python378/bin/pip3 /usr/bin/pip3 &amp;&amp; \</span><br><span class="line">    mkdir /root/.pip &amp;&amp; \</span><br><span class="line">    echo &quot;[global]&quot; &gt; /root/.pip/pip.conf &amp;&amp; \</span><br><span class="line">    echo &quot;index-url=https://pypi.douban.com/simple/&quot; &gt;&gt; /root/.pip/pip.conf &amp;&amp; \</span><br><span class="line">    echo &quot;[install]&quot; &gt;&gt; /root/.pip/pip.conf &amp;&amp; \</span><br><span class="line">    echo &quot;trusted-host=pypi.douban.com&quot; &gt;&gt; /root/.pip/pip.conf</span><br><span class="line">RUN rm -rf Python-3.7.8.tgz</span><br></pre></td></tr></table></figure><h2 id="构建命令"><a href="#构建命令" class="headerlink" title="构建命令"></a>构建命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t ubuntu-python378 .</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dockerfile&quot;&gt;&lt;a href=&quot;#Dockerfile&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile&quot;&gt;&lt;/a&gt;Dockerfile&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://linvaux.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>CentOS安装Google-Chrome浏览器</title>
    <link href="https://linvaux.github.io/2024/07/25/CentOS%E5%AE%89%E8%A3%85Google-Chrome%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>https://linvaux.github.io/2024/07/25/CentOS%E5%AE%89%E8%A3%85Google-Chrome%E6%B5%8F%E8%A7%88%E5%99%A8/</id>
    <published>2024-07-25T15:05:23.000Z</published>
    <updated>2024-07-25T15:06:01.769Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h3><ul><li>在目录 &#x2F;etc&#x2F;yum.repos.d&#x2F; 下新建文件 google-chrome.repo</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/google-chrome.repo</span><br></pre></td></tr></table></figure><ul><li>添加如下内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[google-chrome]</span><br><span class="line">name=google-chrome</span><br><span class="line">baseurl=http://dl.google.com/linux/chrome/rpm/stable/$basearch</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub</span><br></pre></td></tr></table></figure><h3 id="安装google-chrome浏览器及chromedriver"><a href="#安装google-chrome浏览器及chromedriver" class="headerlink" title="安装google chrome浏览器及chromedriver"></a>安装google chrome浏览器及chromedriver</h3><ul><li>Google官方源安装：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum makecache</span><br><span class="line">yum -y install google-chrome-stable</span><br></pre></td></tr></table></figure><ul><li>Google官方源可能在中国无法使用，导致安装失败或者在国内无法更新，可以添加以下参数来安装：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install google-chrome-stable --nogpgcheck</span><br></pre></td></tr></table></figure><ul><li>检查chrome版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google-chrome --version</span><br></pre></td></tr></table></figure><ul><li><a href="https://repo.huaweicloud.com/chromedriver/">下载</a>对应版本的的chromedriver</li><li>检查chromedriver版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chromedriver --version</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;配置yum源&quot;&gt;&lt;a href=&quot;#配置yum源&quot; class=&quot;headerlink&quot; title=&quot;配置yum源&quot;&gt;&lt;/a&gt;配置yum源&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在目录 &amp;#x2F;etc&amp;#x2F;yum.repos.d&amp;#x2F; 下新建文件 googl</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://linvaux.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Mac使用Jenv实现Jdk多版本管理</title>
    <link href="https://linvaux.github.io/2024/07/25/Mac%E4%BD%BF%E7%94%A8Jenv%E5%AE%9E%E7%8E%B0Jdk%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    <id>https://linvaux.github.io/2024/07/25/Mac%E4%BD%BF%E7%94%A8Jenv%E5%AE%9E%E7%8E%B0Jdk%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</id>
    <published>2024-07-25T14:53:58.000Z</published>
    <updated>2024-07-25T15:00:39.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前在开发过程中，需要同时安装 Jdk8, Jdk11, Jdk17 进行项目开发，为了统一管理Jdk 环境，需要一款类似 conda 的工具来管理多套 Jdk 环境，可选的方案有以下几种：</p><ol><li>使用 shell 脚本来动态设置 JAVA_HOME；</li><li>使用 scoop 来管理环境；</li><li>使用 jenv 来管理环境；</li></ol><p>经过使用体验，最后选择了 jenv 来做 jdk 版本管理。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在 mac 下面可以使用 brew 来安装 jenv</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install jenv</span><br></pre></td></tr></table></figure><p>我用的 zsh，因此还需要将 jenv 添加到 zsh 中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行 jenv 初始化脚本，类似于 conda init 命令</span></span><br><span class="line">echo &#x27;eval &quot;$(jenv init -)&quot;&#x27; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="1-添加在本地已经安装的-jdk"><a href="#1-添加在本地已经安装的-jdk" class="headerlink" title="1.添加在本地已经安装的 jdk"></a>1.添加在本地已经安装的 jdk</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jenv add /Library/Java/JavaVirtualMachines/jdk-17.0.5.jdk/Contents/Home/</span><br><span class="line">jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_301.jdk/Contents/Home/</span><br><span class="line">jenv add /Library/Java/JavaVirtualMachines/jdk-11.0.11.jdk/Contents/Home/</span><br></pre></td></tr></table></figure><h3 id="2-列出已经添加的-jdk-版本"><a href="#2-列出已经添加的-jdk-版本" class="headerlink" title="2.列出已经添加的 jdk 版本"></a>2.列出已经添加的 jdk 版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jenv versions</span><br></pre></td></tr></table></figure><p><img src="/../images/iSQTdua4zwUJpzHvEXp7yxnr.png" alt="image.png"></p><h3 id="3-设置-jdk-的三种方式"><a href="#3-设置-jdk-的三种方式" class="headerlink" title="3.设置 jdk 的三种方式"></a>3.设置 jdk 的三种方式</h3><ol><li><p>jenv local <version>：该命令将会在当前目录下设置特定的 Java 版本。这意味着只有在该目录下执行程序调用时才会使用该版本的 Java。</p></li><li><p>jenv global <version>：该命令将会设置系统全局的 Java 版本。当在终端或其它地方运行 Java 应用程序时，都将使用该版本的 Java。</p></li><li><p>jenv shell <version>：该命令将会在当前 Shell 会话中设置特定的 Java 版本。这意味着只有在该 Shell 会话中执行程序调用时才会使用该版本的 Java。</p><p> 因此，这三个命令的主要区别在于设置 Java 版本的作用域和范围。jenv local 的作用域仅限于当前工作目录，jenv global 的作用域与操作系统全局环境相关，而 jenv shell 的作用域仅限于当前 Shell 会话。因此，根据具体情况选择使用不同的命令。需要注意的是，jenv 只对使用 jenv exec 执行的命令生效，对于直接使用 java 命令执行的程序，jenv 并不会自动切换 Java 版本。因此，需要手动设置系统环境变量或使用别的工具来切换 Java 版本。</p></li></ol><h3 id="4-Jenv-诊断"><a href="#4-Jenv-诊断" class="headerlink" title="4.Jenv 诊断"></a>4.Jenv 诊断</h3><p>jenv doctor 是 jenv 命令行工具提供的一个诊断工具，用于检查本地系统的 Java 环境是否正确配置。当我们安装 jenv 后，需要将其配置到系统环境变量中，并安装所需的 Java 版本。使用 jenv doctor 命令可以检测配置和 Java 版本是否正确安装，并提供诊断信息和建议以解决检测出的问题。jenv doctor 常见的使用场景有：</p><ol><li>检查 jenv 的环境变量是否正确配置。jenv 是一款基于环境变量来管理多个 Java 版本的工具，因此我们需要将其配置到系统环境变量中，并确保环境变量的正确性。</li><li>检查 jenv 的安装路径和版本号。检查 jenv 实际安装的位置以及当前所用的版本号，是否符合预期要求。</li><li>检查可用的 Java 版本是否正确安装和配置。jenv doctor 会检查本地系统环境中已经安装的 Java 版本，是否安装在了 jenv 管理的目录中，并支持在 jenv 中进行切换。</li></ol><p><img src="/../images/VuWUGUBYvMFibu1RHPRre6Qn.png" alt="image.png"></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol><li><a href="https://www.jenv.be/">Jenv 官方文档</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;目前在开发过程中，需要同时安装 Jdk8, Jdk11, Jdk17 进行项目开发，为了统一管理Jdk 环境，需要一款类似 conda 的工</summary>
      
    
    
    
    <category term="工具分享" scheme="https://linvaux.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Mac, JDK" scheme="https://linvaux.github.io/tags/Mac-JDK/"/>
    
  </entry>
  
  <entry>
    <title>Pytest参数</title>
    <link href="https://linvaux.github.io/2024/07/25/Pytest%E5%8F%82%E6%95%B0/"/>
    <id>https://linvaux.github.io/2024/07/25/Pytest%E5%8F%82%E6%95%B0/</id>
    <published>2024-07-25T14:40:14.000Z</published>
    <updated>2024-07-25T14:40:51.371Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>分类</th><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>general</td><td>-k</td><td>支持python的表达式，用于筛选指定标记&#x2F;方法名的用例</td></tr><tr><td>-m</td><td>根据用例标签来筛选用例，设置标签可以使用  @pytest.mark.&lt;标签名&gt;</td><td></td></tr><tr><td>–markers</td><td>打印标签，包括内置的，插件的，还有自定义的</td><td></td></tr><tr><td>-x</td><td>第一个error或failed的test就退出</td><td></td></tr><tr><td>–fixtures</td><td>显示可用的fixture，包括内置和自己写的，如果fixture使用  “_”开头则需要使用-v才能显示此fixture</td><td></td></tr><tr><td>–fixtures-per-test</td><td>展示每条用例的fixture</td><td></td></tr><tr><td>–pdb</td><td>当用例出现错误或者被键盘中断后，启动pdb调试</td><td></td></tr><tr><td>–pdbcls&#x3D;modulename:classname</td><td>启动自定义pdb  debugger，一般用不到这个</td><td></td></tr><tr><td>–trace</td><td>执行测试用例时break，进入debugger</td><td></td></tr><tr><td>–capture&#x3D;method</td><td>标准输出&#x2F;标准错误输出&#x2F;标准输入的默认捕获，fd：标准输入，标准错误输出都会捕获；sys：只有向Python的sys.stdout和sys.stderr的写入行为会被捕获，不执行对文件描述符的写入的捕获；no：对print语句内容捕获，等同于  -s</td><td></td></tr><tr><td>-s</td><td>显示print语句的内容</td><td></td></tr><tr><td>–runxfail</td><td>强制运行xfail标记的用例</td><td></td></tr><tr><td>–lf, –last-failed</td><td>重新执行上次测试执行失败的用例，如果没有失败的用例，则执行全部用例</td><td></td></tr><tr><td>–ff, –failed-first</td><td>优先跑上次失败的test，tests的顺序会被打乱</td><td></td></tr><tr><td>–nf, –new-first</td><td>优先跑新添加的tests，剩余的按文件mtime顺序</td><td></td></tr><tr><td>–cache-show&#x3D;[CACHESHOW]</td><td>显示缓存，默认  * 显示所有缓存，可以带参数 pytest –cache-show&#x3D;cache&#x2F;nodeids</td><td></td></tr><tr><td>–cache-clear</td><td>在执行用例前，清理pytest缓存</td><td></td></tr><tr><td>–lfnf&#x3D;{all,none},  –last-failed-no-failures&#x3D;{all,none}</td><td>没有last-failed缓存数据，或上次没有失败时，执行全部用例</td><td></td></tr><tr><td>–sw, –stepwise</td><td>逐步运行，在失败时退出，下次运行时从失败的用例开始</td><td></td></tr><tr><td>–stepwise-skip</td><td>跳过第一个失败的test，如果再遇到失败就退出</td><td></td></tr><tr><td>reporting</td><td>–durations&#x3D;N</td><td>显示N个最慢的setup&#x2F;test的耗时，N&#x3D;0时，显示所有耗时</td></tr><tr><td>–durations-min&#x3D;N</td><td>显示N个最小的setup&#x2F;test的耗时</td><td></td></tr><tr><td>-v, –verbose</td><td>输出详细信息</td><td></td></tr><tr><td>–no-header</td><td>不显示pytest消息头，只展示用例信息</td><td></td></tr><tr><td>–no-summary</td><td>不显示用例执行完的summary  info</td><td></td></tr><tr><td>-q, –quiet</td><td>静默模式，不输出任何内容</td><td></td></tr><tr><td>–verbosity&#x3D;VERBOSE</td><td>信息显示等级，貌似没啥用</td><td></td></tr><tr><td>-r chars</td><td>-r  f：显示failed信息；-r E：显示error信息；-r s：显示skipped信息；-r x：显示xfailed信息；-r  X：显示xpassed信息；-r p：显示passed信息；-r P：显示   passed with output信息； -r a&#x2F;A：显示 all except passed信息；-r w：显示默认告警信息；-r  N：重置list</td><td></td></tr><tr><td>–disable-warnings, –disable-pytest-warnings</td><td>禁用pytest告警，如未注册的标记等</td><td></td></tr><tr><td>-l, –showlocal</td><td>用例执行失败时，打印堆栈信息，默认被禁用</td><td></td></tr><tr><td>–tb&#x3D;style</td><td>traceback打印模式，一般设置为auto即可</td><td></td></tr><tr><td>–show-capture&#x3D;{no,stdout,stderr,log,all}</td><td>失败的用例如何显示，默认为all</td><td></td></tr><tr><td>–full-trace</td><td>不截取traceback，默认会截断</td><td></td></tr><tr><td>–color&#x3D;color</td><td>是否显示彩色，yes：显示颜色；no：不显示颜色；auto：自动</td><td></td></tr><tr><td>–code-highlight&#x3D;{yes,no}</td><td>代码是否高亮显示，一般用不到</td><td></td></tr><tr><td>–pastebin&#x3D;mode</td><td>没什么用的参数，我也不知道干嘛的</td><td></td></tr><tr><td>–junit-xml&#x3D;path</td><td>在给定的path路径下生成junit-xml风格的测试报告</td><td></td></tr><tr><td>–junit-prefix&#x3D;str</td><td>在junit-xml输出中的classnames添加前缀</td><td></td></tr><tr><td>pytest-warnings</td><td>-W  PYTHONWARNINGS, –pythonwarnings&#x3D;PYTHONWARNINGS</td><td>设置报告哪些warnings</td></tr><tr><td>–maxfail&#x3D;num</td><td>出现num个errors或者fails就退出测试</td><td></td></tr><tr><td>–strict-config</td><td>解析配置文件中pytest部分时，遇到warning就抛出error</td><td></td></tr><tr><td>–strict-markers, –strict</td><td>发现未知标记时，抛出error，</td><td></td></tr><tr><td>-c file</td><td>从指定配置文件加载配置，默认为pytes.ini</td><td></td></tr><tr><td>–continue-on-collection-errors</td><td>在收集用例时发生错误，也会继续执行用例</td><td></td></tr><tr><td>–rootdir&#x3D;ROOTDIR</td><td>tests根目录，相对路径</td><td></td></tr><tr><td>collection</td><td>–collect-only, –co</td><td>收集用例，但不执行</td></tr><tr><td>–pyargs</td><td>把所有参数解释为python包</td><td></td></tr><tr><td>–ignore&#x3D;path</td><td>忽略测试目录，使用英文逗号分割</td><td></td></tr><tr><td>–ignore-glob&#x3D;path</td><td>path匹配多个不需要收集的测试目录，使用英文逗号分割</td><td></td></tr><tr><td>–deselect&#x3D;nodeid_prefix</td><td>通过node  id prefix反选。可以多个，使用英文逗号分隔</td><td></td></tr><tr><td>–confcutdir&#x3D;dir</td><td>只加载相对于dir目录的conftest.py文件</td><td></td></tr><tr><td>–noconftest</td><td>不加载conftest.py文件</td><td></td></tr><tr><td>–keep-duplicates</td><td>收集重复的test文件，默认只会收集1item，加参数后会收集2items</td><td></td></tr><tr><td>–collect-in-virtualenv</td><td>收集本地虚拟环境目录的tests</td><td></td></tr><tr><td>–import-mode&#x3D;{prepend,append,importlib}</td><td>包导入模式，一般用不到，参考：<a href="https://www.osgeo.cn/pytest/pythonpath.html?highlight=import%20mode">https://www.osgeo.cn/pytest/pythonpath.html?highlight=import%20mode</a></td><td></td></tr><tr><td>–doctest-modules</td><td>文档测试，没啥用</td><td></td></tr><tr><td>–doctest-report&#x3D;{none,cdiff,ndiff,udiff,only_first_failure}</td><td>一样，也没啥用</td><td></td></tr><tr><td>–doctest-glob&#x3D;pat</td><td>还是没啥用</td><td></td></tr><tr><td>–doctest-ignore-import-errors</td><td>文档测试时忽略导包错误，继续没什么用</td><td></td></tr><tr><td>–doctest-continue-on-failure</td><td>文档测试时出现失败继续测试，依然没什么用</td><td></td></tr><tr><td>test session debugging and configuration</td><td>–basetemp&#x3D;dir</td><td>test  run的base临时目录（如果存在会先删除）</td></tr><tr><td>-V, –version</td><td>输出pytest版本</td><td></td></tr><tr><td>-h, –help</td><td>打印pytest帮助信息</td><td></td></tr><tr><td>-p name</td><td>加载插件，一般不会控制此参数</td><td></td></tr><tr><td>–trace-config</td><td>查看本地安装好的第三方插件</td><td></td></tr><tr><td>–debug</td><td>保存debug信息到’pytestdebug.log’文件</td><td></td></tr><tr><td>-o OVERRIDE_INI, –override-ini&#x3D;OVERRIDE_INI</td><td>覆盖ini文件配置</td><td></td></tr><tr><td>–assert&#x3D;MODE</td><td>断言模式，默认rewrite</td><td></td></tr><tr><td>–setup-only</td><td>只加载fixture，不执行测试用例</td><td></td></tr><tr><td>–setup-show</td><td>在执行测试用例时，打印fixture步骤</td><td></td></tr><tr><td>–setup-plan</td><td>展示哪些用例和fixture将要被执行</td><td></td></tr><tr><td>logging</td><td>–log-level&#x3D;LEVEL</td><td>日志等级，默认  WARNING （具体日志等级参考 logging 模块中的日志等级）</td></tr><tr><td>–log-format&#x3D;LOG_FORMAT</td><td>日志格式（具体日志格式参考  logging 模块中的日志格式）</td><td></td></tr><tr><td>–log-date-format&#x3D;LOG_DATE_FORMA</td><td>日志日期格式（具体日志格式参考  logging 模块中的日志格式）</td><td></td></tr><tr><td>–log-cli-level&#x3D;LOG_CLI_LEVEL</td><td>cli日志等级（具体日志等级参考  logging 模块中的日志等级）</td><td></td></tr><tr><td>–log-cli-format&#x3D;LOG_CLI_FORMAT</td><td>cli日志格式（具体日志格式参考  logging 模块中的日志格式）</td><td></td></tr><tr><td>–log-cli-date-format&#x3D;LOG_CLI_DATE_FORMAT</td><td>cli日志日期格式（具体日志格式参考  logging 模块中的日志格式）</td><td></td></tr><tr><td>–log-file&#x3D;LOG_FILE</td><td>日志文件路径</td><td></td></tr><tr><td>–log-file-level&#x3D;LOG_FILE_LEVE</td><td>日志文件中的日志等级</td><td></td></tr><tr><td>–log-file-format&#x3D;LOG_FILE_FORMAT</td><td>日志文件中的日志格式</td><td></td></tr><tr><td>–log-file-date-format&#x3D;LOG_FILE_DATE_FORMAT</td><td>日志文件中的日志时间格式</td><td></td></tr><tr><td>–log-auto-indent&#x3D;LOG_AUTO_INDENT</td><td>自动缩进传递给日志模块的多行消息。接受true  | on、false | off或整数</td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;分类&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;general&lt;/td&gt;
&lt;td&gt;-k&lt;/td&gt;
&lt;td&gt;支持python的表达式，用于筛选指定标记&amp;#</summary>
      
    
    
    
    <category term="测试" scheme="https://linvaux.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Pytest" scheme="https://linvaux.github.io/tags/Pytest/"/>
    
  </entry>
  
</feed>
