<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://linvaux.github.io/atom.xml" rel="self"/>
  
  <link href="https://linvaux.github.io/"/>
  <updated>2024-07-26T14:02:01.734Z</updated>
  <id>https://linvaux.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jdk11获取系统信息</title>
    <link href="https://linvaux.github.io/2024/07/26/Jdk11%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/"/>
    <id>https://linvaux.github.io/2024/07/26/Jdk11%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/</id>
    <published>2024-07-26T14:01:20.000Z</published>
    <updated>2024-07-26T14:02:01.734Z</updated>
    
    <content type="html"><![CDATA[<p>下面用到的 api 仅在 jdk11 上测试通过，其他 jdk 版本没试过</p><h2 id="工具类-SystemInfoUtils-java"><a href="#工具类-SystemInfoUtils-java" class="headerlink" title="工具类 SystemInfoUtils.java"></a>工具类 SystemInfoUtils.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo.constant.SystemInfoConstant;</span><br><span class="line"><span class="keyword">import</span> com.sun.management.OperatingSystemMXBean;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.NetworkInterface;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.*;</span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 系统信息工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemInfoUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取本地IP地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 本机 ip，过滤了回环地址和 localhost</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getLocalIP</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; ipList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取本地所有网络接口</span></span><br><span class="line">            Enumeration&lt;NetworkInterface&gt; networkInterfaces = NetworkInterface.getNetworkInterfaces();</span><br><span class="line">            <span class="keyword">while</span> (networkInterfaces.hasMoreElements()) &#123;</span><br><span class="line">                <span class="type">NetworkInterface</span> <span class="variable">networkInterface</span> <span class="operator">=</span> networkInterfaces.nextElement();</span><br><span class="line">                <span class="comment">// 排除虚拟接口和未启用的接口</span></span><br><span class="line">                <span class="keyword">if</span> (networkInterface.isVirtual() || !networkInterface.isUp()) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Enumeration&lt;InetAddress&gt; inetAddresses = networkInterface.getInetAddresses();</span><br><span class="line">                <span class="keyword">while</span> (inetAddresses.hasMoreElements()) &#123;</span><br><span class="line">                    <span class="type">InetAddress</span> <span class="variable">inetAddress</span> <span class="operator">=</span> inetAddresses.nextElement();</span><br><span class="line">                    <span class="keyword">if</span> (!inetAddress.isLinkLocalAddress()) &#123;</span><br><span class="line">                        ipList.add(inetAddress.getHostAddress());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;本机 IP 获取失败, 异常详情: &quot;</span> + ExceptionUtil.getErrorMessage(e));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ipList.stream().filter(e -&gt; !SystemInfoConstant.INVALID_IP_LIST.contains(e)).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取CPU数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 逻辑处理器数量，物理核数 * 2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getCpuCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 此处有坑，OperatingSystemMXBean 存在于两个包：java.lang.management.OperatingSystemMXBean 和 com.sun.management.OperatingSystemMXBean</span></span><br><span class="line">        <span class="comment">// 一定要找对包，不然有些方法找不到，太特么坑了</span></span><br><span class="line">        java.lang.management.<span class="type">OperatingSystemMXBean</span> <span class="variable">operatingSystemMXBean</span> <span class="operator">=</span> ManagementFactory.getOperatingSystemMXBean();</span><br><span class="line">        <span class="keyword">return</span> operatingSystemMXBean.getAvailableProcessors();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取总内存大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 物理内存大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getTotalPhysicalMemory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">OperatingSystemMXBean</span> <span class="variable">osBean</span> <span class="operator">=</span> ManagementFactory.getPlatformMXBean(OperatingSystemMXBean.class);</span><br><span class="line">        <span class="type">long</span> <span class="variable">physicalMemorySize</span> <span class="operator">=</span> osBean.getTotalPhysicalMemorySize();</span><br><span class="line">        <span class="type">double</span> <span class="variable">physicalMemoryGB</span> <span class="operator">=</span> (<span class="type">double</span>) physicalMemorySize / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line">        <span class="type">DecimalFormat</span> <span class="variable">decimalFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;#.##&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> decimalFormat.format(physicalMemoryGB) + <span class="string">&quot;GB&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取磁盘总大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 磁盘总量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDiskSizeTotal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">diskSize</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Path</span> <span class="variable">rootDir</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">            <span class="type">FileStore</span> <span class="variable">store</span> <span class="operator">=</span> Files.getFileStore(rootDir);</span><br><span class="line">            <span class="type">long</span> <span class="variable">totalSpace</span> <span class="operator">=</span> store.getTotalSpace();</span><br><span class="line">            <span class="type">double</span> <span class="variable">totalGB</span> <span class="operator">=</span> (<span class="type">double</span>) totalSpace / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line">            <span class="type">DecimalFormat</span> <span class="variable">decimalFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;#.##&quot;</span>);</span><br><span class="line">            diskSize = decimalFormat.format(totalGB + <span class="string">&quot;GB&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;磁盘信息获取失败, 异常详情: &#123;&#125;&quot;</span>, ExceptionUtil.getErrorMessage(e));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> diskSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取已使用磁盘大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 磁盘已使用量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDiskSizeUsed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">diskSize</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Path</span> <span class="variable">rootDir</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">            <span class="type">FileStore</span> <span class="variable">store</span> <span class="operator">=</span> Files.getFileStore(rootDir);</span><br><span class="line">            <span class="type">long</span> <span class="variable">usableSpace</span> <span class="operator">=</span> store.getUsableSpace();</span><br><span class="line">            <span class="type">double</span> <span class="variable">usableGB</span> <span class="operator">=</span> (<span class="type">double</span>) usableSpace / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line">            <span class="type">DecimalFormat</span> <span class="variable">decimalFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;#.##&quot;</span>);</span><br><span class="line">            diskSize = decimalFormat.format(usableGB + <span class="string">&quot;GB&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;磁盘信息获取失败, 异常详情: &#123;&#125;&quot;</span>, ExceptionUtil.getErrorMessage(e));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> diskSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取可用磁盘大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 磁盘可使用量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getDiskSizeFree</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">diskSize</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Path</span> <span class="variable">rootDir</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">            <span class="type">FileStore</span> <span class="variable">store</span> <span class="operator">=</span> Files.getFileStore(rootDir);</span><br><span class="line">            <span class="type">long</span> <span class="variable">freeSpace</span> <span class="operator">=</span> store.getUnallocatedSpace();</span><br><span class="line">            <span class="type">double</span> <span class="variable">freeGB</span> <span class="operator">=</span> (<span class="type">double</span>) freeSpace / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line">            <span class="type">DecimalFormat</span> <span class="variable">decimalFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;#.##&quot;</span>);</span><br><span class="line">            diskSize = decimalFormat.format(freeGB + <span class="string">&quot;GB&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;磁盘信息获取失败, 异常详情: &#123;&#125;&quot;</span>, ExceptionUtil.getErrorMessage(e));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> diskSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="常量类-SystemInfoConstant-java"><a href="#常量类-SystemInfoConstant-java" class="headerlink" title="常量类 SystemInfoConstant.java"></a>常量类 SystemInfoConstant.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 系统信息常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemInfoConstant</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ipv4 回环地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IPV4_LOOP_ADDRESS</span> <span class="operator">=</span> <span class="string">&quot;0.0.1.1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ipv6 回环地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IPV6_LOOP_ADDRESS</span> <span class="operator">=</span> <span class="string">&quot;0:0:0:0:0:0:0:1%lo0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本机 IP</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCAL_HOST</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无效的 ip 地址列表，需要排除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; INVALID_IP_LIST = List.of(IPV4_LOOP_ADDRESS, IPV6_LOOP_ADDRESS, LOCAL_HOST);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="异常信息获取工具类-ExceptionUtil-java"><a href="#异常信息获取工具类-ExceptionUtil-java" class="headerlink" title="异常信息获取工具类 ExceptionUtil.java"></a>异常信息获取工具类 ExceptionUtil.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 异常工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常信息允许的最大长度，超过这个长度会被截取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">ERROR_MSG_MAX_LENGTH</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取异常的堆栈信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 堆栈信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getErrorMessage</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(e.getMessage())) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringWriter</span> <span class="variable">sw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line">        e.printStackTrace(<span class="keyword">new</span> <span class="title class_">PrintWriter</span>(sw, Boolean.TRUE));</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> sw.toString();</span><br><span class="line">        <span class="keyword">return</span> message.length() &gt; ERROR_MSG_MAX_LENGTH ? message.substring(<span class="number">0</span>, ERROR_MSG_MAX_LENGTH) : message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下面用到的 api 仅在 jdk11 上测试通过，其他 jdk 版本没试过&lt;/p&gt;
&lt;h2 id=&quot;工具类-SystemInfoUtils-java&quot;&gt;&lt;a href=&quot;#工具类-SystemInfoUtils-java&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="Java" scheme="https://linvaux.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>IDEA高效使用指南(一)</title>
    <link href="https://linvaux.github.io/2024/07/26/IDEA%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://linvaux.github.io/2024/07/26/IDEA%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2024-07-26T13:48:42.000Z</published>
    <updated>2024-07-26T13:49:51.460Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置全局-JDK"><a href="#设置全局-JDK" class="headerlink" title="设置全局 JDK"></a>设置全局 JDK</h2><blockquote><p>File -&gt; New Projects Setup -&gt; Structure…</p></blockquote><p><img src="/../images/TBdebShUg5j9uqXoGuWsCDUd.png" alt="image.png"><br><img src="/../images/BavFvPU62j788uDuBM3LXwPJ.png" alt="image.png"></p><h2 id="Maven-配置"><a href="#Maven-配置" class="headerlink" title="Maven 配置"></a>Maven 配置</h2><blockquote><p>Perferences -&gt; Build,Execution,Deployment -&gt; Build Tools -&gt; Maven</p></blockquote><p><img src="/../images/26SMM42qFYidXc5p9NviwA4y.png" alt="image.png"></p><h2 id="自动导包-删除无用包"><a href="#自动导包-删除无用包" class="headerlink" title="自动导包&#x2F;删除无用包"></a>自动导包&#x2F;删除无用包</h2><blockquote><p>Perferences -&gt; Editor -&gt; General -&gt; Auto Import</p></blockquote><p><img src="/../images/xkNSjKsbfXT2nwarorw6ChRx.png" alt="image.png"></p><h2 id="注释模板"><a href="#注释模板" class="headerlink" title="注释模板"></a>注释模板</h2><blockquote><p>Perferences -&gt; Editor -&gt; File and Code Templates</p></blockquote><p><img src="/../images/w7kRgFWxWKPpfbkqysKqPKzH.png" alt="image.png"><br>class 注释模板示例</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != &quot;&quot;)package $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line">#parse(&quot;File Header.java&quot;)</span><br><span class="line">/**  </span><br><span class="line"> * @author: $&#123;USER&#125;</span><br><span class="line"> * @date: $&#123;DATE&#125; $&#123;TIME&#125;</span><br><span class="line"> * @description: </span><br><span class="line"> */</span><br><span class="line">public class $&#123;NAME&#125; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示方法分割线"><a href="#显示方法分割线" class="headerlink" title="显示方法分割线"></a>显示方法分割线</h2><blockquote><p>Perferences -&gt; Editor -&gt; General -&gt; Appearance</p></blockquote><p><img src="/../images/icXHF1EX4Xg3Qx24fTiDypUg.png" alt="image.png"></p><h2 id="代码自动补全"><a href="#代码自动补全" class="headerlink" title="代码自动补全"></a>代码自动补全</h2><blockquote><p>Perferences -&gt; Editor -&gt; General -&gt; Code Completion</p></blockquote><p><img src="/../images/4Lkkem9rm8M8FTrubg5PU5HP.png" alt="image.png"></p><h2 id="设置每行代码最大长度"><a href="#设置每行代码最大长度" class="headerlink" title="设置每行代码最大长度"></a>设置每行代码最大长度</h2><blockquote><p>Perferences -&gt; Editor -&gt; Code Style</p></blockquote><blockquote><p>阿里巴巴的 Java 开发规范推荐每行长度不要超过 120，但是我习惯用 200</p></blockquote><p><img src="/../images/zvhD4qmyWkMLhXHtASGitDWP.png" alt="image.png"></p><h2 id="修改注释颜色"><a href="#修改注释颜色" class="headerlink" title="修改注释颜色"></a>修改注释颜色</h2><blockquote><p>Perferences -&gt; Editor -&gt; Color Scheme -&gt; Java</p></blockquote><blockquote><p>去掉Inherit values from 前面的√，选中 Foreground 自己设置个喜欢的颜色</p></blockquote><blockquote><p>这是我现在的配置 Line comment: FFB704, Text: 02FA15</p></blockquote><p><img src="/../images/bhm5KnJH1CaU48zokiyQS23z.png" alt="image.png"><br><img src="/../images/a9PmPRUXW6Vtf35sV72ZqoWZ.png" alt="image.png"></p><h2 id="禁止-IDEA-启动时，自动打开上一个项目"><a href="#禁止-IDEA-启动时，自动打开上一个项目" class="headerlink" title="禁止 IDEA 启动时，自动打开上一个项目"></a>禁止 IDEA 启动时，自动打开上一个项目</h2><blockquote><p>Perperences -&gt; Appearance &amp; Behavior -&gt; System Settings</p></blockquote><p><img src="/../images/7zhkSUh6vz4irhHqKvTDLCRz.png" alt="image.png"></p><h2 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h2><blockquote><p>Perferences -&gt; Editor -&gt; Font</p></blockquote><blockquote><p>我习惯使用 Consolas 字体，但是 mac 上默认没有这个字体，需要自行安装: <a href="http://www.fontpalace.com/font-details/Consolas/">http://www.fontpalace.com/font-details/Consolas/</a></p></blockquote><p><img src="/../images/CaLeXrjC82cMMY5p9aRNkoiC.png" alt="image.png"></p><h2 id="修改文件编码"><a href="#修改文件编码" class="headerlink" title="修改文件编码"></a>修改文件编码</h2><blockquote><p>Perferences -&gt; Editor -&gt; File Encodings</p></blockquote><blockquote><p>直接使用 UTF-8 编码即可，如果出现乱码，记得勾选下面的 Transparent native-to-ascii conversion </p></blockquote><p><img src="/../images/1Pe9GChSD4mQYNrTBCcXJnHQ.png" alt="image.png"></p><h2 id="修改-IDEA-的-JVM-堆配置"><a href="#修改-IDEA-的-JVM-堆配置" class="headerlink" title="修改 IDEA 的 JVM 堆配置"></a>修改 IDEA 的 JVM 堆配置</h2><blockquote><p>IDEA 默认的堆配置貌似是 750MB，启动一个大型项目时，这点内存不大够用，可以自己通过如下配置修改</p></blockquote><blockquote><p>help -&gt; Edit custom VM options</p></blockquote><blockquote><p>修改配置 -Xmx8192m, 按照自己电脑内存大小配置 </p></blockquote><p><img src="/../images/MpKzgoQVG1tKzaiHGAFfuEPW.png" alt="image.png"></p><h2 id="窗口多标签换行显示"><a href="#窗口多标签换行显示" class="headerlink" title="窗口多标签换行显示"></a>窗口多标签换行显示</h2><blockquote><p>Perferences -&gt; Editor -&gt; General -&gt; Editor Tabs</p></blockquote><p><img src="/../images/L4MEbkBerxeU4eeGsaTrM1zk.png" alt="image.png"><br><img src="/../images/1EaPuTQNRQjzgduEEyDiGH6Z.png" alt="image.png"></p><h2 id="标识修改过的文件"><a href="#标识修改过的文件" class="headerlink" title="标识修改过的文件"></a>标识修改过的文件</h2><blockquote><p>Perferences -&gt; Editor -&gt; General -&gt; Editor Tabs</p></blockquote><p><img src="/../images/ZUEdRrJxcawphjC1ihaNn8ef.png" alt="image.png"><br><img src="/../images/YLJ2tR7htEHb1anxHWEAaL1i.png" alt="image.png"></p><h2 id="实现-Serializable-接口时，提示生成-SerialVersionUID"><a href="#实现-Serializable-接口时，提示生成-SerialVersionUID" class="headerlink" title="实现 Serializable 接口时，提示生成 SerialVersionUID"></a>实现 Serializable 接口时，提示生成 SerialVersionUID</h2><blockquote><p>Perferences -&gt; Editor -&gt; Inspections</p></blockquote><blockquote><p>在实现了 Serializable 接口的类上使用快捷键 alt+enter,就会提示生成 SerialVersionUID<br><img src="/../images/sRxKbUJi6iKdrzTQnXg5VPx2.png" alt="image.png"><br><img src="/../images/iwxTcpwLk9cKfw8gSXC7WtiT.png" alt="image.png"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设置全局-JDK&quot;&gt;&lt;a href=&quot;#设置全局-JDK&quot; class=&quot;headerlink&quot; title=&quot;设置全局 JDK&quot;&gt;&lt;/a&gt;设置全局 JDK&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;File -&amp;gt; New Projects Setup -&amp;g</summary>
      
    
    
    
    
    <category term="IDEA" scheme="https://linvaux.github.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Centos使用Tomcat安装Jenkins</title>
    <link href="https://linvaux.github.io/2024/07/26/Centos%E4%BD%BF%E7%94%A8Tomcat%E5%AE%89%E8%A3%85Jenkins/"/>
    <id>https://linvaux.github.io/2024/07/26/Centos%E4%BD%BF%E7%94%A8Tomcat%E5%AE%89%E8%A3%85Jenkins/</id>
    <published>2024-07-26T13:47:23.000Z</published>
    <updated>2024-07-26T13:47:37.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="安装JDK1-8"><a href="#安装JDK1-8" class="headerlink" title="安装JDK1.8"></a>安装JDK1.8</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum makecache</span><br><span class="line">yum install -y java-1.8.0-openjdk.x86_64</span><br></pre></td></tr></table></figure><h3 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载tomcat9.0</span></span><br><span class="line">wget https://mirrors.bfsu.edu.cn/apache/tomcat/tomcat-9/v9.0.36/bin/apache-tomcat-9.0.36.tar.gz &amp;&amp; tar -xvf apache-tomcat-9.0.36.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除webapps下面的项目</span></span><br><span class="line">cd apache-tomcat-9.0.36/webapps/ &amp;&amp; rm -rf *</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载jenkins.war并重命名为ROOT.war</span></span><br><span class="line">wget https://mirrors.huaweicloud.com/jenkins/war/2.240/jenkins.war -O ROOT.war</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改Tomcat启动脚本，支持Jenkins跨域"><a href="#修改Tomcat启动脚本，支持Jenkins跨域" class="headerlink" title="修改Tomcat启动脚本，支持Jenkins跨域"></a>修改Tomcat启动脚本，支持Jenkins跨域</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改bin/catalina.sh,在首行添加如下参数</span></span><br><span class="line">export CATALINA_OPTS=&quot;-Djava.awt.headless=true&quot;</span><br><span class="line">export JAVA_OPTS=&quot;-Dhudson.model.DirectoryBrowserSupport.CSP= &quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动tomcat</span></span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><h3 id="访问jenkins"><a href="#访问jenkins" class="headerlink" title="访问jenkins"></a>访问jenkins</h3><ul><li>tomcat默认监听端口是8080，访问 192.168.1.2:8080</li><li>如果jenkins启动页面可以正常打开，此时，停止tomcat，并修改jenkins配置。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;tomcat安装目录&gt;/bin/shutdown.sh</span><br><span class="line">cd ~/.jenkins/</span><br></pre></td></tr></table></figure><ul><li>找到<strong>hudson.model.UpdateCenter.xml</strong>文件，修改为如下内容</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.1&#x27; encoding=&#x27;UTF-8&#x27;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sites</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">site</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>default<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">site</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sites</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动tomcat</li><li>jenkins启动后，需要输入初始化密码，根据页面提示填写密码后，进入插件安装页面，此时，需要再次停止tomcat，然后执行以下命令，更换jenkins更新源之后，再次启动tomcat。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.jenkins/updates;</span><br><span class="line">sed -i &#x27;s/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&#x27; default.json &amp;&amp; sed -i &#x27;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&#x27; default.json;</span><br><span class="line">bash &lt;tomcat安装目录&gt;/bin/startup.sh</span><br></pre></td></tr></table></figure><ul><li>此时，jenkins会要求重新输入初始化密码，然后选择安装建议的插件，等待安装完成。</li><li>插件安装完成后，需要设置管理员信息，之后进入jenkins工作页面。</li></ul><h3 id="jenkins常用插件"><a href="#jenkins常用插件" class="headerlink" title="jenkins常用插件"></a>jenkins常用插件</h3><ul><li>chinese （汉化）</li><li>locale（汉化）</li><li>blue ocean（流水线工具）</li><li>Allure Jenkins Plugin (allure报告)</li><li>Extended Choice Parameter Plug-In (参数化构建扩展)</li><li>AnsiColor （日志彩色输出）</li><li>Git Parameter Plug-In（代码分支选择）</li><li>build failure analyzer (构建失败分析)</li><li>multijob（组织多job构建）</li><li>multiple SCMs （设置多个git）</li><li>simple theme（jenkins主题 <a href="http://afonsof.com/jenkins-material-theme/">http://afonsof.com/jenkins-material-theme/</a>）</li><li>merge request event (gitlab 代码门禁)</li><li>SLOCCount Plug-in（clco代码量统计结果展示）</li><li>Warnings Next Generation Plugin（代码静态扫描结果展示 <a href="https://github.com/jenkinsci/warnings-ng-plugin/blob/master/SUPPORTED-FORMATS.md">https://github.com/jenkinsci/warnings-ng-plugin/blob/master/SUPPORTED-FORMATS.md</a>）</li><li>Jacoco（java代码覆盖率报告）</li><li>Html publisher（生成html报告）</li><li>backup（备份&#x2F;恢复jenkins）</li><li>Gitlab（gitlab支持插件）</li><li>Gitee（gitee支持插件）</li><li>Role-based Authorization Strategy (角色权限控制)</li><li>Active Choices (根据所选参数，自动调出对应参数所依赖的后续参数)</li><li>Job Configuration History (配置记录管理，支持配置回滚)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装步骤&quot;&gt;&lt;a href=&quot;#安装步骤&quot; class=&quot;headerlink&quot; title=&quot;安装步骤&quot;&gt;&lt;/a&gt;安装步骤&lt;/h2&gt;&lt;h3 id=&quot;安装JDK1-8&quot;&gt;&lt;a href=&quot;#安装JDK1-8&quot; class=&quot;headerlink&quot; title=&quot;安</summary>
      
    
    
    
    
    <category term="Jenkins" scheme="https://linvaux.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Springboot业务信息国际化</title>
    <link href="https://linvaux.github.io/2024/07/26/Springboot%E4%B8%9A%E5%8A%A1%E4%BF%A1%E6%81%AF%E5%9B%BD%E9%99%85%E5%8C%96/"/>
    <id>https://linvaux.github.io/2024/07/26/Springboot%E4%B8%9A%E5%8A%A1%E4%BF%A1%E6%81%AF%E5%9B%BD%E9%99%85%E5%8C%96/</id>
    <published>2024-07-26T13:43:49.000Z</published>
    <updated>2024-07-26T13:46:30.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h2><p>用户上传一个 excel 文件，要对 excel 内容做校验，然后返回校验结果。校验通过之后，在执行导入。但是现在平台要做国际化，支持中英双语，目前校验结果是直接中文返回，为了完成国际化需求，需要根据请求头中的 Accept-language 来决定返回何种语言的内容。</p><h2 id="当前处理方式"><a href="#当前处理方式" class="headerlink" title="当前处理方式"></a>当前处理方式</h2><p><img src="/../images/Uzu4SwXBUhPj7H3b4yK293ta.png" alt="image.png"></p><h2 id="国际化方案"><a href="#国际化方案" class="headerlink" title="国际化方案"></a>国际化方案</h2><h3 id="使用工具类获取国际化内容"><a href="#使用工具类获取国际化内容" class="headerlink" title="使用工具类获取国际化内容"></a>使用工具类获取国际化内容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.MessageSourceAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.MessageSourceAccessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">I18nMessageUtil</span> <span class="keyword">implements</span> <span class="title class_">MessageSourceAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MessageSourceAccessor accessor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取i18n文件中对应的国际化信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code   i18n文件中code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> locale 地区信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args   参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 国际化信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMessage</span><span class="params">(String code, Locale locale, Object... args)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (locale == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> accessor.getMessage(code, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> accessor.getMessage(code, args, locale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取i18n文件中对应的国际化信息,如果不传locale信息，则从当前request获取，如果还是没有，则使用默认locale</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code i18n文件中code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 国际化信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMessage</span><span class="params">(String code, Object... args)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accessor.getMessage(code, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessageSource</span><span class="params">(MessageSource messageSource)</span> &#123;</span><br><span class="line">        I18nMessageUtil.accessor = <span class="keyword">new</span> <span class="title class_">MessageSourceAccessor</span>(messageSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置国际化文件"><a href="#配置国际化文件" class="headerlink" title="配置国际化文件"></a>配置国际化文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ResourceBundleMessageSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">I18nConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageSource <span class="title function_">messageSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ResourceBundleMessageSource</span> <span class="variable">messageSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceBundleMessageSource</span>();</span><br><span class="line">        Set&lt;String&gt; i18nFolder = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// excel 校验的国际化文件</span></span><br><span class="line">        i18nFolder.add(<span class="string">&quot;i18n.excelValidation&quot;</span>);</span><br><span class="line">        <span class="comment">// 默认的国际化文件</span></span><br><span class="line">        i18nFolder.add(<span class="string">&quot;i18n.messages&quot;</span>);</span><br><span class="line">        messageSource.setBasenames(i18nFolder.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line">        messageSource.setDefaultEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        messageSource.setUseCodeAsDefaultMessage(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> messageSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写国际化异常信息"><a href="#编写国际化异常信息" class="headerlink" title="编写国际化异常信息"></a>编写国际化异常信息</h3><p><img src="/../images/qYr23PrcxsWHBDDQ95HTEo74.png" alt="image.png"></p><h3 id="替换校验异常信息"><a href="#替换校验异常信息" class="headerlink" title="替换校验异常信息"></a>替换校验异常信息</h3><p><img src="/../images/13e8KW1e331Gaw3P3K6HcCVP.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;业务背景&quot;&gt;&lt;a href=&quot;#业务背景&quot; class=&quot;headerlink&quot; title=&quot;业务背景&quot;&gt;&lt;/a&gt;业务背景&lt;/h2&gt;&lt;p&gt;用户上传一个 excel 文件，要对 excel 内容做校验，然后返回校验结果。校验通过之后，在执行导入。但是现在平台要做国</summary>
      
    
    
    
    
    <category term="SpringBoot" scheme="https://linvaux.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>FileBeat+LogStash实现MySQL慢查询日志解析</title>
    <link href="https://linvaux.github.io/2024/07/26/FileBeat-LogStash%E5%AE%9E%E7%8E%B0MySQL%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E8%A7%A3%E6%9E%90/"/>
    <id>https://linvaux.github.io/2024/07/26/FileBeat-LogStash%E5%AE%9E%E7%8E%B0MySQL%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E8%A7%A3%E6%9E%90/</id>
    <published>2024-07-26T13:42:18.000Z</published>
    <updated>2024-07-26T13:43:16.162Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>背景是一个大型营销系统经常出现mysql的慢查询，导致线上服务频繁出现故障，为了查看是哪些sql有问题，并且要支持各种维度的统计查询，所以使用FileBeat+LogStash+ElasticSearch+Kibana实现此需求。本文仅描述如何配置FileBeath和LogStash实现MySQL慢查询日志解析。</p></blockquote><h1 id="FileBeat配置"><a href="#FileBeat配置" class="headerlink" title="FileBeat配置"></a>FileBeat配置</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 忽略在指定的时间跨度之前被修改的文件</span></span><br><span class="line">  <span class="attr">ignore_older:</span> <span class="string">30000h</span></span><br><span class="line">  <span class="comment"># mysql慢查询日志目录，支持*通配符匹配多级目录</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/opt/slow-sql/*.log</span></span><br><span class="line">  <span class="comment"># 文档类型是mysqlslow，这是filebeat内置的一套规则</span></span><br><span class="line">  <span class="attr">document_type:</span> <span class="string">mysqlslow</span></span><br><span class="line">  <span class="attr">multiline:</span></span><br><span class="line">    <span class="attr">pattern:</span> <span class="string">&quot;^# User@Host: &quot;</span></span><br><span class="line">    <span class="attr">negate:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">match:</span> <span class="string">after</span></span><br><span class="line">  <span class="attr">tail_files:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output.logstash:</span></span><br><span class="line">  <span class="comment"># logstash的地址，我是部署在同一台机器上的</span></span><br><span class="line">  <span class="attr">hosts:</span> [<span class="string">&quot;127.0.0.1:5044&quot;</span>]</span><br></pre></td></tr></table></figure><h1 id="LogStash配置"><a href="#LogStash配置" class="headerlink" title="LogStash配置"></a>LogStash配置</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  # 使用filebeat推送日志</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5044</span><br><span class="line">    host =&gt; &quot;0.0.0.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line">    # 有数据库名，有schema</span><br><span class="line">    match =&gt; &#123;&quot;message&quot; =&gt; &quot;(?m)^# User@Host: %&#123;USER:user&#125;\[[^\]]+\]\s@\s*\[%&#123;IP:clientip&#125;\]\s*([\s\S]*)#\s+Schema: (?&lt;schema&gt;\w+)([\s\S]*)\s+#\s+Query_time:\s+%&#123;NUMBER:query_time:float&#125;\s+Lock_time: %&#123;NUMBER:lock_time:float&#125;\s+Rows_sent: %&#123;NUMBER:rows_sent:int&#125;\s+Rows_examined: %&#123;NUMBER:rows_examined:int&#125;\s*([\s\S]*)use\s(?&lt;dbname&gt;\w+);([\s\S]*)SET timestamp=%&#123;NUMBER:sql_time:int&#125;&quot;&#125;</span><br><span class="line">    # 无数据库名,有schema</span><br><span class="line">    match =&gt; &#123;&quot;message&quot; =&gt; &quot;(?m)^# User@Host: %&#123;USER:user&#125;\[[^\]]+\]\s@\s*\[%&#123;IP:clientip&#125;\]\s*([\s\S]*)#\s+Schema: (?&lt;schema&gt;\w+)([\s\S]*)\s+#\s+Query_time:\s+%&#123;NUMBER:query_time:float&#125;\s+Lock_time: %&#123;NUMBER:lock_time:float&#125;\s+Rows_sent: %&#123;NUMBER:rows_sent:int&#125;\s+Rows_examined: %&#123;NUMBER:rows_examined:int&#125;\s*([\s\S]*)SET timestamp=%&#123;NUMBER:sql_time:int&#125;&quot;&#125;</span><br><span class="line">    # 有数据库名，无schema</span><br><span class="line">    match =&gt; &#123;&quot;message&quot; =&gt; &quot;(?m)^# User@Host: %&#123;USER:user&#125;\[[^\]]+\]\s@\s*\[%&#123;IP:clientip&#125;\]\s*([\s\S]*)#\s+Query_time:\s+%&#123;NUMBER:query_time:float&#125;\s+Lock_time: %&#123;NUMBER:lock_time:float&#125;\s+Rows_sent: %&#123;NUMBER:rows_sent:int&#125;\s+Rows_examined: %&#123;NUMBER:rows_examined:int&#125;\s*([\s\S]*)use\s(?&lt;dbname&gt;\w+);([\s\S]*)SET timestamp=%&#123;NUMBER:sql_time:int&#125;&quot;&#125;</span><br><span class="line">    # 无数据库名,无schema</span><br><span class="line">    match =&gt; &#123;&quot;message&quot; =&gt; &quot;(?m)^# User@Host: %&#123;USER:user&#125;\[[^\]]+\]\s@\s*\[%&#123;IP:clientip&#125;\]\s*([\s\S]*)#\s+Query_time:\s+%&#123;NUMBER:query_time:float&#125;\s+Lock_time: %&#123;NUMBER:lock_time:float&#125;\s+Rows_sent: %&#123;NUMBER:rows_sent:int&#125;\s+Rows_examined: %&#123;NUMBER:rows_examined:int&#125;\s*([\s\S]*)SET timestamp=%&#123;NUMBER:sql_time:int&#125;&quot;&#125;</span><br><span class="line">    overwrite =&gt; [&quot;message&quot;]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  grok&#123;</span><br><span class="line">      # 匹配 source中的ip</span><br><span class="line">    match =&gt; &#123;&quot;source&quot; =&gt; &quot;(?m)\s*%&#123;IP:server_ip&#125;&quot;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # 时间戳格式化并只保留日期</span><br><span class="line">  ruby &#123;</span><br><span class="line">    code =&gt; &quot;</span><br><span class="line">      require &#x27;time&#x27;</span><br><span class="line">      event.set(&#x27;date_tag&#x27;, Time.at(event.get(&#x27;sql_time&#x27;)).to_date.to_s.delete!(&#x27;-&#x27;))</span><br><span class="line">    &quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # 索引时间戳使用sql生成的时间，不再使用当前时间</span><br><span class="line">  date &#123;</span><br><span class="line">      match =&gt; [&quot;sql_time&quot;, &quot;yyyy-MM-dd HH:mm:ss&quot;, &quot;UNIX&quot;]</span><br><span class="line">      target =&gt; &quot;@timestamp&quot;</span><br><span class="line">      locale =&gt; &quot;cn&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  # 调试时使用，在控制台打印日志分割结果</span><br><span class="line">  stdout &#123;</span><br><span class="line">    codec =&gt; rubydebug &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  # es配置</span><br><span class="line"> elasticsearch &#123; </span><br><span class="line">    hosts =&gt; &quot;localhost:9200&quot; </span><br><span class="line">    # 索引名称</span><br><span class="line">    index =&gt; &quot;slow-sql-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="一键安装ELFK"><a href="#一键安装ELFK" class="headerlink" title="一键安装ELFK"></a>一键安装ELFK</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">-----------------------------------------</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">@Author: linvaux</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">@Email: linvaux@outlook.com</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">@Desc: Auto install ELFK</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">----------------------------------------</span></span><br><span class="line">&quot;</span><br><span class="line">INFO()</span><br><span class="line">&#123;</span><br><span class="line">    echo -e &quot;\033[0;32m[INFO] $* \033[0m&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ERROR()</span><br><span class="line">&#123;</span><br><span class="line">    echo -e &quot;\033[0;31m[ERROR] $* \033[0m&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">WARN()</span><br><span class="line">&#123;</span><br><span class="line">    echo -e &quot;\033[0;33m[WARN] $* \033[0m&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">booster the docker-hub</span></span><br><span class="line">booster()</span><br><span class="line">&#123;   </span><br><span class="line">    daemon=&quot;/etc/docker/daemon.json&quot;</span><br><span class="line">    if [[ -e $&#123;daemon&#125; ]];then</span><br><span class="line">        INFO Backup $&#123;daemon&#125; success!</span><br><span class="line">        mv $&#123;daemon&#125; $&#123;daemon&#125;.bak</span><br><span class="line">        echo &quot;&#123;\&quot;registry-mirrors\&quot; : [\&quot;https://hub-mirror.c.163.com\&quot;]&#125;&quot; &gt; $&#123;daemon&#125;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;&#123;\&quot;registry-mirrors\&quot; : [\&quot;https://hub-mirror.c.163.com\&quot;]&#125;&quot; &gt; $&#123;daemon&#125;</span><br><span class="line">    fi</span><br><span class="line">    INFO Config docker-hub booster success!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">check_env()</span><br><span class="line">&#123;</span><br><span class="line">    if [[ -z &quot;$(which docker)&quot; ]]</span><br><span class="line">    then</span><br><span class="line">        WARN  No docker were found,try to install! </span><br><span class="line">        INFO  Start to install docker </span><br><span class="line">        source /etc/os-release</span><br><span class="line">        if [[ &quot;$ID&quot; == &quot;ubuntu&quot; ]] || [[ &quot;$ID&quot; == &quot;debain&quot; ]]</span><br><span class="line">        then</span><br><span class="line">            apt update</span><br><span class="line">            apt install curl wget -y</span><br><span class="line">            curl -fsSL https://get.docker.com | sh</span><br><span class="line">            booster</span><br><span class="line">            systemctl daemon-reload</span><br><span class="line">            systemctl restart docker</span><br><span class="line">            if [[ -z &quot;$(which java)&quot; ]];then</span><br><span class="line">                apt install openjdk-8-jdk -y</span><br><span class="line">            fi</span><br><span class="line">        elif [[ &quot;$ID&quot; == &quot;centos&quot; ]]</span><br><span class="line">        then</span><br><span class="line">            yum update -y</span><br><span class="line">            yum install  wget curl net-tools -y</span><br><span class="line">            curl -fsSL https://get.docker.com | sh</span><br><span class="line">            booster</span><br><span class="line">            systemctl daemon-reload</span><br><span class="line">            systemctl restart docker</span><br><span class="line">            if [[ -z &quot;$(which java)&quot; ]];then</span><br><span class="line">                yum install java-1.8.0-openjdk -y</span><br><span class="line">            fi</span><br><span class="line">        else</span><br><span class="line">            ERROR  Could not support $ID platform! </span><br><span class="line">            exit 1</span><br><span class="line">        fi</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_elasticsearch()</span><br><span class="line">&#123;</span><br><span class="line">    INFO Start to install elasticsearch</span><br><span class="line">echo &quot;vm.max_map_count=655360&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line">    docker pull docker.elastic.co/elasticsearch/elasticsearch:6.5.4</span><br><span class="line">    docker run -d --restart=always -p 9200:9200 -p 9300:9300 --name es -h es -e cluster.name=kiki -e node.name=node1 -e http.cors.enabled=true -e http.cors.allow-origin=&quot;*&quot; -e xpack.security.enabled=false docker.elastic.co/elasticsearch/elasticsearch:6.5.4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_kibana()</span><br><span class="line">&#123;</span><br><span class="line">    INFO Start to install kibana</span><br><span class="line">    docker pull kibana:6.5.4;</span><br><span class="line">    docker run --restart=always -p 5601:5601 --name kibana -e ELASTICSEARCH_URL=http://127.0.0.1:9200 --network=host  -d kibana:6.5.4</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_filebeat_and_logstash()</span><br><span class="line">&#123;</span><br><span class="line">INFO Start to install filebeat and logstash</span><br><span class="line">    source /etc/os-release</span><br><span class="line">    if [[ &quot;$ID&quot; == &quot;ubuntu&quot; ]] || [[ &quot;$ID&quot; == &quot;debain&quot; ]]</span><br><span class="line">    then</span><br><span class="line">wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -</span><br><span class="line">apt-get install apt-transport-https -y</span><br><span class="line">echo &quot;deb https://artifacts.elastic.co/packages/6.x/apt stable main&quot; | sudo tee -a /etc/apt/sources.list.d/elastic-6.x.list</span><br><span class="line">apt-get update &amp;&amp; apt install filebeat logstash -y</span><br><span class="line">if [[ $? -ne 0 ]]</span><br><span class="line">then</span><br><span class="line">       ERROR  Install filebeat and logstash failed! </span><br><span class="line">            exit 1</span><br><span class="line">fi</span><br><span class="line">    elif [[ &quot;$ID&quot; == &quot;centos&quot; ]]</span><br><span class="line">    then</span><br><span class="line">        rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">echo -e &#x27;</span><br><span class="line">[elastic-6.x]</span><br><span class="line">name=Elastic repository for 6.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/6.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br><span class="line">&#x27; &gt; /etc/yum.repos.d/elastic.io.repo</span><br><span class="line">yum makecache &amp;&amp; yum install filebeat logstash -y</span><br><span class="line">if [[ $? -ne 0 ]]</span><br><span class="line">        then</span><br><span class="line">            ERROR  Install filebeat and logstash failed! </span><br><span class="line">            exit 1</span><br><span class="line">        fi</span><br><span class="line">    else</span><br><span class="line">        ERROR  Could not support $ID platform! </span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start_filebeat()</span><br><span class="line">&#123;</span><br><span class="line">    INFO Start to call filebeat</span><br><span class="line">    filebeat_yaml=&quot;/etc/filebeat/filebeat.yml&quot;</span><br><span class="line">    if [[ -f $&#123;filebeat_yaml&#125; ]];then</span><br><span class="line">        mv $&#123;filebeat_yaml&#125; $&#123;filebeat_yaml&#125;.bak</span><br><span class="line">        cp ./filebeat.yml $&#123;filebeat_yaml&#125;</span><br><span class="line">        systemctl restart filebeat</span><br><span class="line">        if [[ $? -ne 0 ]]</span><br><span class="line">        then</span><br><span class="line">            ERROR  Start filebeat failed! </span><br><span class="line">            exit 1</span><br><span class="line">        fi</span><br><span class="line">    else</span><br><span class="line">        ERROR $&#123;filebeat_yaml&#125; not found, please check!</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start_logstash()</span><br><span class="line">&#123;</span><br><span class="line">    INFO Start to call logstash</span><br><span class="line">    logstash_conf_dir=&quot;/etc/logstash/conf.d/&quot;</span><br><span class="line">    if [[ -e $&#123;logstash_conf_dir&#125; ]];then</span><br><span class="line">        cp ./slow_sql_by_query.conf $&#123;logstash_conf_dir&#125;</span><br><span class="line">        systemctl restart logstash</span><br><span class="line">        if [[ $? -ne 0 ]]</span><br><span class="line">        then</span><br><span class="line">            ERROR  Start logstash failed! </span><br><span class="line">            exit 1</span><br><span class="line">        fi</span><br><span class="line">    else</span><br><span class="line">        ERROR $&#123;logstash_conf_dir&#125; not found, please check!</span><br><span class="line">        exit 1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run()</span><br><span class="line">&#123;</span><br><span class="line">if [[ &quot;root&quot; == $(whoami) ]]</span><br><span class="line">then</span><br><span class="line">INFO Start to run...</span><br><span class="line">check_env</span><br><span class="line">install_elasticsearch</span><br><span class="line">install_kibana</span><br><span class="line">install_filebeat_and_logstash</span><br><span class="line">        # download_log</span><br><span class="line">        start_logstash</span><br><span class="line">        start_filebeat</span><br><span class="line">        # check_index</span><br><span class="line">        INFO Run success!</span><br><span class="line">else</span><br><span class="line">ERROR Run as root please!</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;背景是一个大型营销系统经常出现mysql的慢查询，导致线上服务频繁出现故障，为了查看是哪些sql有问题，并且要支持各种维度的统计查询，所以使用FileBeat+LogStash+ElasticSearch+Kibana实现此需求。本文仅描述如何配置</summary>
      
    
    
    
    
    <category term="LogStash" scheme="https://linvaux.github.io/tags/LogStash/"/>
    
  </entry>
  
  <entry>
    <title>EasyExcel解决自定义样式太多导致的 The maximum number of Cell Styles was exceeded 异常</title>
    <link href="https://linvaux.github.io/2024/07/26/EasyExcel%E8%A7%A3%E5%86%B3%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F%E5%A4%AA%E5%A4%9A%E5%AF%BC%E8%87%B4%E7%9A%84-The-maximum-number-of-Cell-Styles-was-exceeded-%E5%BC%82%E5%B8%B8/"/>
    <id>https://linvaux.github.io/2024/07/26/EasyExcel%E8%A7%A3%E5%86%B3%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F%E5%A4%AA%E5%A4%9A%E5%AF%BC%E8%87%B4%E7%9A%84-The-maximum-number-of-Cell-Styles-was-exceeded-%E5%BC%82%E5%B8%B8/</id>
    <published>2024-07-26T13:38:50.000Z</published>
    <updated>2024-07-26T13:41:07.071Z</updated>
    
    <content type="html"><![CDATA[<p>之前使用自定义样式解决了导出excel时，对不同单元格使用不同样式的需求，但是最近发现，导出大量数据时，就会产生如下异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: The maximum number of Cell Styles was exceeded. You can define up to <span class="number">64000</span> style in a .xlsx Workbook</span><br></pre></td></tr></table></figure><p>通过查看easyexcel在github上的<a href="https://github.com/alibaba/easyexcel/issues?q=The+maximum+number+of+Cell+Styles+was+exceeded.">issue</a>可以发现，有很多人都出现了类似问题，原因是EasyExcel最多支持创建64000个样式对象。但是我写入的数据远远超过了64000，每次写入数据都会去创建一次样式对象，导致生成excel失败。错误的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomCellWriteHandler</span> <span class="keyword">implements</span> <span class="title class_">CellWriteHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置拦截器顺序，需要 &gt; 50000</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 拦截器顺序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">order</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">60000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellDispose</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> context.getCell();</span><br><span class="line">        <span class="keyword">if</span> (BooleanUtils.isNotTrue(context.getHead())) &#123;</span><br><span class="line">            <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> context.getWriteWorkbookHolder().getWorkbook();</span><br><span class="line">            <span class="comment">// 此处代码有问题，每次进入条件，都会重复创建一个XSSFCellStyle对象</span></span><br><span class="line">            <span class="type">XSSFCellStyle</span> <span class="variable">cellStyle</span> <span class="operator">=</span> (XSSFCellStyle) workbook.createCellStyle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决此问题方法也比较简单，直接使用成员变量，不再重复创建对象。改造后的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomCellWriteHandler</span> <span class="keyword">implements</span> <span class="title class_">CellWriteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    XSSFCellStyle cellStyle;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置拦截器顺序，需要 &gt; 50000</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 拦截器顺序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">order</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">60000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellDispose</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> context.getCell();</span><br><span class="line">        <span class="keyword">if</span> (BooleanUtils.isNotTrue(context.getHead())) &#123;</span><br><span class="line">            <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> context.getWriteWorkbookHolder().getWorkbook();</span><br><span class="line">            <span class="keyword">if</span> (cellStyle == <span class="literal">null</span>) &#123;</span><br><span class="line">                cellStyle = (XSSFCellStyle) workbook.createCellStyle();</span><br><span class="line">            &#125;</span><br><span class="line">            cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在创建新样式之前，判断下是不是已经有这个样式了，没有的话再创建，这样就避免了重复创建样式对象导致的异常。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前使用自定义样式解决了导出excel时，对不同单元格使用不同样式的需求，但是最近发现，导出大量数据时，就会产生如下异常&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span </summary>
      
    
    
    
    
    <category term="Java, EasyExcel" scheme="https://linvaux.github.io/tags/Java-EasyExcel/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件整理(一)</title>
    <link href="https://linvaux.github.io/2024/07/25/IDEA%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://linvaux.github.io/2024/07/25/IDEA%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2024-07-25T15:24:54.000Z</published>
    <updated>2024-07-25T15:38:47.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Atom-Material-Icons"><a href="#Atom-Material-Icons" class="headerlink" title="Atom Material Icons"></a>Atom Material Icons</h2><blockquote><p>material风格图标库，装完之后页面就花里胡哨的，挺好看</p></blockquote><p><img src="/../images/4o5karobikm85LEMxj4DfxUr.png" alt="image.png"></p><h2 id="Material-Theme-UI"><a href="#Material-Theme-UI" class="headerlink" title="Material Theme UI"></a>Material Theme UI</h2><blockquote><p>material风格主题，还是挺好看的</p></blockquote><p><img src="/../images/2WeZMft79yVRxEunemT7onp8.png" alt="image.png"></p><h2 id="One-Dark-Theme"><a href="#One-Dark-Theme" class="headerlink" title="One Dark Theme"></a>One Dark Theme</h2><blockquote><p>暗黑风格主题（推荐），主要是免费</p></blockquote><p><img src="/../images/QGwGDsi745gNenshZD9k68st.png" alt="image.png"></p><h2 id="Rainbow-Brackets"><a href="#Rainbow-Brackets" class="headerlink" title="Rainbow Brackets"></a>Rainbow Brackets</h2><blockquote><p>彩虹括号</p></blockquote><p><img src="/../images/mpmkLHVZCyKwPTgDWo2ajNQN.png" alt="image.png"></p><h2 id="ignore"><a href="#ignore" class="headerlink" title=".ignore"></a>.ignore</h2><blockquote><p>生成各类.ignore文件，在创建git仓库的时候使用此插件格外方便</p></blockquote><p><img src="/../images/f7764ovtWyVzqJFDgWC5cAzY.png" alt="image.png"></p><h2 id="CodeGlance"><a href="#CodeGlance" class="headerlink" title="CodeGlance"></a>CodeGlance</h2><blockquote><p>代码缩略图，方便定位代码</p></blockquote><p><img src="/../images/xvXgEmtNUAuahcuZtoY5sHuT.png" alt="image.png"></p><h2 id="Java-Bean-to-Json"><a href="#Java-Bean-to-Json" class="headerlink" title="Java Bean to Json"></a>Java Bean to Json</h2><blockquote><p>在bean上右键，即可将此bean复制为json格式，在构造请求时比较方便</p></blockquote><h2 id="maven-search"><a href="#maven-search" class="headerlink" title="maven-search"></a>maven-search</h2><blockquote><p>maven&#x2F;gradle坐标搜索插件，贼好用，支持模糊搜索</p></blockquote><p><img src="/../images/brhT5YKKHNsTncGjpV5cCdA4.png" alt="image.png"></p><h2 id="Maven-Helper"><a href="#Maven-Helper" class="headerlink" title="Maven Helper"></a>Maven Helper</h2><blockquote><p>依赖冲突查看神器，也可以树状展示依赖关系</p></blockquote><p><img src="/../images/Xt34QvHpHA8i3jjAjiKNwbSg.png" alt="image.png"></p><h2 id="Mybatisx"><a href="#Mybatisx" class="headerlink" title="Mybatisx"></a>Mybatisx</h2><blockquote><p>mybatis-plus团队出品的插件，支持从数据库表直接生成代码，包含基本CRUD功能，很方便</p></blockquote><h2 id="MyBatisCodeHelperPro"><a href="#MyBatisCodeHelperPro" class="headerlink" title="MyBatisCodeHelperPro"></a>MyBatisCodeHelperPro</h2><blockquote><p>怎么说呢，就是很厉害，基本不用自己写代码了，但是收费</p><ul><li>演示视频：<a href="https://www.bilibili.com/video/av50632948">https://www.bilibili.com/video/av50632948</a></li><li>使用文档：<a href="https://gejun123456.github.io/MyBatisCodeHelper-Pro/#/">https://gejun123456.github.io/MyBatisCodeHelper-Pro/#/</a></li></ul></blockquote><h2 id="MyBatis-Log-EasyPlus"><a href="#MyBatis-Log-EasyPlus" class="headerlink" title="MyBatis Log EasyPlus"></a>MyBatis Log EasyPlus</h2><blockquote><p>格式化mybatis日志，很好用</p></blockquote><p><img src="/../images/E3TYbUkbjRPj1m6uZiVt1k6p.png" alt="image.png"></p><h2 id="SequenceDiagram"><a href="#SequenceDiagram" class="headerlink" title="SequenceDiagram"></a>SequenceDiagram</h2><blockquote><p>生成方法的时序图，非常有用<br>官方文档：<a href="https://vanco.github.io/SequencePlugin/">https://vanco.github.io/SequencePlugin/</a></p></blockquote><p><img src="/../images/LER7ybg174LhKcQL3HaZShkv.png" alt="image.png"></p><h2 id="PlantUML"><a href="#PlantUML" class="headerlink" title="PlantUML"></a>PlantUML</h2><blockquote><p>时序图，类图绘制插件</p></blockquote><p><img src="/../images/HsoHEk1YjMgf8QEqmFxPasDD.png" alt="image.png"></p><h2 id="Grep-Console"><a href="#Grep-Console" class="headerlink" title="Grep Console"></a>Grep Console</h2><blockquote><p>由于Intellij idea不支持显示ascii颜色，grep-console插件能很好的解决这个问题，下面就以开发JavaEE项目中，结合Log4j配置多颜色日志输出功能。</p></blockquote><p><img src="/../images/DdDMTYcUyz5Zt87Duy1U6D4D.png" alt="image.png"><br><img src="/../images/6aPcSTCmJXVjy9VZyejdF1it.png" alt="image.png"></p><h2 id="GitToolBox"><a href="#GitToolBox" class="headerlink" title="GitToolBox"></a>GitToolBox</h2><blockquote><p>git工具箱，可以显示当前代码分支和每一行代码提交人以及commit log</p></blockquote><p><img src="/../images/zdGJ2NS6vj6XhRT1CbkkDNdq.png" alt="image.png"></p><h2 id="Translation"><a href="#Translation" class="headerlink" title="Translation"></a>Translation</h2><blockquote><p>翻译插件，再也不用去百度翻译了</p></blockquote><h2 id="RestfulToolkit"><a href="#RestfulToolkit" class="headerlink" title="RestfulToolkit"></a>RestfulToolkit</h2><blockquote><p>根据url直接跳转到对应的controller，比较好用，尤其是url多的时候，直接搜索url就可以了<br><img src="/../images/7Sdd5MxGWthLR63qgUp5hQMt.png" alt="image.png"></p></blockquote><h2 id="Key-promoter-X"><a href="#Key-promoter-X" class="headerlink" title="Key promoter X"></a>Key promoter X</h2><blockquote><p>记性不好的可以试试，时间长了就能记住快捷键了</p></blockquote><h2 id="Statistic"><a href="#Statistic" class="headerlink" title="Statistic"></a>Statistic</h2><blockquote><p>项目信息统计</p></blockquote><p><img src="/../images/Gw7PUVv9a1H8ERJBtKfZdcgj.png" alt="image.png"></p><h2 id="Git-Commit-Message-Helper"><a href="#Git-Commit-Message-Helper" class="headerlink" title="Git Commit Message Helper"></a>Git Commit Message Helper</h2><blockquote><p>帮助生成commit message<br><img src="/../images/T4QM3G1XVVKLiZk8AYdVgPSq.png" alt="image.png"></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Atom-Material-Icons&quot;&gt;&lt;a href=&quot;#Atom-Material-Icons&quot; class=&quot;headerlink&quot; title=&quot;Atom Material Icons&quot;&gt;&lt;/a&gt;Atom Material Icons&lt;/h2&gt;&lt;bloc</summary>
      
    
    
    
    <category term="工具分享" scheme="https://linvaux.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Java, IDEA" scheme="https://linvaux.github.io/tags/Java-IDEA/"/>
    
  </entry>
  
  <entry>
    <title>EasyExcel自定义字段导入</title>
    <link href="https://linvaux.github.io/2024/07/25/EasyExcel%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E6%AE%B5%E5%AF%BC%E5%85%A5/"/>
    <id>https://linvaux.github.io/2024/07/25/EasyExcel%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E6%AE%B5%E5%AF%BC%E5%85%A5/</id>
    <published>2024-07-25T15:10:00.000Z</published>
    <updated>2024-07-25T15:10:32.847Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h2><p>原先的导入功能只支持使用固定模板导入，模板格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCaseExcelData</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;所属功能模块&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用例编号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;必填项不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;*用例名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;必填项不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;*优先级&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String caseLevel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;必填项不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;*用例类型&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String caseType;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用例标签&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String tags;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;前置条件&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String preSteps;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;必填项不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;*操作步骤/场景描述&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String stepDesc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;必填项不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;*预期结果&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String expectResult;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;关联需求类型&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String requirementType;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;关联需求ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String requirementId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty(value = &quot;用例版本&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String caseVersion;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EasyExcel 导入监听器直接使用AnalysisEventListener<TestCaseExcelData> 即可实现导入校验，校验规则较为复杂，不在此处展开。<br>现在要求用户配置了自定义字段之后，还可以导入自定义字段，同时保留对固定字段的校验逻辑。因此原有的适用对象的监听器不再适用，需要使用无对象的方式做数据校验。</p><h2 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h2><ul><li>EasyExcel 无对象方式的监听器是继承AnalysisEventListener&lt;Map&lt;Integer, String&gt;&gt;类，在重写了invoke() 方法后发现，入参是 Map&lt;Integer, String&gt; data，这就导致我无法对每一行数据按照原有的方式校验。</li><li>用户导入的模板列顺序是不固定的，因此也没法遍历 data 进行原有规则的校验。</li></ul><h2 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3.解决方案"></a>3.解决方案</h2><h3 id="3-1-解决思路"><a href="#3-1-解决思路" class="headerlink" title="3.1 解决思路"></a>3.1 解决思路</h3><ul><li>既然 invoke() 方法入参是 Map&lt;Integer, String&gt; data 这种数据结构，那能不能把这个 Map 中固定的字段转为一个 TestCaseExcelData 对象来处理？</li><li>如果要转为一个对象，那怎么把 Map 中的数据跟对象的字段做映射？</li></ul><h3 id="3-2-Map-转对象"><a href="#3-2-Map-转对象" class="headerlink" title="3.2 Map 转对象"></a>3.2 Map 转对象</h3><ul><li>Map&lt;Integer, String&gt; 是当前行的数据，其中 key 是当前行的列索引，value 是当前单元格的值，如果要转对象，首先得知道这个单元格对应的表头是什么，获取表头的方式很简单，直接在 listener 中定义一个 Map&lt;Integer, String&gt; headMap ,然后重写 invokeHeadMap(Map&lt;Integer, String&gt; headMap, AnalysisContext context) 方法，即可获取到表头。</li><li>取到表头之后，就可以在 invoke(Map&lt;Integer, String&gt; data, AnalysisContext context)方法中遍历data，根据此 map 的 key 来获取到当前单元格表头信息。代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Map&lt;Integer, String&gt; data, AnalysisContext context)</span> &#123;</span><br><span class="line">        data.forEach((index, value) -&gt; &#123;</span><br><span class="line">            <span class="comment">// 获取表头</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">headName</span> <span class="operator">=</span> headMap.get(index);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>取到了当前单元格的对应的表头之后，发现这个表头就是 TestCaseExcelData 类中属性上加的 @ExcelProperty(value &#x3D; “用例版本”) 注解中 value 属性的值，那就简单了，直接通过反射获取这个类所有表头和对应的属性，然后存到一个 Map&lt;Stirng, Field&gt; fieldStringMap 中就好了，这样就能通过表头获取到这个表头字段对应的类属性，为我们后面创建对象奠定了基础。代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Field[] fields = TestCaseExcelData.class.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">    <span class="keyword">if</span> (field.isAnnotationPresent(ExcelProperty.class)) &#123;</span><br><span class="line">        <span class="type">ExcelProperty</span> <span class="variable">declaredAnnotation</span> <span class="operator">=</span> field.getDeclaredAnnotation(ExcelProperty.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">headValue</span> <span class="operator">=</span> declaredAnnotation.value()[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">this</span>.fieldStringMap.put(headValue, field);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>经过上面的几步操作，我们已经得到了如下的几个Map<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前行的数据 &lt;列索引, 单元格值&gt;</span></span><br><span class="line">Map&lt;Integer, String&gt; data;</span><br><span class="line"><span class="comment">// 表头的数据 &lt;列索引, 单元格值&gt;</span></span><br><span class="line">Map&lt;Integer, String&gt; headMap;</span><br><span class="line"><span class="comment">// 实体对象表头和对应字段的数据 &lt;表头名称, 表头对应的属性&gt;</span></span><br><span class="line">Map&lt;Stirng, Field&gt; fieldStringMap;</span><br></pre></td></tr></table></figure></li><li>后面的思路经很清晰了，遍历行数据Map&lt;Integer, String&gt; data ，通过 key 来确定<br>当前单元格对应的表头，然后通过表头来获取实体类对应的属性，再通过反射来给这个属性赋值。代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Map&lt;Integer, String&gt; data, AnalysisContext context)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建实体对象</span></span><br><span class="line">        <span class="type">TestCaseExcelData</span> <span class="variable">rawData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestCaseExcelData</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            data.forEach((index, value) -&gt; &#123;</span><br><span class="line">                <span class="comment">// 获取到当前单元格的表头</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">headName</span> <span class="operator">=</span> headMap.get(index);</span><br><span class="line">                <span class="comment">// 根据表头获取实体类的属性</span></span><br><span class="line">                <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> fieldStringMap.get(headName);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 判断实体类是否有此属性</span></span><br><span class="line">                    <span class="keyword">if</span> (field != <span class="literal">null</span>) &#123;</span><br><span class="line">                        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        <span class="comment">// 通过反射直接赋值</span></span><br><span class="line">                        field.set(rawData, value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 解析自定义字段，只有系统配置的字段才会被缓存</span></span><br><span class="line">                List&lt;CustomFieldPO&gt; customFieldPOS = systemCustomFieldMap.get(headName);</span><br><span class="line">                <span class="keyword">if</span> (CollectionUtils.isNotEmpty(customFieldPOS)) &#123;</span><br><span class="line">                    customFieldMap.put(customFieldPOS.get(<span class="number">0</span>).getFieldKey(), value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 固定字段校验</span></span><br><span class="line">            ExcelValidateHelper.validateEntity(rawData);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>经过以上操作，我们成功的把一个 Map 转为了一个已知的对象，这样就跟通过对象导入一样了，后面校验的代码也无需再重复编写。</li></ul><h2 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h2><p>最后，附上自定义模板校验表头的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invokeHeadMap</span><span class="params">(Map&lt;Integer, String&gt; headMap, AnalysisContext context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.invokeHeadMap(headMap, context);</span><br><span class="line">        <span class="comment">// 限制文件行数不超过5000行</span></span><br><span class="line">        <span class="keyword">if</span> (context.readSheetHolder().getApproximateTotalRowNumber() &gt; <span class="number">5000</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(CommonException.EXCEL_ROW_EXCEEDED);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 校验excel模版是否正确</span></span><br><span class="line">        ExcelImportUtil.validateHeadLoosely(headMap, <span class="built_in">this</span>.dynamicCaseHeader.get(<span class="number">0</span>));</span><br><span class="line">        <span class="built_in">this</span>.headMap = headMap;</span><br><span class="line">        Field[] fields = TestCaseExcelData.class.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="keyword">if</span> (field.isAnnotationPresent(ExcelProperty.class)) &#123;</span><br><span class="line">                <span class="type">ExcelProperty</span> <span class="variable">declaredAnnotation</span> <span class="operator">=</span> field.getDeclaredAnnotation(ExcelProperty.class);</span><br><span class="line">                <span class="type">String</span> <span class="variable">headValue</span> <span class="operator">=</span> declaredAnnotation.value()[<span class="number">0</span>];</span><br><span class="line">                <span class="built_in">this</span>.fieldStringMap.put(headValue, field);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表头宽松校验</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;只校验表头是否存在模板中的字段&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;不允许存在重复的表头&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;导入文件中可以包含多余的列名&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headMap              实际读到的表头</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expectedHeadMapFiled 期望的表头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">validateHeadLoosely</span><span class="params">(Map&lt;Integer, String&gt; headMap, List&lt;String&gt; expectedHeadMapFiled)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isEmpty(expectedHeadMapFiled) || MapUtils.isEmpty(headMap)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(CommonException.EXCEL_TEMPLATE_IS_NOT_CORRECT);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 移除没有内容的表头</span></span><br><span class="line">            headMap.entrySet().removeIf(entry -&gt; entry.getValue() == <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 判断是否存在重复列</span></span><br><span class="line">            Collection&lt;String&gt; headValues = headMap.values();</span><br><span class="line">            Set&lt;String&gt; headValuesSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(headValues);</span><br><span class="line">            <span class="keyword">if</span> (headValues.size() != headValuesSet.size()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(CommonException.EXCEL_HEADS_DUPLICATED);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 判断模板字段是否都包含在表头里</span></span><br><span class="line">            <span class="keyword">for</span> (String value : expectedHeadMapFiled) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!headMap.containsValue(value)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(CommonException.EXCEL_TEMPLATE_IS_NOT_CORRECT);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(<span class="string">&quot;Excel表头校验失败，异常详情：&quot;</span> + ExceptionUtil.getErrorMessage(e));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1.背景&quot;&gt;&lt;/a&gt;1.背景&lt;/h2&gt;&lt;p&gt;原先的导入功能只支持使用固定模板导入，模板格式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;</summary>
      
    
    
    
    
    <category term="Java, EasyExcel" scheme="https://linvaux.github.io/tags/Java-EasyExcel/"/>
    
  </entry>
  
  <entry>
    <title>EasyExcel自定义单元格样式</title>
    <link href="https://linvaux.github.io/2024/07/25/EasyExcel%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%95%E5%85%83%E6%A0%BC%E6%A0%B7%E5%BC%8F/"/>
    <id>https://linvaux.github.io/2024/07/25/EasyExcel%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%95%E5%85%83%E6%A0%BC%E6%A0%B7%E5%BC%8F/</id>
    <published>2024-07-25T15:09:03.000Z</published>
    <updated>2024-07-25T15:11:30.742Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前在开发系统的导出功能时需要对单元格增加不同的样式，过程有点曲折，记录一下以备后续用到</p></blockquote><ul><li>创建java项目，引入以下依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>excel 导出代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> EasyExcel.write(filePath).build()) &#123;</span><br><span class="line">        <span class="type">WriteSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="string">&quot;自定义样式&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置表头</span></span><br><span class="line">                .head(ExportHeaderDTO.class)</span><br><span class="line">                <span class="comment">// 不使用默认样式</span></span><br><span class="line">                .useDefaultStyle(Boolean.FALSE)</span><br><span class="line">                <span class="comment">// 添加自定义单元格样式</span></span><br><span class="line">                .registerWriteHandler(<span class="keyword">new</span> <span class="title class_">CustomCellWriteHandler</span>())</span><br><span class="line">                <span class="comment">// 添加单元格边框样式</span></span><br><span class="line">                .registerWriteHandler(CustomHorizontalCellStyleStrategy.cellBorder())</span><br><span class="line">                .build();</span><br><span class="line">        excelWriter.write(collect, sheet);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>自定义样式 CustomCellWriteHandler.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomCellWriteHandler</span> <span class="keyword">implements</span> <span class="title class_">CellWriteHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置拦截器顺序，需要 &gt; 50000</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 拦截器顺序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">order</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">60000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCellDispose</span><span class="params">(CellWriteHandlerContext context)</span> &#123;</span><br><span class="line">        <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> context.getCell();</span><br><span class="line">        <span class="keyword">if</span> (BooleanUtils.isNotTrue(context.getHead())) &#123;</span><br><span class="line">            <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> context.getWriteWorkbookHolder().getWorkbook();</span><br><span class="line">            <span class="type">XSSFCellStyle</span> <span class="variable">cellStyle</span> <span class="operator">=</span> (XSSFCellStyle) workbook.createCellStyle();</span><br><span class="line">            cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">            <span class="comment">// 设置边框粗细</span></span><br><span class="line">            cellStyle.setBorderRight(BorderStyle.THIN);</span><br><span class="line">            cellStyle.setBorderTop(BorderStyle.THIN);</span><br><span class="line">            cellStyle.setBorderRight(BorderStyle.THIN);</span><br><span class="line">            cellStyle.setBorderBottom(BorderStyle.THIN);</span><br><span class="line">            <span class="comment">// 设置边框颜色</span></span><br><span class="line">            cellStyle.setTopBorderColor(IndexedColors.BLACK.index);</span><br><span class="line">            cellStyle.setBottomBorderColor(IndexedColors.BLACK.index);</span><br><span class="line">            cellStyle.setLeftBorderColor(IndexedColors.BLACK.index);</span><br><span class="line">            cellStyle.setRightBorderColor(IndexedColors.BLACK.index);</span><br><span class="line">            cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">            <span class="comment">// 水平居中</span></span><br><span class="line">            cellStyle.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">            <span class="comment">// 垂直居中</span></span><br><span class="line">            cellStyle.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">            <span class="type">Font</span> <span class="variable">font</span> <span class="operator">=</span> workbook.createFont();</span><br><span class="line">            <span class="keyword">if</span> (cell.getColumnIndex() == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 设置字体颜色</span></span><br><span class="line">                font.setColor(IndexedColors.DARK_TEAL.index);</span><br><span class="line">                cellStyle.setFont(font);</span><br><span class="line">                <span class="comment">// 设置单元格颜色</span></span><br><span class="line">                cellStyle.setFillForegroundColor(<span class="keyword">new</span> <span class="title class_">XSSFColor</span>(ColorConstant.CustomColor.PINK, CustomIndexedColorMap.fromColors(CTColors.Factory.newInstance())));</span><br><span class="line">                cell.setCellStyle(cellStyle);</span><br><span class="line">                <span class="comment">// 这里要把 WriteCellData的样式清空， 不然后面还有一个拦截器 FillStyleCellWriteHandler 默认会将 WriteCellStyle 设置到cell里面去 会导致自己设置的不一样（很关键）</span></span><br><span class="line">                context.getFirstCellData().setWriteCellStyle(<span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>边框样式 CustomHorizontalCellStyleStrategy.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomHorizontalCellStyleStrategy</span> <span class="keyword">extends</span> <span class="title class_">HorizontalCellStyleStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">order</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">6500</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单元格边框</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 样式策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HorizontalCellStyleStrategy <span class="title function_">cellBorder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WriteCellStyle</span> <span class="variable">headWriteCellStyle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteCellStyle</span>();</span><br><span class="line">        headWriteCellStyle.setTopBorderColor(IndexedColors.BLACK.index);</span><br><span class="line">        headWriteCellStyle.setBottomBorderColor(IndexedColors.BLACK.index);</span><br><span class="line">        headWriteCellStyle.setLeftBorderColor(IndexedColors.BLACK.index);</span><br><span class="line">        headWriteCellStyle.setRightBorderColor(IndexedColors.BLACK.index);</span><br><span class="line">        headWriteCellStyle.setFillPatternType(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">        <span class="type">WriteCellStyle</span> <span class="variable">contentWriteCellStyle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriteCellStyle</span>();</span><br><span class="line">        contentWriteCellStyle.setBorderRight(BorderStyle.THIN);</span><br><span class="line">        contentWriteCellStyle.setBorderTop(BorderStyle.THIN);</span><br><span class="line">        contentWriteCellStyle.setBorderRight(BorderStyle.THIN);</span><br><span class="line">        contentWriteCellStyle.setBorderBottom(BorderStyle.THIN);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HorizontalCellStyleStrategy</span>(headWriteCellStyle, contentWriteCellStyle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;之前在开发系统的导出功能时需要对单元格增加不同的样式，过程有点曲折，记录一下以备后续用到&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;创建java项目，引入以下依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight </summary>
      
    
    
    
    
    <category term="Java, EasyExcel" scheme="https://linvaux.github.io/tags/Java-EasyExcel/"/>
    
  </entry>
  
  <entry>
    <title>基于Centos7的UI自动化环境Dockerfile</title>
    <link href="https://linvaux.github.io/2024/07/25/%E5%9F%BA%E4%BA%8ECentos7%E7%9A%84UI%E8%87%AA%E5%8A%A8%E5%8C%96%E7%8E%AF%E5%A2%83Dockerfile/"/>
    <id>https://linvaux.github.io/2024/07/25/%E5%9F%BA%E4%BA%8ECentos7%E7%9A%84UI%E8%87%AA%E5%8A%A8%E5%8C%96%E7%8E%AF%E5%A2%83Dockerfile/</id>
    <published>2024-07-25T15:08:06.000Z</published>
    <updated>2024-07-25T15:08:31.205Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line"></span><br><span class="line">MAINTAINER linvaux &lt;linvaux@outlook.com&gt;</span><br><span class="line"></span><br><span class="line">WORKDIR /opt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改源，安装依赖</span></span><br><span class="line">RUN sed -i <span class="string">&quot;s/#baseurl/baseurl/g&quot;</span> /etc/yum.repos.d/CentOS-Base.repo &amp;&amp; \</span><br><span class="line">    sed -i <span class="string">&quot;s/mirrorlist=http/#mirrorlist=http/g&quot;</span> /etc/yum.repos.d/CentOS-Base.repo &amp;&amp; \</span><br><span class="line">    sed -i <span class="string">&quot;s@http://mirror.centos.org@https://repo.huaweicloud.com@g&quot;</span> /etc/yum.repos.d/CentOS-Base.repo &amp;&amp; \</span><br><span class="line">    yum clean all &amp;&amp; \</span><br><span class="line">    yum makecache &amp;&amp; \</span><br><span class="line">    yum update -y &amp;&amp; \</span><br><span class="line">    yum install -y wget git zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel libffi-devel gcc make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装JDK1.8</span></span><br><span class="line">RUN wget http://10.177.248.111:8089/ftp/dev_tools/jdk-8u271-linux-x64.tar.gz &amp;&amp; \</span><br><span class="line">    tar -vxf jdk-8u271-linux-x64.tar.gz &amp;&amp; \</span><br><span class="line">    <span class="built_in">mv</span> jdk1.8.0_271/ /usr/local/ &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;export JAVA_HOME=/usr/local/jdk1.8.0_271&#x27;</span> &gt;&gt; /etc/profile &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;export JRE_HOME=$&#123;JAVA_HOME&#125;/jre&#x27;</span> &gt;&gt; /etc/profile &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib&#x27;</span> &gt;&gt; /etc/profile &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line">    <span class="built_in">echo</span> `java -version`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装python3.7</span></span><br><span class="line">RUN wget https://mirrors.huaweicloud.com/python/3.7.8/Python-3.7.8.tgz &amp;&amp; \ </span><br><span class="line">    tar -vxf Python-3.7.8.tgz &amp;&amp; \</span><br><span class="line">    <span class="built_in">mv</span> Python-3.7.8 /usr/local/python378 &amp;&amp; \</span><br><span class="line">    <span class="built_in">cd</span> /usr/local/python378 &amp;&amp; \</span><br><span class="line">    ./configure --prefix=/usr/local/python378 --enable-loadable-sqlite-extensions --with-ssl &amp;&amp;\</span><br><span class="line">    make -j$(<span class="built_in">nproc</span>) &amp;&amp; \</span><br><span class="line">    make install -j$(<span class="built_in">nproc</span>) &amp;&amp; \</span><br><span class="line">    <span class="built_in">ln</span> -s /usr/local/python378/bin/python3.7 /usr/bin/python3 &amp;&amp; \</span><br><span class="line">    <span class="built_in">ln</span> -s /usr/local/python378/bin/pip3 /usr/bin/pip3 &amp;&amp; \</span><br><span class="line">    <span class="built_in">mkdir</span> /root/.pip &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[global]&quot;</span> &gt; /root/.pip/pip.conf &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;index-url=https://pypi.douban.com/simple/&quot;</span> &gt;&gt; /root/.pip/pip.conf &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[install]&quot;</span> &gt;&gt; /root/.pip/pip.conf &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;trusted-host=pypi.douban.com&quot;</span> &gt;&gt; /root/.pip/pip.conf</span><br><span class="line">    <span class="built_in">echo</span> `python3 -V`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装chrome</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&#x27;[google-chrome]&#x27;</span> &gt; /etc/yum.repos.d/google-chrome.repo &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;name=google-chrome&#x27;</span> &gt;&gt; /etc/yum.repos.d/google-chrome.repo &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;baseurl=http://dl.google.com/linux/chrome/rpm/stable/$basearch&#x27;</span> &gt;&gt; /etc/yum.repos.d/google-chrome.repo &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;enabled=1&#x27;</span> &gt;&gt; /etc/yum.repos.d/google-chrome.repo &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;gpgcheck=1&#x27;</span> &gt;&gt; /etc/yum.repos.d/google-chrome.repo &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub&#x27;</span> &gt;&gt; /etc/yum.repos.d/google-chrome.repo &amp;&amp; \</span><br><span class="line">    yum -y install google-chrome-stable --nogpgcheck &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> `google-chrome --version`</span><br><span class="line"><span class="comment"># 安装chromedriver驱动</span></span><br><span class="line"><span class="comment"># 安装allure</span></span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">rm</span> -rf jdk-8u271-linux-x64.tar.gz &amp;&amp; \</span><br><span class="line"><span class="built_in">rm</span> -rf Python-3.7.8.tgz &amp;&amp; \</span><br><span class="line">    yum clean all</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    
    <category term="Docker, 自动化测试" scheme="https://linvaux.github.io/tags/Docker-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>基于Centos7的Python3.7镜像构建</title>
    <link href="https://linvaux.github.io/2024/07/25/%E5%9F%BA%E4%BA%8ECentos7%E7%9A%84Python3-7%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/"/>
    <id>https://linvaux.github.io/2024/07/25/%E5%9F%BA%E4%BA%8ECentos7%E7%9A%84Python3-7%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/</id>
    <published>2024-07-25T15:07:16.000Z</published>
    <updated>2024-07-25T15:07:40.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line"></span><br><span class="line">MAINTAINER linvaux &lt;linvaux@outlook.com&gt;</span><br><span class="line"></span><br><span class="line">WORKDIR /opt</span><br><span class="line"></span><br><span class="line">RUN sed -i <span class="string">&quot;s/#baseurl/baseurl/g&quot;</span> /etc/yum.repos.d/CentOS-Base.repo &amp;&amp; \</span><br><span class="line">    sed -i <span class="string">&quot;s/mirrorlist=http/#mirrorlist=http/g&quot;</span> /etc/yum.repos.d/CentOS-Base.repo &amp;&amp; \</span><br><span class="line">    sed -i <span class="string">&quot;s@http://mirror.centos.org@https://repo.huaweicloud.com@g&quot;</span> /etc/yum.repos.d/CentOS-Base.repo &amp;&amp; \</span><br><span class="line">yum clean all &amp;&amp; \</span><br><span class="line">    yum makecache &amp;&amp; \</span><br><span class="line">    yum update -y</span><br><span class="line"></span><br><span class="line">RUN yum install -y wget zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel libffi-devel gcc make</span><br><span class="line"></span><br><span class="line">RUN wget https://mirrors.huaweicloud.com/python/3.7.8/Python-3.7.8.tgz &amp;&amp; \ </span><br><span class="line">    tar -vxf Python-3.7.8.tgz &amp;&amp; \</span><br><span class="line">    <span class="built_in">mv</span> Python-3.7.8 /usr/local/python378 &amp;&amp; \</span><br><span class="line">    <span class="built_in">cd</span> /usr/local/python378 &amp;&amp; \</span><br><span class="line">    ./configure --prefix=/usr/local/python378 --enable-loadable-sqlite-extensions --with-ssl &amp;&amp;\</span><br><span class="line">    make -j$(<span class="built_in">nproc</span>) &amp;&amp; \</span><br><span class="line">    make install -j$(<span class="built_in">nproc</span>) &amp;&amp; \</span><br><span class="line">    <span class="built_in">ln</span> -s /usr/local/python378/bin/python3.7 /usr/bin/python3 &amp;&amp; \</span><br><span class="line">  <span class="built_in">ln</span> -s /usr/local/python378/bin/pip3 /usr/bin/pip3 &amp;&amp; \</span><br><span class="line">    <span class="built_in">mkdir</span> /root/.pip &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[global]&quot;</span> &gt; /root/.pip/pip.conf &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;index-url=https://pypi.douban.com/simple/&quot;</span> &gt;&gt; /root/.pip/pip.conf &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[install]&quot;</span> &gt;&gt; /root/.pip/pip.conf &amp;&amp; \</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;trusted-host=pypi.douban.com&quot;</span> &gt;&gt; /root/.pip/pip.conf</span><br><span class="line">RUN <span class="built_in">rm</span> -rf Python-3.7.8.tgz</span><br></pre></td></tr></table></figure><h1 id="构建命令"><a href="#构建命令" class="headerlink" title="构建命令"></a>构建命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t centos-python378 .</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dockerfile&quot;&gt;&lt;a href=&quot;#Dockerfile&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile&quot;&gt;&lt;/a&gt;Dockerfile&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://linvaux.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>基于Ubuntu16.04的Python3.7镜像构建</title>
    <link href="https://linvaux.github.io/2024/07/25/%E5%9F%BA%E4%BA%8EUbuntu16-04%E7%9A%84Python3-7%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/"/>
    <id>https://linvaux.github.io/2024/07/25/%E5%9F%BA%E4%BA%8EUbuntu16-04%E7%9A%84Python3-7%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/</id>
    <published>2024-07-25T15:06:21.000Z</published>
    <updated>2024-07-25T15:06:40.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:16.04</span><br><span class="line"></span><br><span class="line">MAINTAINER linvaux &lt;linvaux@outlook.com&gt;</span><br><span class="line"></span><br><span class="line">WORKDIR /opt</span><br><span class="line"></span><br><span class="line">RUN sed -i &quot;s@http://.*archive.ubuntu.com@http://repo.huaweicloud.com@g&quot; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    sed -i &quot;s@http://.*security.ubuntu.com@http://repo.huaweicloud.com@g&quot; /etc/apt/sources.list &amp;&amp; \</span><br><span class="line">    apt-get update &amp;&amp; \</span><br><span class="line">    apt-get upgrade -y</span><br><span class="line"></span><br><span class="line">RUN apt-get install -y gcc make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev</span><br><span class="line"></span><br><span class="line">RUN wget https://mirrors.huaweicloud.com/python/3.7.8/Python-3.7.8.tgz &amp;&amp; \ </span><br><span class="line">    tar -vxf Python-3.7.8.tgz &amp;&amp; \</span><br><span class="line">    mv Python-3.7.8 /usr/local/python378 &amp;&amp; \</span><br><span class="line">    cd /usr/local/python378 &amp;&amp; \</span><br><span class="line">    ./configure --prefix=/usr/local/python378 --enable-loadable-sqlite-extensions --with-ssl &amp;&amp;\</span><br><span class="line">    make -j$(nproc) &amp;&amp; \</span><br><span class="line">    make install -j$(nproc) &amp;&amp; \</span><br><span class="line">    ln -s /usr/local/python378/bin/python3.7 /usr/bin/python3 &amp;&amp; \</span><br><span class="line">  ln -s /usr/local/python378/bin/pip3 /usr/bin/pip3 &amp;&amp; \</span><br><span class="line">    mkdir /root/.pip &amp;&amp; \</span><br><span class="line">    echo &quot;[global]&quot; &gt; /root/.pip/pip.conf &amp;&amp; \</span><br><span class="line">    echo &quot;index-url=https://pypi.douban.com/simple/&quot; &gt;&gt; /root/.pip/pip.conf &amp;&amp; \</span><br><span class="line">    echo &quot;[install]&quot; &gt;&gt; /root/.pip/pip.conf &amp;&amp; \</span><br><span class="line">    echo &quot;trusted-host=pypi.douban.com&quot; &gt;&gt; /root/.pip/pip.conf</span><br><span class="line">RUN rm -rf Python-3.7.8.tgz</span><br></pre></td></tr></table></figure><h2 id="构建命令"><a href="#构建命令" class="headerlink" title="构建命令"></a>构建命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t ubuntu-python378 .</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dockerfile&quot;&gt;&lt;a href=&quot;#Dockerfile&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile&quot;&gt;&lt;/a&gt;Dockerfile&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://linvaux.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>CentOS安装Google-Chrome浏览器</title>
    <link href="https://linvaux.github.io/2024/07/25/CentOS%E5%AE%89%E8%A3%85Google-Chrome%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>https://linvaux.github.io/2024/07/25/CentOS%E5%AE%89%E8%A3%85Google-Chrome%E6%B5%8F%E8%A7%88%E5%99%A8/</id>
    <published>2024-07-25T15:05:23.000Z</published>
    <updated>2024-07-25T15:06:01.769Z</updated>
    
    <content type="html"><![CDATA[<h3 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h3><ul><li>在目录 &#x2F;etc&#x2F;yum.repos.d&#x2F; 下新建文件 google-chrome.repo</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/google-chrome.repo</span><br></pre></td></tr></table></figure><ul><li>添加如下内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[google-chrome]</span><br><span class="line">name=google-chrome</span><br><span class="line">baseurl=http://dl.google.com/linux/chrome/rpm/stable/$basearch</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub</span><br></pre></td></tr></table></figure><h3 id="安装google-chrome浏览器及chromedriver"><a href="#安装google-chrome浏览器及chromedriver" class="headerlink" title="安装google chrome浏览器及chromedriver"></a>安装google chrome浏览器及chromedriver</h3><ul><li>Google官方源安装：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum makecache</span><br><span class="line">yum -y install google-chrome-stable</span><br></pre></td></tr></table></figure><ul><li>Google官方源可能在中国无法使用，导致安装失败或者在国内无法更新，可以添加以下参数来安装：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install google-chrome-stable --nogpgcheck</span><br></pre></td></tr></table></figure><ul><li>检查chrome版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google-chrome --version</span><br></pre></td></tr></table></figure><ul><li><a href="https://repo.huaweicloud.com/chromedriver/">下载</a>对应版本的的chromedriver</li><li>检查chromedriver版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chromedriver --version</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;配置yum源&quot;&gt;&lt;a href=&quot;#配置yum源&quot; class=&quot;headerlink&quot; title=&quot;配置yum源&quot;&gt;&lt;/a&gt;配置yum源&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在目录 &amp;#x2F;etc&amp;#x2F;yum.repos.d&amp;#x2F; 下新建文件 googl</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://linvaux.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Mac使用Jenv实现Jdk多版本管理</title>
    <link href="https://linvaux.github.io/2024/07/25/Mac%E4%BD%BF%E7%94%A8Jenv%E5%AE%9E%E7%8E%B0Jdk%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    <id>https://linvaux.github.io/2024/07/25/Mac%E4%BD%BF%E7%94%A8Jenv%E5%AE%9E%E7%8E%B0Jdk%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</id>
    <published>2024-07-25T14:53:58.000Z</published>
    <updated>2024-07-25T15:00:39.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前在开发过程中，需要同时安装 Jdk8, Jdk11, Jdk17 进行项目开发，为了统一管理Jdk 环境，需要一款类似 conda 的工具来管理多套 Jdk 环境，可选的方案有以下几种：</p><ol><li>使用 shell 脚本来动态设置 JAVA_HOME；</li><li>使用 scoop 来管理环境；</li><li>使用 jenv 来管理环境；</li></ol><p>经过使用体验，最后选择了 jenv 来做 jdk 版本管理。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在 mac 下面可以使用 brew 来安装 jenv</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install jenv</span><br></pre></td></tr></table></figure><p>我用的 zsh，因此还需要将 jenv 添加到 zsh 中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行 jenv 初始化脚本，类似于 conda init 命令</span></span><br><span class="line">echo &#x27;eval &quot;$(jenv init -)&quot;&#x27; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="1-添加在本地已经安装的-jdk"><a href="#1-添加在本地已经安装的-jdk" class="headerlink" title="1.添加在本地已经安装的 jdk"></a>1.添加在本地已经安装的 jdk</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jenv add /Library/Java/JavaVirtualMachines/jdk-17.0.5.jdk/Contents/Home/</span><br><span class="line">jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_301.jdk/Contents/Home/</span><br><span class="line">jenv add /Library/Java/JavaVirtualMachines/jdk-11.0.11.jdk/Contents/Home/</span><br></pre></td></tr></table></figure><h3 id="2-列出已经添加的-jdk-版本"><a href="#2-列出已经添加的-jdk-版本" class="headerlink" title="2.列出已经添加的 jdk 版本"></a>2.列出已经添加的 jdk 版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jenv versions</span><br></pre></td></tr></table></figure><p><img src="/../images/iSQTdua4zwUJpzHvEXp7yxnr.png" alt="image.png"></p><h3 id="3-设置-jdk-的三种方式"><a href="#3-设置-jdk-的三种方式" class="headerlink" title="3.设置 jdk 的三种方式"></a>3.设置 jdk 的三种方式</h3><ol><li><p>jenv local <version>：该命令将会在当前目录下设置特定的 Java 版本。这意味着只有在该目录下执行程序调用时才会使用该版本的 Java。</p></li><li><p>jenv global <version>：该命令将会设置系统全局的 Java 版本。当在终端或其它地方运行 Java 应用程序时，都将使用该版本的 Java。</p></li><li><p>jenv shell <version>：该命令将会在当前 Shell 会话中设置特定的 Java 版本。这意味着只有在该 Shell 会话中执行程序调用时才会使用该版本的 Java。</p><p> 因此，这三个命令的主要区别在于设置 Java 版本的作用域和范围。jenv local 的作用域仅限于当前工作目录，jenv global 的作用域与操作系统全局环境相关，而 jenv shell 的作用域仅限于当前 Shell 会话。因此，根据具体情况选择使用不同的命令。需要注意的是，jenv 只对使用 jenv exec 执行的命令生效，对于直接使用 java 命令执行的程序，jenv 并不会自动切换 Java 版本。因此，需要手动设置系统环境变量或使用别的工具来切换 Java 版本。</p></li></ol><h3 id="4-Jenv-诊断"><a href="#4-Jenv-诊断" class="headerlink" title="4.Jenv 诊断"></a>4.Jenv 诊断</h3><p>jenv doctor 是 jenv 命令行工具提供的一个诊断工具，用于检查本地系统的 Java 环境是否正确配置。当我们安装 jenv 后，需要将其配置到系统环境变量中，并安装所需的 Java 版本。使用 jenv doctor 命令可以检测配置和 Java 版本是否正确安装，并提供诊断信息和建议以解决检测出的问题。jenv doctor 常见的使用场景有：</p><ol><li>检查 jenv 的环境变量是否正确配置。jenv 是一款基于环境变量来管理多个 Java 版本的工具，因此我们需要将其配置到系统环境变量中，并确保环境变量的正确性。</li><li>检查 jenv 的安装路径和版本号。检查 jenv 实际安装的位置以及当前所用的版本号，是否符合预期要求。</li><li>检查可用的 Java 版本是否正确安装和配置。jenv doctor 会检查本地系统环境中已经安装的 Java 版本，是否安装在了 jenv 管理的目录中，并支持在 jenv 中进行切换。</li></ol><p><img src="/../images/VuWUGUBYvMFibu1RHPRre6Qn.png" alt="image.png"></p><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol><li><a href="https://www.jenv.be/">Jenv 官方文档</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;目前在开发过程中，需要同时安装 Jdk8, Jdk11, Jdk17 进行项目开发，为了统一管理Jdk 环境，需要一款类似 conda 的工</summary>
      
    
    
    
    <category term="工具分享" scheme="https://linvaux.github.io/categories/%E5%B7%A5%E5%85%B7%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Mac, JDK" scheme="https://linvaux.github.io/tags/Mac-JDK/"/>
    
  </entry>
  
  <entry>
    <title>Pytest参数</title>
    <link href="https://linvaux.github.io/2024/07/25/Pytest%E5%8F%82%E6%95%B0/"/>
    <id>https://linvaux.github.io/2024/07/25/Pytest%E5%8F%82%E6%95%B0/</id>
    <published>2024-07-25T14:40:14.000Z</published>
    <updated>2024-07-25T14:40:51.371Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>分类</th><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>general</td><td>-k</td><td>支持python的表达式，用于筛选指定标记&#x2F;方法名的用例</td></tr><tr><td>-m</td><td>根据用例标签来筛选用例，设置标签可以使用  @pytest.mark.&lt;标签名&gt;</td><td></td></tr><tr><td>–markers</td><td>打印标签，包括内置的，插件的，还有自定义的</td><td></td></tr><tr><td>-x</td><td>第一个error或failed的test就退出</td><td></td></tr><tr><td>–fixtures</td><td>显示可用的fixture，包括内置和自己写的，如果fixture使用  “_”开头则需要使用-v才能显示此fixture</td><td></td></tr><tr><td>–fixtures-per-test</td><td>展示每条用例的fixture</td><td></td></tr><tr><td>–pdb</td><td>当用例出现错误或者被键盘中断后，启动pdb调试</td><td></td></tr><tr><td>–pdbcls&#x3D;modulename:classname</td><td>启动自定义pdb  debugger，一般用不到这个</td><td></td></tr><tr><td>–trace</td><td>执行测试用例时break，进入debugger</td><td></td></tr><tr><td>–capture&#x3D;method</td><td>标准输出&#x2F;标准错误输出&#x2F;标准输入的默认捕获，fd：标准输入，标准错误输出都会捕获；sys：只有向Python的sys.stdout和sys.stderr的写入行为会被捕获，不执行对文件描述符的写入的捕获；no：对print语句内容捕获，等同于  -s</td><td></td></tr><tr><td>-s</td><td>显示print语句的内容</td><td></td></tr><tr><td>–runxfail</td><td>强制运行xfail标记的用例</td><td></td></tr><tr><td>–lf, –last-failed</td><td>重新执行上次测试执行失败的用例，如果没有失败的用例，则执行全部用例</td><td></td></tr><tr><td>–ff, –failed-first</td><td>优先跑上次失败的test，tests的顺序会被打乱</td><td></td></tr><tr><td>–nf, –new-first</td><td>优先跑新添加的tests，剩余的按文件mtime顺序</td><td></td></tr><tr><td>–cache-show&#x3D;[CACHESHOW]</td><td>显示缓存，默认  * 显示所有缓存，可以带参数 pytest –cache-show&#x3D;cache&#x2F;nodeids</td><td></td></tr><tr><td>–cache-clear</td><td>在执行用例前，清理pytest缓存</td><td></td></tr><tr><td>–lfnf&#x3D;{all,none},  –last-failed-no-failures&#x3D;{all,none}</td><td>没有last-failed缓存数据，或上次没有失败时，执行全部用例</td><td></td></tr><tr><td>–sw, –stepwise</td><td>逐步运行，在失败时退出，下次运行时从失败的用例开始</td><td></td></tr><tr><td>–stepwise-skip</td><td>跳过第一个失败的test，如果再遇到失败就退出</td><td></td></tr><tr><td>reporting</td><td>–durations&#x3D;N</td><td>显示N个最慢的setup&#x2F;test的耗时，N&#x3D;0时，显示所有耗时</td></tr><tr><td>–durations-min&#x3D;N</td><td>显示N个最小的setup&#x2F;test的耗时</td><td></td></tr><tr><td>-v, –verbose</td><td>输出详细信息</td><td></td></tr><tr><td>–no-header</td><td>不显示pytest消息头，只展示用例信息</td><td></td></tr><tr><td>–no-summary</td><td>不显示用例执行完的summary  info</td><td></td></tr><tr><td>-q, –quiet</td><td>静默模式，不输出任何内容</td><td></td></tr><tr><td>–verbosity&#x3D;VERBOSE</td><td>信息显示等级，貌似没啥用</td><td></td></tr><tr><td>-r chars</td><td>-r  f：显示failed信息；-r E：显示error信息；-r s：显示skipped信息；-r x：显示xfailed信息；-r  X：显示xpassed信息；-r p：显示passed信息；-r P：显示   passed with output信息； -r a&#x2F;A：显示 all except passed信息；-r w：显示默认告警信息；-r  N：重置list</td><td></td></tr><tr><td>–disable-warnings, –disable-pytest-warnings</td><td>禁用pytest告警，如未注册的标记等</td><td></td></tr><tr><td>-l, –showlocal</td><td>用例执行失败时，打印堆栈信息，默认被禁用</td><td></td></tr><tr><td>–tb&#x3D;style</td><td>traceback打印模式，一般设置为auto即可</td><td></td></tr><tr><td>–show-capture&#x3D;{no,stdout,stderr,log,all}</td><td>失败的用例如何显示，默认为all</td><td></td></tr><tr><td>–full-trace</td><td>不截取traceback，默认会截断</td><td></td></tr><tr><td>–color&#x3D;color</td><td>是否显示彩色，yes：显示颜色；no：不显示颜色；auto：自动</td><td></td></tr><tr><td>–code-highlight&#x3D;{yes,no}</td><td>代码是否高亮显示，一般用不到</td><td></td></tr><tr><td>–pastebin&#x3D;mode</td><td>没什么用的参数，我也不知道干嘛的</td><td></td></tr><tr><td>–junit-xml&#x3D;path</td><td>在给定的path路径下生成junit-xml风格的测试报告</td><td></td></tr><tr><td>–junit-prefix&#x3D;str</td><td>在junit-xml输出中的classnames添加前缀</td><td></td></tr><tr><td>pytest-warnings</td><td>-W  PYTHONWARNINGS, –pythonwarnings&#x3D;PYTHONWARNINGS</td><td>设置报告哪些warnings</td></tr><tr><td>–maxfail&#x3D;num</td><td>出现num个errors或者fails就退出测试</td><td></td></tr><tr><td>–strict-config</td><td>解析配置文件中pytest部分时，遇到warning就抛出error</td><td></td></tr><tr><td>–strict-markers, –strict</td><td>发现未知标记时，抛出error，</td><td></td></tr><tr><td>-c file</td><td>从指定配置文件加载配置，默认为pytes.ini</td><td></td></tr><tr><td>–continue-on-collection-errors</td><td>在收集用例时发生错误，也会继续执行用例</td><td></td></tr><tr><td>–rootdir&#x3D;ROOTDIR</td><td>tests根目录，相对路径</td><td></td></tr><tr><td>collection</td><td>–collect-only, –co</td><td>收集用例，但不执行</td></tr><tr><td>–pyargs</td><td>把所有参数解释为python包</td><td></td></tr><tr><td>–ignore&#x3D;path</td><td>忽略测试目录，使用英文逗号分割</td><td></td></tr><tr><td>–ignore-glob&#x3D;path</td><td>path匹配多个不需要收集的测试目录，使用英文逗号分割</td><td></td></tr><tr><td>–deselect&#x3D;nodeid_prefix</td><td>通过node  id prefix反选。可以多个，使用英文逗号分隔</td><td></td></tr><tr><td>–confcutdir&#x3D;dir</td><td>只加载相对于dir目录的conftest.py文件</td><td></td></tr><tr><td>–noconftest</td><td>不加载conftest.py文件</td><td></td></tr><tr><td>–keep-duplicates</td><td>收集重复的test文件，默认只会收集1item，加参数后会收集2items</td><td></td></tr><tr><td>–collect-in-virtualenv</td><td>收集本地虚拟环境目录的tests</td><td></td></tr><tr><td>–import-mode&#x3D;{prepend,append,importlib}</td><td>包导入模式，一般用不到，参考：<a href="https://www.osgeo.cn/pytest/pythonpath.html?highlight=import%20mode">https://www.osgeo.cn/pytest/pythonpath.html?highlight=import%20mode</a></td><td></td></tr><tr><td>–doctest-modules</td><td>文档测试，没啥用</td><td></td></tr><tr><td>–doctest-report&#x3D;{none,cdiff,ndiff,udiff,only_first_failure}</td><td>一样，也没啥用</td><td></td></tr><tr><td>–doctest-glob&#x3D;pat</td><td>还是没啥用</td><td></td></tr><tr><td>–doctest-ignore-import-errors</td><td>文档测试时忽略导包错误，继续没什么用</td><td></td></tr><tr><td>–doctest-continue-on-failure</td><td>文档测试时出现失败继续测试，依然没什么用</td><td></td></tr><tr><td>test session debugging and configuration</td><td>–basetemp&#x3D;dir</td><td>test  run的base临时目录（如果存在会先删除）</td></tr><tr><td>-V, –version</td><td>输出pytest版本</td><td></td></tr><tr><td>-h, –help</td><td>打印pytest帮助信息</td><td></td></tr><tr><td>-p name</td><td>加载插件，一般不会控制此参数</td><td></td></tr><tr><td>–trace-config</td><td>查看本地安装好的第三方插件</td><td></td></tr><tr><td>–debug</td><td>保存debug信息到’pytestdebug.log’文件</td><td></td></tr><tr><td>-o OVERRIDE_INI, –override-ini&#x3D;OVERRIDE_INI</td><td>覆盖ini文件配置</td><td></td></tr><tr><td>–assert&#x3D;MODE</td><td>断言模式，默认rewrite</td><td></td></tr><tr><td>–setup-only</td><td>只加载fixture，不执行测试用例</td><td></td></tr><tr><td>–setup-show</td><td>在执行测试用例时，打印fixture步骤</td><td></td></tr><tr><td>–setup-plan</td><td>展示哪些用例和fixture将要被执行</td><td></td></tr><tr><td>logging</td><td>–log-level&#x3D;LEVEL</td><td>日志等级，默认  WARNING （具体日志等级参考 logging 模块中的日志等级）</td></tr><tr><td>–log-format&#x3D;LOG_FORMAT</td><td>日志格式（具体日志格式参考  logging 模块中的日志格式）</td><td></td></tr><tr><td>–log-date-format&#x3D;LOG_DATE_FORMA</td><td>日志日期格式（具体日志格式参考  logging 模块中的日志格式）</td><td></td></tr><tr><td>–log-cli-level&#x3D;LOG_CLI_LEVEL</td><td>cli日志等级（具体日志等级参考  logging 模块中的日志等级）</td><td></td></tr><tr><td>–log-cli-format&#x3D;LOG_CLI_FORMAT</td><td>cli日志格式（具体日志格式参考  logging 模块中的日志格式）</td><td></td></tr><tr><td>–log-cli-date-format&#x3D;LOG_CLI_DATE_FORMAT</td><td>cli日志日期格式（具体日志格式参考  logging 模块中的日志格式）</td><td></td></tr><tr><td>–log-file&#x3D;LOG_FILE</td><td>日志文件路径</td><td></td></tr><tr><td>–log-file-level&#x3D;LOG_FILE_LEVE</td><td>日志文件中的日志等级</td><td></td></tr><tr><td>–log-file-format&#x3D;LOG_FILE_FORMAT</td><td>日志文件中的日志格式</td><td></td></tr><tr><td>–log-file-date-format&#x3D;LOG_FILE_DATE_FORMAT</td><td>日志文件中的日志时间格式</td><td></td></tr><tr><td>–log-auto-indent&#x3D;LOG_AUTO_INDENT</td><td>自动缩进传递给日志模块的多行消息。接受true  | on、false | off或整数</td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;分类&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;general&lt;/td&gt;
&lt;td&gt;-k&lt;/td&gt;
&lt;td&gt;支持python的表达式，用于筛选指定标记&amp;#</summary>
      
    
    
    
    <category term="测试" scheme="https://linvaux.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Pytest" scheme="https://linvaux.github.io/tags/Pytest/"/>
    
  </entry>
  
</feed>
